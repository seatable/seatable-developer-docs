{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the SeaTable Developer Manual, your comprehensive resource for leveraging the potential of SeaTable, the world's leading self-hosted no-code platform.</p> <p>This guide illustrates three fundamental approaches to development within SeaTable:</p> <ol> <li>Scripting within SeaTable: Create custom logic or perform individual data processing using JavaScript or Python, both supported within SeaTable.</li> <li>SeaTable plugins: Develop plugins capable of interacting with, visualizing, and operating on data within a SeaTable Base.</li> <li>Utilizing any programming language with SeaTable's API: Seamlessly interact with the SeaTable API to construct your own web pages or programs.</li> </ol>"},{"location":"#developer-decision-tree","title":"Developer decision tree","text":"<p>For guidance on choosing the right section within this manual, refer to the decision tree diagram above.</p> <p>If you aim to integrate a software product with SeaTable, note that SeaTable supports multiple workflow automation tools such as n8n, Zapier, and Make. Please refer to the SeaTable User Manual for detailed information on these integrations, as they are not covered here.</p>"},{"location":"#target-audience","title":"Target audience","text":"<p>The Developer Manual caters to developers interested in utilizing custom scripts within SeaTable, creating their own plugins, or developing custom programs.</p> <p>All instructions provided are applicable to self-hosted SeaTable installations (Enterprise and Developer Editions), as well as to SeaTable Cloud.</p> <p>Known limitations of SeaTable Cloud</p> <ol> <li>Custom Plugin Installation: SeaTable Cloud does not support the installation of custom plugins.</li> <li>Python Script Runs Limitation: The number of Python script runs is constrained by your current SeaTable Cloud subscription.</li> </ol> <p>Therefore, it's recommended to set up your own SeaTable Server if you intend to develop custom plugins, applications, or run multiple Python scripts. For further information about deploying your server, please refer to the Admin manual.</p> <p>If you are new to SeaTable, we suggest starting with the introduction section covering the platform's requirements and basic concepts of this no-code platform. Otherwise, let's dive right in!</p> <p>Start scripting Write your own plugin Use the API</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#just-to-test","title":"just to test ...","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>gitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit</code></pre> <pre><code>graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n    E--&gt;C;\n    F--&gt;E;\n    G--&gt;F;</code></pre> <pre><code>pie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15</code></pre> <pre><code>gantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 4d\n        Another task    :after a1, 10d\n    section Another\n        Task in Another :2014-01-12, 2d\n        another task    :4d</code></pre>"},{"location":"clients/","title":"Client API's","text":"<p>Thanks to seatable's full API, virtually anything can be controlled with any programming language.</p> <p>On https://api.seatable.com you can find all available API commands and sample commands for different programming languages.</p> <p>For a few programming languages there are already ready-to-use client APIs classes that do some of the work for you. These are presented in this part of the documentation.</p>"},{"location":"clients/php_api/","title":"PHP Client","text":"<p>SeaTable's API exposes the entire SeaTable features via a standardized programmatic interface. The SeaTable PHP Client encapsulates SeaTable Server Restful API. If you are familiar this client enables you to call every available API endpoint of SeaTable. You can interact with the user accounts, bases or files.</p> <p>Auto generated from openapi specification</p> <p>Since April 2024, we auto generate this SeaTable php client from our public available openapi specification. The advantage is that, the php client automatically contains all available API endpoints and we save a lot of programming capacity. Also we could generate more api clients for other programming languages in no time with the same feature set. The disadvantage is, that with this new client we removed some convenitent functions for authentication and the new version is not compatible at all with the version v0.2 and earlier.</p>"},{"location":"clients/php_api/#installation","title":"Installation","text":"<p>The SeaTable API installs as part of your project dependencies. It is available from Packagist and can be installed with Composer:</p> <pre><code>composer require seatable/seatable-api-php\n</code></pre> <p>The source code of the PHP Client API is available at GitHub.</p>"},{"location":"clients/php_api/#getting-started","title":"Getting Started","text":"<p>After installation you can easily connect to your SeaTable system and execute API calls.</p>"},{"location":"clients/php_api/#get-information-about-your-account","title":"Get information about your account","text":"<p>The following code connects to SeaTable Cloud. You have to provide your <code>Account Token</code>. Please refer to api.seatable.com for guidance on how to obtain an <code>Account Token</code>.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure Bearer authorization\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCOUNT_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\User\\UserApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getAccountInfo();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi-&gt;getAccountInfo: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#list-your-bases","title":"List your bases","text":"<p>This time, we connect to a self-hosted SeaTable Server.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure Bearer authorization: AccountTokenAuth\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration();\n$config-&gt;setAccessToken('YOUR_ACCOUNT_TOKEN');\n$config-&gt;setHost('https://seatable.example.com');\n\n$apiInstance = new SeaTable\\Client\\User\\BasesApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;listBases();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BasesApi-&gt;listBases: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#get-metadata-from-your-base","title":"Get Metadata from your Base","text":"<p>First we have to get the <code>Base-Token</code> and the <code>base_uuid</code> and then we can execute the <code>getMetadata</code> call.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Metadata\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n$apiInstance = new SeaTable\\Client\\Base\\BaseInfoApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getMetadata($result['dtable_uuid']);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseInfoApi-&gt;getMetadata: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#execute-sql-query-against-your-base","title":"Execute SQL-Query against your base","text":"<pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Base query\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n\n$apiInstance = new SeaTable\\Client\\Base\\RowsApi(new GuzzleHttp\\Client(), $config);\n\n$base_uuid = $result['dtable_uuid'];\n$sql_query = new SeaTable\\Client\\Base\\SqlQuery([\"sql\" =&gt; \"Select * from Table1\", \"convert_keys\" =&gt; false]);\n\ntry {\n    $result = $apiInstance-&gt;querySQL($base_uuid, $sql_query);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RowsApi-&gt;querySQL: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#add-a-row-to-your-base","title":"Add a row to your base","text":"<pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Base query\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n\n$apiInstance = new SeaTable\\Client\\Base\\RowsApi(new GuzzleHttp\\Client(), $config);\n\n$base_uuid = $result['dtable_uuid'];\n$request = new SeaTable\\Client\\Base\\AppendRows([\n    'table_name' =&gt; 'Table1',\n    'rows' =&gt; [\n        [\n            'Name' =&gt; 'Inserted via API',\n        ],\n    ],\n    // Whether to apply default values\n    'apply_default' =&gt; false,\n]);\n\ntry {\n    $result = $apiInstance-&gt;appendRows($base_uuid, $request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RowsApi-&gt;appendRows: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#api-endpoints","title":"API Endpoints","text":"<p>You can find detailed documentation for all endpoints including auto-generated examples on GitHub:</p> <ul> <li>Auth</li> <li>Base</li> <li>File</li> <li>SysAdmin</li> <li>TeamAdmin</li> <li>User</li> </ul>"},{"location":"clients/python_api/","title":"Python Client","text":"<p>The SeaTable Python Client encapsulates SeaTable Server Restful API. You can call it in your python programm.</p> <p>External python programms and python scripts, executed in SeaTable, use the same python library and therefore share the same functions. For an overview of the available functions, read the chapter of script programming with Python in this documentation.</p>"},{"location":"clients/python_api/#installation","title":"Installation","text":"<pre><code>pip3 install seatable-api\n</code></pre> <p>The source code of the Python Client API is available at GitHub.</p>"},{"location":"clients/ruby_api/","title":"Ruby Client","text":"<p>One of our community members made a first version of a SeaTable Ruby Client.</p> <p>The source code of the Ruby Client API and additional explanations are available at GitHub.</p>"},{"location":"clients/javascript/columns/","title":"Columns","text":"<p>Every table in a base contains columns. The following calls are available to interact with the columns of a table.</p>"},{"location":"clients/javascript/columns/#get-columns","title":"Get Columns","text":"<p>listColumns</p> <pre><code>base.listColumns(table_name, (view_name = \"\"));\n</code></pre> <p>Example</p> <pre><code>const columns1 = await base.listColumns(\"Table1\");\nconst columns2 = await base.listColumns(\"Table1\", (view_name = \"default\"));\n</code></pre> <p>getColumnByName</p> <pre><code>base.getColumnByName(table_name, column_name);\n</code></pre> <p>Example <pre><code>const col = await base.getColumnsByName('Table1', 'Name');\n</code></pre></p> <p>getColumnsByType</p> <pre><code>base.getColumnsByType(table_name, col_type);\n</code></pre> <p>Example <pre><code>const cols = await base.getColumnsByType('Table1', 'number')\n</code></pre></p>"},{"location":"clients/javascript/columns/#add-column","title":"Add Column","text":"<p>insertColumn</p> <pre><code>base.insertColumn(table_name, column_name, column_type, column_key='', column_data='')\n</code></pre> <p>Example <pre><code>import { ColumnTypes } from 'seatable-api';\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT)\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT, '0000')\nawait base.insertColumn('Table1', 'Link1', ColumnTypes.LINK, column_data={\n        'table':'Table1',\n        'other_table':'Test_User'\n    })\n</code></pre></p>"},{"location":"clients/javascript/columns/#rename-column","title":"Rename Column","text":"<p>renameColumn</p> <pre><code>base.renameColumn(table_name, column_key, new_column_name)\n</code></pre> <p>Example <pre><code>await base.renameColumn('Table1', 'kSiR', 'new-seatable-api')\n</code></pre></p>"},{"location":"clients/javascript/columns/#column-settings","title":"Column Settings","text":"<p>resizeColumn</p> <pre><code>base.resizeColumn(table_name, column_key, new_column_width)\n</code></pre> <p>Example <pre><code>await base.resizeColumn('Table1', 'asFV', 500)\n</code></pre></p> <p>freezeColumn</p> <pre><code>base.freezeColumn(table_name, column_key, frozen)\n</code></pre> <p>Example <pre><code>await base.freezeColumn('Table1', '0000', true)\n</code></pre></p> <p>moveColumn</p> <pre><code>base.moveColumn(table_name, column_key, target_column_key)\n</code></pre> <p>Example In this example, the 'loPx' column will be moved to the right of the '0000' column <pre><code>await base.moveColumn('Table1', 'loPx', '0000')\n</code></pre></p> <p>modifyColumnType</p> <pre><code>base.modifyColumnType(table_name, column_key, new_column_type)\n</code></pre> <p>Example <pre><code>import { ColumnTypes } from 'seatable-api';\nawait base.modifyColumnType('Table1', 'nePI', ColumnTypes.NUMBER)\n</code></pre></p> <p>addColumnOptions</p> <p>Used by single-select or multiple-select type columns <pre><code>base.addColumnOptions(table_name, column, options)\n</code></pre></p> <p>Example <pre><code>await base.addColumnOptions('Table1', 'My choices', [\n        {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre></p> <p>addColumnCascadeSettings</p> <p>Used by single-select column, to add a limitation of child column options according to the option of parent column <pre><code>base.addColumnCascadeSettings(table_name, child_column, parent_column, cascade_settings)\n</code></pre></p> <p>Example <pre><code>await base.addColumnCascadeSettings(\"Table1\", \"single-op-col-c\", \"single-op-col\", {\n\"aaa\": [\"aaa-1\", \"aaa-2\"], # If \u201caaa\u201d is selected by parent column, the available options of child column are \"aaa-1 and aaa-2\"\n\"bbb\": [\"bbb-1\", \"bbb-2\"],\n\"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre></p>"},{"location":"clients/javascript/columns/#delete-column","title":"Delete Column","text":"<p>deleteColumn</p> <pre><code>base.deleteColumn(table_name, column_key)\n</code></pre> <p>Example <pre><code>await base.deleteColumn('Table1', 'bsKL')\n</code></pre></p>"},{"location":"clients/javascript/constants/","title":"Constants","text":"<p>In the script there may be some constants we need to know.</p> <p>ColumnTypes</p> <p>Column type, when insert/add columns, change column types, etc. need to be used <pre><code>import { ColumnTypes } from 'seatable-api';\n\nColumnTypes.NUMBER              // number\nColumnTypes.TEXT                // text\nColumnTypes.LONG_TEXT           // long text\nColumnTypes.CHECKBOX            // checkbox\nColumnTypes.DATE                // date &amp; time\nColumnTypes.SINGLE_SELECT       // single select\nColumnTypes.MULTIPLE_SELECT     // multiple\nColumnTypes.IMAGE               // image\nColumnTypes.FILE                // file\nColumnTypes.COLLABORATOR        // collaborator\nColumnTypes.LINK                // link to\nColumnTypes.FORMULA             // formula\nColumnTypes.CREATOR             // creator\nColumnTypes.CTIME               // create time\nColumnTypes.LAST_MODIFIER       // last modifier\nColumnTypes.MTIME               // modify time\nColumnTypes.GEOLOCATION         // geolocation\nColumnTypes.AUTO_NUMBER         // auto munber\nColumnTypes.URL                 // URL\n</code></pre></p>"},{"location":"clients/javascript/javascript_api/","title":"JavaScript Client","text":"<p>The SeaTable JavaScript Client encapsulates SeaTable Server Restful API. You can call it in your front-end page or Node.js program.</p> <p>JavaScript API cannot be used for scripts in SeaTable bases. For script programming with Javascript, there is a separate chapter in this documentation.</p> <p>Note, JavaScript API calls SeaTable Server Restful API, while scripts in SeaTable bases interact with the base loaded in the browser, so the APIs of the two are somewhat different.</p>"},{"location":"clients/javascript/javascript_api/#installation","title":"Installation","text":"<pre><code>npm install seatable-api\n</code></pre> <p>The source code of the JavaScript Client API is available at GitHub.</p>"},{"location":"clients/javascript/javascript_api/#reference","title":"Reference","text":"<p>To use SeaTable APIs, you should first initialize a base object and call <code>base.auth()</code>. <code>base.auth()</code> is an async function, which needs to be executed in async functions. Other APIs all return a promise object. There are two ways to use them</p> <p>The first way:</p> <pre><code>base.listViews(tableName).then(views =&gt; {\n  // Use views to complete the requirements\n}).catch(error =&gt; {\n  // Exception handling\n})\n</code></pre> <p>The second way:</p> <pre><code>try {\n  const views = await base.listViews(tableName);\n  // Use views to complete the requirements\n} catch (error) {\n  // Exception handling\n}\n</code></pre> <p>SeaTable API Errors</p> <ul> <li>400 Params invalid</li> <li>403 Permission denied</li> <li>413 exceed limit</li> <li>500 Internal Server Error</li> </ul>"},{"location":"clients/javascript/javascript_api/#authorization","title":"Authorization","text":"<p>Base represents a table. You can use the api token of the form to obtain the authorization to read and write the base. This token can be generated directly on the web side.</p> <p>Use the API Token of the base to get access authorization.</p>"},{"location":"clients/javascript/javascript_api/#example","title":"Example","text":"<pre><code>import { Base } from \"seatable-api\";\n\nconst config = {\n  server: \"https://cloud.seatable.cn\",\n  APIToken: \"c3c75dca2c369849455a39f4436147639cf02b2d\",\n};\n\nconst base = new Base(config);\nawait base.auth();\n</code></pre>"},{"location":"clients/javascript/links/","title":"Links","text":""},{"location":"clients/javascript/links/#get-links","title":"Get Links","text":"<p>getLinkedRecords</p> <p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.getColumnLinkId(table_name, column_name);\n</code></pre> <p>Example</p> <pre><code>await base.getLinkedRecords('0000', '89o4', [\n{'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n{'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\n\n// a key-value data structure returned as below\n// key: row_id of link table\n// value: a list which includes the row info of linked table\n{\n'FzNqJxVUT8KrRjewBkPp8Q': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n],\n'Jmnrkn6TQdyRg1KmOM4zZg': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n]\n}\n</code></pre>"},{"location":"clients/javascript/links/#get-link-id","title":"Get Link ID","text":"<p>Get Link ID</p> <pre><code>base.getColumnLinkId(table_name, column_name);\n</code></pre> <p>Example</p> <pre><code>const linkId = await base.getColumnLinkId(\"LinkTable\", \"Record\");\n// return the link id such as 'aHL2'\n</code></pre>"},{"location":"clients/javascript/links/#add-link","title":"Add Link","text":"<p>addLink</p> <p>Add links, link other table records</p> <pre><code>base.addLink(link_id, table_name, other_table_name, row_id, other_row_id);\n</code></pre> <p>Example</p> <pre><code>await base.addLink(\n\"5WeC\",\n\"real-img-files\",\n\"contact\",\n\"CGtoJB1oQM60RiKT-c5J-g\",\n\"PALm2wPKTCy-jdJNv_UWaQ\"\n);\n</code></pre>"},{"location":"clients/javascript/links/#update-links","title":"Update Link(s)","text":"<p>updateLink</p> <p>Modify the info of link-type column <pre><code>base.updateLink(link_id, table_name, other_table_name, row_id, other_rows_ids)\n</code></pre></p> <p>Example <pre><code>await base.updateLink(\n        link_id='r4IJ',\n        table_name='Table1',\n        other_table_name='Table2',\n        row_id='BXhEm9ucTNu3FjupIk7Xug',\n        other_rows_ids=[\n        'exkb56fAT66j8R0w6wD9Qg',\n        'DjHjwmlRRB6WgU9uPnrWeA'\n        ]\n    )\n</code></pre></p> <p>batchUpdateLinks</p> <p>Batch update infos of link-type columns <pre><code>base.batchUpdateLinks(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre></p> <p>Example <pre><code>link_id = \"WaW5\"\ntable_name =\"Table1\"\nother_table_name = \"Table2\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"eSQe9OpPQxih8A9zPXdMVA\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n        \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n        \"eSQe9OpPQxih8A9zPXdMVA\":[\"cWHbzQiTR8uHHzH_gVSKIg\",\"X56gE7BrRF-i61YlE4oTcw\"],\n        \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\n\nawait base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)\n</code></pre></p>"},{"location":"clients/javascript/links/#remove-link","title":"Remove Link","text":"<p>removeLink</p> <pre><code>base.removeLink(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Example <pre><code>await base.removeLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre></p>"},{"location":"clients/javascript/metadata/","title":"Metadata","text":"<p>Metadata delivers the complete structure of a base with tables, views and columns.</p> <p>getMetadata</p> <p>Get the complete metadata of a table. The metadata will not contain the concrete rows of the table.</p> <pre><code>base.getMetadata();\n</code></pre> <p>Example</p> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre>"},{"location":"clients/javascript/metadata/#_1","title":"Metadata","text":""},{"location":"clients/javascript/rows/","title":"Rows","text":""},{"location":"clients/javascript/rows/#get-rows","title":"Get Rows","text":"<p>listRows</p> <pre><code>base.listRows(table_name, view_name=None, order_by='', desc='', start='', limit='')\n</code></pre> <p>Example <pre><code>const rows1 = await base.listRows('Table1')\nconst rows2 = await base.listRows('Table1', view_name='default', order_by='\u5e74\u9f84', desc=true, start=5, limit=20)\n</code></pre></p> <p>getRow</p> <pre><code>base.getRow(table_name, row_id)\n</code></pre> <p>Example <pre><code>const row = await base.getRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p>"},{"location":"clients/javascript/rows/#add-rows","title":"Add Row(s)","text":"<p>appendRow</p> <pre><code>base.appendRow(table_name, row_data, apply_default = false)\n</code></pre> <p>Example <pre><code>row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.appendRow('Table1', row_data)\n</code></pre></p> <p>insertRow</p> <pre><code>base.insertRow(table_name, row_data, anchor_row_id, apply_default = false)\n</code></pre> <p>Example <pre><code>const row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.insertRow('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p> <p>batchAppendRows</p> <pre><code>base.batchAppendRows(table_name, rows_data, apply_default = false)\n</code></pre> <p>Example</p> <pre><code>const rows_data = [{\n    'Name': 'test batch',\n    'content': 'Yes'\n}, {\n    'Name': 'test batch',\n    'content': 'Yes'\n}, {\n    'Name': 'test batch',\n    'content': 'Yes'\n}]\n\n// Whether to use the default value set in the table column.\n// If set to true, the default value will be used if the column is not specified in row_data.\n// apply_default is set to false by default.\nawait base.batchAppendRows('Table6', rows_data, apply_default = true)\n</code></pre>"},{"location":"clients/javascript/rows/#update-row","title":"Update Row","text":"<p>updateRow</p> <pre><code>base.updateRow(table_name, row_id, row_data)\n</code></pre> <p>Example <pre><code>row_data = {\n    \"Number\": \"123\"\n}\nawait base.updateRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\n</code></pre></p> <p>batchUpdateRows</p> <pre><code>base.batchUpdateRows(table_name, rows_data)\n</code></pre> <p>Example <pre><code>const updates_data = [\n        {\n            \"row_id\": \"fMmCFyoxT4GN5Y2Powbl0Q\",\n            \"row\": {\n                \"Name\": \"Ranjiwei\",\n                \"age\": \"36\"\n            }\n        },\n        {\n            \"row_id\": \"cF5JTE99Tae-VVx0BGT-3A\",\n            \"row\": {\n                \"Name\": \"Huitailang\",\n                \"age\": \"33\"\n            }\n        },\n        {\n            \"row_id\": \"WP-8rb5PSUaM-tZRmTOCPA\",\n            \"row\": {\n                \"Name\": \"Yufeng\",\n                \"age\": \"22\"\n            }\n        }\n    ]\nawait base.batchUpdateRows('Table1', rows_data=updates_data)\n</code></pre></p>"},{"location":"clients/javascript/rows/#delete-rows","title":"Delete Row(s)","text":"<p>deleteRow</p> <pre><code>base.deleteRow(table_name, row_id)\n</code></pre> <p>Example <pre><code>await base.deleteRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p> <p>batchDeleteRows</p> <pre><code>base.batchDeleteRows(table_name, row_ids)\n</code></pre> <p>Example <pre><code>const del_rows = rows.slice(0, 3);\nconst row_ids = del_rows.map(row =&gt; row._id);\nawait base.batchDeleteRows('Table1', row_ids)\n</code></pre></p>"},{"location":"clients/javascript/sql_query/","title":"Query with SQL","text":"<p>query</p> <p>Use sql to query a base <pre><code>base.query(sql)\n</code></pre></p> <p>Example: BASIC <pre><code>await base.query('select name, price, year from Bill')\n</code></pre> Returns for example the following: <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre></p> <p>Example: WHERE</p> <p><pre><code>await base.query('select name, price from Bill where year = 2021 ')\n</code></pre> Returns for example the following: <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre></p> <p>Example: ORDER BY</p> <p><pre><code>await base.query('select name, price, year from Bill order by year')\n</code></pre> Returns for example the following:</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>Example: GROUP BY</p> <p><pre><code>await base.query('select name, sum(price) from Bill group by name')\n</code></pre> Returns for example the following: <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre></p> <p>Example: DISTINCT</p> <p><pre><code>await base.query('select distinct name from Bill')\n</code></pre> Returns for example the following:</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre>"},{"location":"clients/javascript/tables/","title":"Tables","text":""},{"location":"clients/javascript/tables/#get-tables","title":"Get Table(s)","text":"<p>getTables</p> <pre><code>base.getTables()\n</code></pre> <p>Example <pre><code>const tables = await base.getTables();\n</code></pre></p> <p>getTableByName</p> <pre><code>base.getTableByName(tableName);\n</code></pre> <p>Example <pre><code>const table = await base.getTableByName('Table1')\n</code></pre></p>"},{"location":"clients/javascript/tables/#add-table","title":"Add Table","text":"<p>addTable</p> <pre><code>base.addTable(tableName: String, lang='en', columns=[])\n</code></pre> <p>Example <pre><code>await base.addTable('Investigation', lang='en')\n</code></pre></p>"},{"location":"clients/javascript/tables/#rename-table","title":"Rename Table","text":"<p>renameTable</p> <pre><code>base.renameTable(oldNname: String, newName: String)\n</code></pre> <p>Example <pre><code>await base.renameTable('Table1', 'Projects 2023');\n</code></pre></p>"},{"location":"clients/javascript/tables/#delete-table","title":"Delete Table","text":"<p>deleteTable</p> <pre><code>base.deleteTable(tableName)\n</code></pre> <p>Example <pre><code>await base.deleteTable('Table1')\n</code></pre></p>"},{"location":"clients/javascript/views/","title":"Views","text":""},{"location":"clients/javascript/views/#get-views","title":"Get Views","text":"<p>listViews</p> <pre><code>base.listViews(table_name)\n</code></pre> <p>Example <pre><code>const views = await base.listViews('Table1')\n</code></pre></p> <p>getViewByName</p> <pre><code>base.getViewByName(table_name, view_name);\n</code></pre> <p>Example <pre><code>const view = await base.getViewByName('Table1', 'MyView');\n</code></pre></p>"},{"location":"clients/javascript/views/#add-view","title":"Add View","text":"<p>addView</p> <pre><code>base.addView(table_name, new_view_name);\n</code></pre> <p>Example <pre><code>await base.addView('Table1', 'new_view');\n</code></pre></p>"},{"location":"clients/javascript/views/#rename-view","title":"Rename View","text":"<p>renameView</p> <pre><code>base.renameView(table_name, view_name, new_view_name);\n</code></pre> <p>Example <pre><code>await base.renameView('Table1', 'myView', 'myView-01');\n</code></pre></p>"},{"location":"clients/javascript/views/#delete-view","title":"Delete View","text":"<p>deleteView</p> <pre><code>base.deleteView(table_name, view_name);\n</code></pre> <p>Example <pre><code>await base.deleteView('Table1', 'MyView');\n</code></pre></p>"},{"location":"introduction/basic_concepts/","title":"Basic concepts","text":"<p>SeaTable is the world leading self-hosted no-code platform. With seatable, you can digitize processes and workflows in the shortest possible time without having to write a line of code.</p> <p>Even though you don't need any programming skills to use SeaTable, the digital Lego construction kit for developers offers various interfaces and automation options.</p>"},{"location":"introduction/basic_concepts/#right-solution-for-your-purpose","title":"Right solution for your purpose","text":"<p>Depending on what you want to do with seatable, this manual is divided into three major sections. This manual explains how you can build such solutions by yourself.</p> <p>Here are three examples, one for each section of this documentation:</p>"},{"location":"introduction/basic_concepts/#python-script-to-get-the-structure-of-a-base","title":"Python script to get the structure of a base","text":"<p>You can take the following python code and copy&amp;paste it to SeaTable. It will return the complete metastructure of your base. Easy or not?</p> Python codeOutput <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nmetadata = base.get_metadata()\n\nprint(\"--- COMPLETE BASE STRUCTURE WITH ALL BASES AND COLUMNS ---\")\nfor table in metadata['tables']:\n    print('.')\n    print(\"Table: \"+table['name']+\" (ID: \"+table['_id']+\")\")\nfor column in table['columns']:\n    link_target = \"\"\n    if column['type'] == \"link\":\n        link_target = \" --&gt; \"+column['data']['other_table_id']\n        if column['data']['other_table_id'] == table['_id']:\n            link_target = \" --&gt; \"+column['data']['table_id']\n    print(\"  --&gt; \"+column['name']+\" (\"+column['type']+link_target+\")\")\n</code></pre> <pre><code>--- COMPLETE BASE STRUCTURE WITH ALL BASES AND COLUMNS ---\n.\nTable: Opportunities (ID: 9g8f)\n--&gt; Name (text)\n--&gt; Status (single-select)\n--&gt; Prio (single-select)\n--&gt; Owner (collaborator)\n--&gt; Customer (link --&gt; deGa)\n--&gt; Estimated value (number)\n--&gt; Proposal deadline (date)\n--&gt; Contacts (link --&gt; lYb8)\n--&gt; Interactions (link --&gt; 0000)\n.\nTable: Interactions (ID: 0000)\n--&gt; Interaction ID (auto-number)\n--&gt; Opportunity (link --&gt; 9g8f)\n--&gt; Type (single-select)\n--&gt; Interaction (formula)\n--&gt; Opportunity status (formula)\n--&gt; Date and time (date)\n--&gt; Contact (link --&gt; lYb8)\n--&gt; Notes (long-text)#\n</code></pre>"},{"location":"introduction/basic_concepts/#gallery-plugin","title":"Gallery-Plugin","text":"<p>SeaTable provides some Plugins to visualize your data. Examples for such a plugin are the Gallery, Timeline, Kanban and so on. But SeaTable has everything that you build your own plugin. There are no limits to the imagination, it just requires some time and React skills.</p> <p></p>"},{"location":"introduction/basic_concepts/#custom-app-seatable-ideas","title":"Custom app: SeaTable ideas","text":"<p>There are multiple API classes available for various programming languages. This enables you to build any app or website you want.</p> <p>Our feature request tool SeaTable Ideas is an example for such a website. It uses SeaTable as database and the frontend is build completely with PHP and the slim framework.</p> <p>.</p>"},{"location":"introduction/basic_concepts/#data-model","title":"Data model","text":"<p>As a developer you typically interact with a single base. In SeaTable, a base can contain multiple tables, and each table contains multiple rows and columns. A row contains multiple fields.</p> <p>The logic is like this:</p> <pre><code>SeaTable Base\n\u251c\u2500 Table 1\n\u2502  \u2514\u2500 View A\n|     \u2514\u2500 Row 1\n|     \u2514\u2500 Row 2\n|     \u2514\u2500 Row 3\n\u2502  \u2514\u2500 View B\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 Row 4\n\u2514\u2500 Table 2\n|  \u2514\u2500 ...\n</code></pre> <p>SeaTable offers a visual interface, which can be operated with the browser.</p> <p></p> <p>Look at the SeaTable API Reference for more details about the different objects in SeaTable like:</p> <ul> <li>Table</li> <li>View</li> <li>Row &amp; column</li> <li>Link</li> </ul>"},{"location":"introduction/basic_concepts/#authentication","title":"Authentication","text":"<p>The actual authentication depends on the development approach one chooses.</p> ScriptsPluginsClient APIs <p>Javascript Scripts does not require any authentication at all because these scripts are executed in the browser of the user and the user has to be authenticated already.</p> <p>Plugin Scripts require an authentication to get data from the base, but the <code>context</code> objects contains everything for an easy authentication.</p> <p>Plugins interact with the data of one base. SeaTable provides all required functions for easy authentication.</p> <p>If you want to build your own application you always have to authenticate with a base token against the base.</p>"},{"location":"introduction/get_support/","title":"Get support","text":"<p>Next to this developer guide there are more documentations available. To learn more about the SeaTable API, the installation of your own server or the usage or SeaTable, please refer to their respective manuals:</p> <ul> <li>SeaTable User Manual</li> <li>SeaTable Admin Manual</li> <li>SeaTable API Reference</li> </ul> <p>See the official SeaTable channel on YouTube for tutorials, guides and overviews. Visit our blog for latest news and to learn more about what is going on in and around SeaTable.</p> <p>At any time you could have a look at the SeaTable Community Forum to share your experience with other users or report issues or bugs.</p> <p>Enterprise support</p> <p>If you're using SeaTable in your organization and need assistance, e.g., to digitalization of processes, develop custom solutions or improve efficiency, get in touch to discuss our enterprise support offerings.</p> <p>We're happy to help!</p>"},{"location":"introduction/requirements/","title":"Requirements","text":"<p>You've decided to venture into developing your own script, plugin, or custom application\u2014excellent choice! This guide is designed to cover all aspects of this journey. While some descriptions might seem obvious to seasoned professionals, this manual is crafted to assist novice developers who are just starting out.</p>"},{"location":"introduction/requirements/#development-system","title":"Development system","text":"<p>To begin your development journey with SeaTable, you'll need a SeaTable system. If you're planning to create short scripts, SeaTable Cloud could be a suitable option. However, for more in-depth development or when creating plugins, it's highly recommended to set up your own SeaTable Server. Refer to the Admin manual for installation instructions.</p>"},{"location":"introduction/requirements/#programming-skills","title":"Programming skills","text":"<p>Your development requirements will vary based on your intended project. Below is an outline of the skills you might need:</p> ScriptsPluginsClient API's <p>Scripts inside SeaTable can only be written with either Javascript or Python. Therefore you will only require one of these programming languages.</p> <p>The development of a custom plugin for your own SeaTable Server requires profound knowlegde of Javascript and react.</p> <p>Even if the <code>SeaTable plugin templates</code> offers some reusable components, you will need some experience with react to build the interface of your plugin.</p> <p>Due to the publicly available and well documented API documentation, you can theoretically interact with SeaTable using any programming language.</p>"},{"location":"introduction/requirements/#learn-the-fundamentals","title":"Learn the fundamentals","text":"<p>If you're relatively new to development, diving into general tutorials can lay a strong foundation for your SeaTable development journey.</p> <p>While numerous free online tutorials cover various programming languages, investing in a comprehensive online course or a well-structured book can be invaluable. While free resources are available, a structured course or book often offers a more cohesive and thorough learning experience.</p> <p>These paid resources, though requiring a small investment, often provide:</p> <ul> <li>Structured Learning: A step-by-step approach ensuring a coherent understanding.</li> <li>Comprehensive Content: In-depth coverage of essential concepts and practical applications.</li> <li>Consistency: Ensuring continuity and coherence in learning.</li> </ul> <p>Remember, while free tutorials are abundant, investing in a structured resource can significantly expedite your learning process and provide a solid understanding of programming fundamentals essential for SeaTable development.</p> <p>This are personal recommendations</p> <p>The following sources does not contain any affiliate links and we do not earn any money from these recommendations. These are just good sources that we have used ourselves in the past.</p> JavascriptPythonReact Free online course <p>A solid and free online course is available from codecademy.com. The course Learn JavaScript requires a registration but is free and teaches you in approx. 20 hours all necessary skills.</p> Best online course <p>The best online course on javascript comes from Mosh Hamedani. Mosh manages to explain all the important basics for programming with Javascript in his course The Ultimate JavaScript Series. Once you have completed this course, you should be able to write your first scripts with ease. A monthly subscription costs just $29.</p> Book for Beginners <p>If you prefer a book, then we can recommend JavaScript from Beginner to Professional. It gives you all the basics for your first steps with Javascript.</p> Free online course <p>An easy to follow beginner guide comes from Google. At https://developers.google.com/edu/python?hl=de you can find this well balanced course to learn how to do your first steps.</p> Best online course <p>The best online course on Python comes from Mosh Hamedani. Mosh manages to explain all the important basics for programming with Python in his course Complete Python Mastery. Once you have completed this course, you should be able to write your first scripts with ease. A monthly subscription costs just $29.</p> Book for Beginners <p>Our recommended book for beginners is called Learn Python in One Day and Learn It Well and as far as we can tell it keeps his promise. Most of our working students have read this book if they want to learn more about Python.</p> Free online course <p>This free online course comes to you from Scrimba. Scrimba is a coding bootcamp with mainly paid courses and a high amount of interactive screencasts. The react course Learn React is fortunately free of charge.</p> Best online course <p>The best online course on React comes from Mosh Hamedani. Mosh will guide and teach you React until and will build a complete Video Game Discovery App. The course is called React 18 for Beginners.</p>"},{"location":"plugins/","title":"SeaTable plugin development process","text":"<p>In this guide, we will demonstrate step by step how to write a plugin to SeaTable. This plugin can display the basic information of the base, including</p> <ul> <li>Number of tables</li> <li>Number of records</li> <li>Number of collaborators</li> </ul> <p>The code of the plugin development example is very simple. You can click this github link to get the source code.</p> <p>The plugin development process is as follows.</p>"},{"location":"plugins/#the-basic-process-of-plugin-development","title":"The basic process of plugin development","text":""},{"location":"plugins/#1-install-development-tool","title":"1. Install development tool","text":"<p>Using npm:</p> <pre><code>$ npm install -g create-dtable-plugin\n</code></pre>"},{"location":"plugins/#2-create-plugin","title":"2. Create plugin","text":"<pre><code>$ create-dtable-plugin init seatable-plugin-table-info\n</code></pre> <p>Install dependencies</p> <pre><code>$ cd seatable-plugin-table-info\n$ npm install\n</code></pre>"},{"location":"plugins/#3-modify-the-plugin-configuration","title":"3. Modify the plugin configuration","text":"<p>Modify the info.json configuration file in the plugin-config folder.</p> <pre><code>\"name\": '',                   // The name can only contain letters, numbers and underscores\n\"version\": '',                // Plugin version number\n\"display_name\": '',           // The name displayed by the plugin\n\"description\": '',            // Description of plugin\n</code></pre> <p>There is no need to add other configuration parameters, other parameters are automatically generated by the packaging tool.</p> <p>Optional operation</p> <ul> <li>Add a custom icon.png to the plugin-config folder as the icon of the plugin (it may not be provided, the default icon is used. The icon.png requires 128x128 pixels)</li> <li>Add a custom card_image.png to the plugin-config folder as the background image of the plugin icon (it may not be provided, the default background is displayed. The card_image.png requires 560x240 pixels)</li> </ul>"},{"location":"plugins/#4-modify-the-plugin-registration-function-in-the-entryjs-file","title":"4. Modify the plugin registration function in the entry.js file","text":"<p>Modify</p> <pre><code>window.app.registerPluginItemCallback(\"test\", TaskList.execute);\n</code></pre> <p>to</p> <pre><code>window.app.registerPluginItemCallback(name, TaskList.execute);\n</code></pre> <p>The name value here is the \"name\" value in plugin-config/info.json.</p>"},{"location":"plugins/#5-add-plugin-development-configuration-file","title":"5. Add plugin development configuration file","text":"<p>There is a file setting.local.dist.js in the project src folder, copy it and name it setting.local.js</p> <p>The content of the file is as follows, and you can modify it according to the comments</p> <pre><code>const config = {\n  APIToken: \"**\", // The apiToken of the dtable\n  server: \"**\", // The deployment URL of the dtable\n  workspaceID: \"**\", // The workspaceID of the dtable\n  dtableName: \"**\", // The name of the dtable to which the plugin\n  lang: \"**\", // Plugin default language type, 'en' or 'zh-cn'\n};\n</code></pre>"},{"location":"plugins/#6-start-development","title":"6. Start development","text":"<p>Run local development environment</p> <pre><code>$ npm start\n</code></pre> <p>Open localhost:3000 on the browser, you can see that the plugin dialog has been opened, and the interface function provided by the dtable-sdk library is displayed by default in the dialog</p> <ol> <li>getTables: obtained table information of the dtable base</li> <li>getRelatedUsers: get detailed information of dtable collaborators</li> </ol> <p>Main code and purpose</p> <ul> <li>/src/index.js: entry file for local development plugin</li> <li>/src/entry.js: follow the entry file when SeaTable is run as a plugin</li> <li>/src/app.js: the main code of the plugin</li> </ul>"},{"location":"plugins/#7-display-basic-information-of-the-table","title":"7. Display basic information of the table","text":"<p>Write a TableInfo component, this component needs to pass in two props, tables and collaborators</p> <pre><code>class TableInfo extends React.Component {}\n\nconst propTypes = {\n  tables: PropTypes.array.isRequired,\n  collaborators: PropTypes.array.isRequired,\n};\n\nTableInfo.propTypes = propTypes;\n\nexport default TableInfo;\n</code></pre> <p>Get the number of tables</p> <pre><code>getTablesNumber = (tables) =&gt; {\n  return tables &amp;&amp; Array.isArray(tables) ? tables.length : 0;\n};\n</code></pre> <p>Get the number of records</p> <pre><code>getRecords = (tables) =&gt; {\n  let recordsNumber = 0;\n  if (!tables) return recordsNumber;\n  for (let i = 0; i &lt; tables.length; i++) {\n    const table = tables[i];\n    const rows = table.rows;\n    if (rows &amp;&amp; Array.isArray(rows)) {\n      recordsNumber += rows.length;\n    }\n  }\n  return recordsNumber;\n};\n</code></pre> <p>Get the number of collaborators</p> <pre><code>renderCollaborators = (collaborators) =&gt; {\n  if (!collaborators || !Array.isArray(collaborators)) {\n    return null;\n  }\n  return collaborators.map((collaborator, index) =&gt; {\n    return (\n      &lt;div key={index} className=\"collaborator\"&gt;\n        &lt;span className=\"collaborator-avatar-container\"&gt;\n          &lt;img\n            className=\"collaborator-avatar\"\n            alt=\"\"\n            src={collaborator.avatar_url}\n          /&gt;\n        &lt;/span&gt;\n        &lt;span className=\"collaborator-name\"&gt;{collaborator.name}&lt;/span&gt;\n      &lt;/div&gt;\n    );\n  });\n};\n</code></pre> <p>Interface rendering: the number of tables, the number of records and the number of collaborators</p> <pre><code>render() {\n  const { tables, collaborators } = this.props;\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{'Number of tables: '}{this.getTablesNumber(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Total number of records: '}{this.getRecords(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Number of collaborators: '}{collaborators ? collaborators.length : 0}&lt;/div&gt;&lt;br/&gt;\n      &lt;div className=\"plugin-collaborators\"&gt;{this.renderCollaborators(collaborators)}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>In the parent component app.js, use the <code>TableInfo</code> component , modify the render function in app.js, and pass in tables and collaborators.</p> <pre><code>import TableInfo from './table-info';\n\nclass App extends React.Component{\n  let tables = this.dtable.getTables();\n  let collaborators = this.dtable.getRelatedUsers();\n  render() {\n    return (\n      &lt;Modal isOpen={showDialog} toggle={this.onPluginToggle} contentClassName=\"dtable-plugin plugin-container\" size='lg'&gt;\n        &lt;ModalHeader className=\"test-plugin-header\" toggle={this.onPluginToggle}&gt;{'Plugin'}&lt;/ModalHeader&gt;\n        &lt;ModalBody className=\"test-plugin-content\"&gt;\n          &lt;TableInfo tables={tables} collaborators={collaborators}/&gt;\n        &lt;/ModalBody&gt;\n      &lt;/Modal&gt;\n    );\n  }\n}\n</code></pre> <p>Add the css/table-info.css file and modify the style of the plugin.</p> <p>Run <code>npm start</code> again, you can see the following information on the browser localhost: 3000.</p> <pre><code>Number of tables: X\nTotal number of records: XXX\nNumber of collaborators: X\n</code></pre>"},{"location":"plugins/#8-package-upload-plugin","title":"8. Package upload plugin","text":"<ol> <li> <p>Execute <code>npm run build-plugin</code> to package the plugin, and the path of the packaged plugin is /plugin/task.zip</p> </li> <li> <p>Upload the plugin task.zip to dtable</p> </li> </ol>"},{"location":"plugins/environments/","title":"dtable","text":""},{"location":"plugins/environments/#init","title":"Init","text":"<p>The plugin development environment is divided into two types, the development environment and the production environment. Because of the different environments, the initialization methods are also different:</p> <ul> <li> <p>In the development environment, you need to provide the configuration file required by the plugin, which is used to initialize the plugin and obtain the data required by the plugin.</p> </li> <li> <p>In the production environment, you need to install the plugin, then the plugin can directly read the data of the base in the current browser to initialize the plugin.</p> </li> </ul>"},{"location":"plugins/environments/#initialize-the-plugin","title":"Initialize the plugin","text":""},{"location":"plugins/environments/#development-environment","title":"Development environment","text":"<p>Initialize the plugin in the development environment</p> <pre><code>import DTable from \"dtable-sdk\";\n\nconst dtable = new DTable();\nconst settings = {\n  server: \"https://cloud.seatable.cn\",\n  APIToken: \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n};\nawait dtable.init(config);\n</code></pre>"},{"location":"plugins/environments/#production-environment","title":"Production environment","text":"<p>Initialize the plugin in the production environment</p> <pre><code>import DTable from \"dtable-sdk\";\n\nconst dtable = new Dtable();\nconst dtableStore = window.app.dtableStore; // Get initialization data from the production environment\nawait dtable.initBrowser(dtableStore);\n</code></pre>"},{"location":"plugins/environments/#monitoring-event-changes","title":"Monitoring event changes","text":""},{"location":"plugins/environments/#subscribe-events","title":"Subscribe events","text":"Event type description use dtable-connect Indicates that a link has been established with the server, and the data loading is complete Update state and UI display local-dtable-changed Indicates that some operations have been performed locally, and the data has changed Update state and UI display remote-dtable-changed Indicates that some operations sent by the server have been performed locally, and the data has changed Update state and UI display <pre><code>import DTable from 'dtable-sdk';\n\nconst dtable = new Dtable();\ndtable.subscribe('dtable-connect', () =&gt; {...});\ndtable.subscribe('local-dtable-changed', () =&gt; {...});\ndtable.subscribe('remote-dtable-changed', () =&gt; {...});\n</code></pre>"},{"location":"plugins/environments/#example","title":"Example","text":"<p>This is an initialization example in the development environment.</p> <p>Since two environments need to be compatible, the initialization operations for general plugin development are as follows:</p> <pre><code>import Dtable from 'dtable-sdk';\nimport PropTypes from 'prop-types';\n\nconst propsTypes = {\n  isDevelopment: PropTypes.bool\n};\n\nconst settings = {\n  \"server\": \"https://cloud.seatable.cn\",\n  \"APIToken\": \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n    this.dtable = new Dtable();\n  }\n\n  async componentDidMount() {\n    const { isDevelopment } = this.props;\n    if (isDevelopment) {\n      await dtable.init(settings);\n      await this.dtable.syncWithServer();\n      this.dtable.subscribe('dtable-connect', this.resetData);\n    } else {\n      const dtableStore = window.app.dtableStore;\n      dtable.initBrowser(dtableStore);\n    }\n\n    this.dtable.subscribe('local-dtable-changed', this.resetData);\n    this.dtable.subscribe('remote-dtable-changed', this.resetData);\n  }\n\n  resetData = () =&gt; {\n    // ...\n    this.setState({isLoading: false});\n  }\n\n  render() {\n    return (\n      ...\n    );\n  }\n\n}\n</code></pre>"},{"location":"plugins/methods/","title":"Methods","text":"<p>This is a list of all available objects and methods in SeaTable you can use in the plugin development.</p> <p>For a more detailed description of the used parameters, refer to the data model at the SeaTable API Reference.</p>"},{"location":"plugins/methods/#common","title":"Common","text":"<p>Base represents a table in SeaTable. The <code>base</code> object provide a way to read, manipulate and output data in/from your base. The following methods are available.</p>"},{"location":"plugins/methods/#users","title":"Users","text":"getRelatedUsers <p>Get other users associated with the current base (collaborators of the table, the shared person of the table, etc.)</p> <pre><code>dtable.getRelatedUsers()\n</code></pre> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\n</code></pre> getCollaboratorsName <p>Get a list of names of collaborators</p> <p><pre><code>dtable.getCollaboratorsName(collaborators, value)\n</code></pre> Arguments</p> <ul> <li>collaborators: collaborator list in this base</li> <li>value: email list of collaborators</li> </ul> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\nconst value = ['abc@seafile.com', 'shun@seafile.com'];\nconst name = dtable.getCollaboratorsName(collaborators, value); // 'abc, shun'\n</code></pre>"},{"location":"plugins/methods/#views","title":"Views","text":"getViewRowsColor <p>Get the color attributes of the row data in the view</p> <pre><code>dtable.getViewRowsColor(rows, view, table)\n</code></pre> <p>Arguments</p> <ul> <li>rows: the rows of the color attribute</li> <li>view: view object</li> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\nconst rowsColor = dtable.getViewRowsColor(rows, view, table);\n</code></pre>"},{"location":"plugins/methods/#output","title":"Output","text":"getTableFormulaResults <p>Get the data in the calculation formula column of the table</p> <pre><code>dtable.getTableFormulaResults(table, rows)\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rows: row data of the relevant data of the calculation formula column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\nconst formulaResult = dtable.getTableFormulaResults(table, rows);\n</code></pre> getLinkCellValue <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getLinkDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getLinkDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getNumberDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getGeolocationDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getDurationDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getDateDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"plugins/methods/#tables","title":"Tables","text":"addTable <p>Get a list of names of collaborators</p> <p>Example</p> deleteTable <p>Get a list of names of collaborators</p> <p>Example</p> renameTable <p>Get a list of names of collaborators</p> <p>Example</p> getTables <p>Get a list of names of collaborators</p> <p>Example</p> getActiveTable <p>Get a list of names of collaborators</p> <p>Example</p> getTableByName <p>Get a list of names of collaborators</p> <p>Example</p> getTableById <p>Get a list of names of collaborators</p> <p>Example</p> importDataIntoNewTable <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#views_1","title":"Views","text":"addView <p>Get a list of names of collaborators</p> <p>Example</p> deleteView <p>Get a list of names of collaborators</p> <p>Example</p> renameView <p>Get a list of names of collaborators</p> <p>Example</p> getViews <p>Get a list of names of collaborators</p> <p>Example</p> getNonArchiveViews <p>Get a list of names of collaborators</p> <p>Example</p> getActiveView <p>Get a list of names of collaborators</p> <p>Example</p> getViewByName <p>Get a list of names of collaborators</p> <p>Example</p> getViewById <p>Get a list of names of collaborators</p> <p>Example</p> isDefaultView <p>Get a list of names of collaborators</p> <p>Example</p> isGroupView <p>Get a list of names of collaborators</p> <p>Example</p> isFilterView <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#columns","title":"Columns","text":"getColumns <p>Get a list of names of collaborators</p> <p>Example</p> getShownColumns <p>Get a list of names of collaborators</p> <p>Example</p> getColumnsByType <p>Get a list of names of collaborators</p> <p>Example</p> getColumnByName <p>Get a list of names of collaborators</p> <p>Example</p> getColumnByKey <p>Get a list of names of collaborators</p> <p>Example</p> modifyColumnData <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#rows","title":"Rows","text":"sqlQuery <p>Use sql statement to query a dtable</p> <pre><code>dtable.sqlQuery(sql)\n</code></pre> <p>Arguments</p> <ul> <li>sql: SQL statement to be executed</li> </ul> <p>Note: By default, up to 100 results are returned. If you need more results, please add the limit parameter in the sql statement</p> <p>Possible errors include</p> <ul> <li>ValueError: sql can not be empty</li> <li>ConnectionError: network error</li> <li>Exception: no such table</li> <li>Exception: no such column</li> <li>Exception: columns in group by should match columns in select</li> </ul> <p>Example</p> <pre><code>dtable.sqlQuery('select name, price, year from Bill')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>WHERE</p> <pre><code>dtable.sqlQuery('select name, price from Bill where year = 2021 ')\n</code></pre> <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre> <p>ORDER BY</p> <pre><code>dtable.sqlQuery('select name, price, year from Bill order by year')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>GROUP BY</p> <pre><code>dtable.sqlQuery('select name, sum(price) from Bill group by name')\n</code></pre> <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre> <p>DISTINCT</p> <pre><code>dtable.sqlQuery('select distinct name from Bill')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre> appendRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> deleteRowById <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> deleteRowsByIds <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> modifyRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> forEachRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getTableLinkRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getViewRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getGroupRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getInsertedRowInitData <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getRowsByID <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getRowById <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> moveGroupRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"plugins/methods/#plugins","title":"Plugins","text":"getPluginSettings <p>Get a list of names of collaborators</p> <p>Example</p> updatePluginSettings <p>Get a list of names of collaborators</p> <p>Example</p> deletePluginSettings <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#constants","title":"Constants","text":"ColumnTypes <p>Get a list of names of collaborators</p> <p>Example</p> Column icon configs <p>Get a list of names of collaborators</p> <p>Example</p> Column options <p>Get a list of names of collaborators</p> <p>Example</p> Formula result type <p>Get a list of names of collaborators</p> <p>Example</p> Select option colors <p>Get a list of names of collaborators</p> <p>Example</p> Table permission type <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"scripts/","title":"Scripting in SeaTable","text":""},{"location":"scripts/#supported-scripting-languages-and-requirements","title":"Supported scripting languages and requirements","text":"<p>Scripts are used to interact with the data in a base. SeaTable supports scripts written in Python and JavaScript (JS).</p> <p>JS code is executed directly in the user's browser, requires no authentication, and is used for simple data operations.</p> <p>Python scripts, by contrast, are executed on a server or locally. As a consequence, Python scripts must authenticate against SeaTable Server. They are also suitable for more complex data processing scenarios.</p> <p>JS and Python scripts can be composed and executed directly in a SeaTable base.  </p> <p>The execution of JS scripts in SeaTable has no requirements. </p> <p>To run Python scripts in SeaTable, the so-called Python Pipeline must be installed. You can also choose to run scripts locally. Local execution is convenient for development and debugging purposes. Scripts can also be easily integrated into larger projects.</p>"},{"location":"scripts/#how-to-start","title":"How to start?","text":"<p>Each chapter provides you with explanations about the available objects and methods. Multiple examples should help you to start immediately and get a feeling about the possibilities.</p> <p>Here are some additional help articles from the user manual explaining how to create, execute and monitor a script in SeaTable:</p> <ul> <li>Creating and deleting a script</li> <li>Run script manually, by button or by automation</li> <li>The execution log of scripts</li> </ul>"},{"location":"scripts/javascript/basic_structure_js/","title":"Basic structure","text":"<p>The JavaScript script runs directly in the current browser and is suitable for simple data processing. JavaScript does not require any authentication.</p> <p>Two JavaScript APIs in SeaTable</p> <p>SeaTable offers two different ways to use JavaScript with SeaTable. You can executing a JS-Script directly in SeaTable and there is a JavaScript Client API. The functions are similar but not identical. If you want to use a JavaScript in SeaTable, stay at this section, otherwise switch to the Client APIs.</p>"},{"location":"scripts/javascript/basic_structure_js/#interact-with-your-base","title":"Interact with your base","text":"<p>JavaScript provide pre-defined objects, corresponding methods of this objects and utilities. On top, normal JavaScript operations like <code>console.log</code> or calculations are working as usual.</p> <ul> <li>base</li> <li>output</li> <li>context</li> <li>base utilities</li> </ul>"},{"location":"scripts/javascript/basic_structure_js/#lets-beginn","title":"Let's beginn","text":"<p>Let's make this concrete and let us look at some basic examples.</p> <ol> <li>Jump to your seatable webinterface</li> <li>Create a new Script of the type <code>Javascript</code></li> <li>Copy the following code</li> <li>Run the script</li> </ol> <p>You will learn from these examples, that it is quite easy to read, output and even manipulate the data of a base inside SeaTable with the predefined objects and the corresponding methods.</p> Get number of tablesGet column namesGet row contentWrite new rowUpdate one specific cell <pre><code>const tables = base.getTables(); // (1)!\noutput.text(tables.length); // (2)!\n</code></pre> <ol> <li> <ol> <li><code>base</code> is the predefined-object provided by SeaTable containing all bases of a base.</li> <li><code>getTables()</code> is the function to get all bases from the object <code>base</code>.</li> </ol> </li> <li> <ol> <li><code>output</code> is also a predefined-object provided by SeaTable.</li> <li><code>length</code> is just a normal operation in JavaScript.</li> </ol> </li> </ol> <p>As you can see, the script will output the number of tables in your base. Read the comments behind the two lines to get more information about the difference between a predefined object, a method of this object and an ordinary JavaScript function.</p> <pre><code>const table = base.getTableByName('Table1');\nconst columns = base.getColumns(table);\n\nfor (var i=0; i&lt;columns.length; i++) {\n    output.text(columns[i].name + \" (\" + columns[i].type + \")\")\n}\n</code></pre> <p>This will return all column names and the column types.</p> <pre><code>const table = base.getTableByName('Table1'); // (1)!\nconst view = base.getViewByName(table, 'Default View'); // (2)!\nconst rows = base.getRows(table, view); // (3)!\n\nfor (var i=0; i&lt;rows.length; i++) { // (4)!\n    const row = rows[i];\n    output.text('&gt;&gt;&gt; new row &lt;&lt;&lt;')\n    output.text(row);\n    output.text(row['Name']);\n}\n</code></pre> <ol> <li>get the content of the table <code>Table1</code>.</li> <li>get the content of the view <code>Default View</code>.</li> <li>get the row of this view <code>Default View</code> in this table <code>Table1</code>.</li> <li>iterate over all rows and print them</li> </ol> <p>This time, we will get the <code>Name</code> of all columns in the table <code>Table1</code> and the view <code>Default View</code>.</p> <pre><code>const table = base.getTableByName('Table1'); // (1)!\n\nconst newRow = { // (2)!\n    'Name': 'Hugo',\n    'Age': 3,\n};\n\ntry {\n    const row = base.addRow(table, newRow);\n    output.text(`New row added with _id: ${row._id}`);\n} catch (error) {\n    output.text(`Error adding row: ${error}`);\n}\n</code></pre> <ol> <li>Replace <code>Table1</code> with your actual table name</li> <li>Update column names <code>Name</code> and <code>Age</code> and the values you would like to add.</li> </ol> <pre><code>// Get the table\nconst table = base.getTableByName('Table1');\n\n// Specify the row_id you want to update\nconst rowId = 'KDW9PZMkTOuwtx71pmAMxA';\n\n// Define the updates you want to make\n// Replace 'Name' with the actual column name you want to update\n// and 'NewValue' with the new value you want to set\nconst updates = {\n    'Name': 'NewValue'\n};\n\nbase.updateRow(table, rowId, updates);\n</code></pre>"},{"location":"scripts/javascript/common_questions/","title":"Common questions (JavaScript)","text":"How to output a variable? <p>To output the content of a variable you should use quotation mark instead of single or double quotes.</p> <pre><code># correct way to output the variable\n`name_of_variable`\n\n# will not work\n\"name_of_variable\"\n</code></pre>"},{"location":"scripts/javascript/examples/","title":"Examples","text":"<p>Currenty this documentation contains three examples for easy to follow script with Javascript. You can just copy&amp;paste them in any base in SeaTable any run them.</p>"},{"location":"scripts/javascript/examples/#add-rows","title":"Add rows","text":"<p>short explanation will follow soon.</p>"},{"location":"scripts/javascript/examples/#get-incremental","title":"Get Incremental","text":"<p>short explanation will follow soon.</p>"},{"location":"scripts/javascript/examples/#statistics","title":"Statistics","text":"<p>short explanation will follow soon.</p>"},{"location":"scripts/javascript/examples/auto-add-rows/","title":"Example: Automatically calculate...","text":"<pre><code>// Automatically record monthly repetitive items in a ledger\n\nconst table = base.getTableByName('Daily expenses');\n\n// get date objects on the 10th and 20th of the current month\nvar date = new Date();\nvar date10 = new Date(date.setDate(10));\nvar date20 = new Date(date.setDate(20));\n\n// create two new expense items\nvar feeAWS = {'Name': 'Amazon cloud service', \n              'Date': base.utils.formatDate(date10),\n              'Type': 'Cloud service'\n             };\nvar feeClean = {'Name': 'Clean', \n                'Date': base.utils.formatDate(date20),\n                'Type': 'Daily office',\n                'Fee': 260\n               };\n\n// auto add data               \nbase.addRow(table, feeAWS);\nbase.addRow(table, feeClean);\n</code></pre>"},{"location":"scripts/javascript/examples/get-incremental/","title":"Get incrementals","text":"<pre><code>const tableName = 'A table';\nconst viewName = 'Default view';\n\n// name of the column that records total number at a specific time\nconst columnName = 'Total number';\n\n// name of the column that need to calculate incremental value\nconst incrementalColumnName = 'Incremental number';\n\n// get table\nconst table = base.getTableByName(tableName);\n// get view \nconst view = base.getViewByName(table, viewName);\n\n// if current view is a grouped view\nif (view.groupbys &amp;&amp; view.groupbys.length &gt; 0) {\n  // get group view rows\n  const groupViewRows = base.getGroupedRows(table, view);\n\n  groupViewRows.map((group) =&gt; {\n    group.rows.map((row, index, rows) =&gt; {\n        // get current row value\n        const currentNumber = row[columnName];\n        if (!currentNumber) return;\n        // calculate increment\n        const previousRow = rows[index - 1];\n        // if there is no previousRow, set increaseCount to 0\n        const previousNumber = previousRow ? previousRow[columnName] : currentNumber;\n        const increaseCount = currentNumber - previousNumber;\n        // set calculated increment to row\n        base.modifyRow(table, row, {[incrementalColumnName]: increaseCount});\n    });\n  });\n} else {\n    // get current view rows\n    const rows = base.getRows(table, view);\n    rows.map((row, rowIndex, rows) =&gt; {\n    // calculate increment\n    const currentNumber = row[columnName];\n    if (!currentNumber) return;\n    const previousRow = rows[rowIndex - 1];\n    // if there is no previousRow, set increaseCount to 0\n    const previousNumber = previousRow ? previousRow[columnName] : currentNumber;\n    const increaseCount = currentNumber - previousNumber;\n    // set calculated increment to row\n    base.modifyRow(table, row, {[incrementalColumnName]: increaseCount});\n  });\n}\n</code></pre>"},{"location":"scripts/javascript/examples/statistics-attendance/","title":"staticstics","text":"<pre><code>const originTableName = 'Attendance table';\nconst originViewName = 'Default view';\nconst originNameColumnName = 'Name';\nconst originDepartmentColumnName = 'Department';\nconst originDateColumnName = 'Date';\nconst originTimeColumnName = 'Attendance time';\n\nconst targetTableName = 'Statistics attendance';\nconst targetNameColumnName = 'Name';\nconst targetDepartmentColumnName = 'Department';\nconst targetDateColumnName = 'Date';\nconst targetStartTimeColumnName = 'Clock-In';\nconst targetEndTimeColumnName = 'Clock-Out';\nconst targetTable = base.getTableByName(targetTableName);\n\nconst table = base.getTableByName(originTableName);\nconst view = base.getViewByName(table, originViewName);\nconst rows = base.getRows(table, view);\n\n// sort the rows in the table according to the date column;\nrows.sort((row1, row2) =&gt; {\n    if (row1[originDateColumnName] &lt; row2[originDateColumnName]) {\n      return -1;\n    } else if (row1[originDateColumnName] &gt; row2[originDateColumnName]) {\n      return 1; \n    } else {\n      return 0;\n    }\n});\n\n/*\n group all rows via date and save them to groupedRows, the format\n of the object is {'2020-09-01': [row, ...], '2020-09-02': [row, ...]}\n*/\nconst groupedRows = {};\nrows.forEach((row) =&gt; {\n  const date = row[originDateColumnName]; \n  if (!groupedRows[date]) {\n    groupedRows[date] = [];\n  }\n  groupedRows[date].push(row);\n});\n\nconst dateKeys = Object.keys(groupedRows);\n\n// traverse all the groups in groupedRows\ndateKeys.forEach((dateKey) =&gt; { \n  // get all attendance data of all members on the current date\n  const dateRows = groupedRows[dateKey];\n  const staffDateStatItem = {};\n  // traverse these rows of data and group by the name of the employee, get the clock-in and clock-out time of each employee that day, and save it to staffDateStatItem\n  // the format is { a1: {Name: 'a1', Date: '2020-09-01', Clock-In: '08:00', Clock-Out: '18:00'},... }\n  dateRows.forEach((row)=&gt; {\n    const name = row[originNameColumnName];\n    if (!staffDateStatItem[name]) {\n      // Generate a new row based on the original row data, and add Clock-In and Clock-Out columns in the newly generated row\n      staffDateStatItem[name] = { [targetNameColumnName]: name, [targetDateColumnName]: row[originDateColumnName], [targetDepartmentColumnName]: row[originDepartmentColumnName], [targetEndTimeColumnName]: row[originTimeColumnName], [targetStartTimeColumnName]: row[originTimeColumnName]};\n    } else {\n      // when the column name of the row is repeated, compare the time, choose the largest one as the Clock-Out time, and the smallest one as the Clock-In time\n      const time = row[originTimeColumnName];\n      const staffItem = staffDateStatItem[name];\n      if (compareTime(staffItem[targetStartTimeColumnName], time)) {\n        staffItem[targetStartTimeColumnName] = time;\n      } else if (compareTime(time, staffItem[targetEndTimeColumnName])) {\n        staffItem[targetEndTimeColumnName] = time;\n      } \n    }\n  });\n\n  // write the attendance data of all employees on the current date into the table\n  Object.keys(staffDateStatItem).forEach((name) =&gt; {\n    base.addRow(targetTable, staffDateStatItem[name]);\n  });  \n});\n\n// compare the size of two string format time\nfunction compareTime(time1, time2) {\n  const t1 = time1.split(':');\n  const t2 = time2.split(':');\n  if (parseInt(t1[0]) &gt; parseInt(t2[0])) {\n    return true;\n  } else if (parseInt(t1[0]) &lt; parseInt(t2[0])) {\n    return false; \n  } else if (parseInt(t1[0]) == parseInt(t2[0])) {\n    if (parseInt(t1[1]) &gt; parseInt(t2[1])) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n</code></pre>"},{"location":"scripts/javascript/objects/","title":"Predefined objects in SeaTable (Javascript)","text":"<p>JavaScript in SeaTable relies on the JavaScript library <code>seatable-api-js</code> which can be found on GitHub.</p> <p>This manual list all available objects and methods that are availabe within Javascript scripts in SeaTable.</p> <p>Need specific function?</p> <p>The JavaScript class does not yet cover all available functions of the SeaTable API. If you are missing a special function, please contact us at support@seatable.io and we will try to add the missing functions.</p> <p>For a more detailed description of the used parameters, refer to the data model at the SeaTable API Reference.</p>"},{"location":"scripts/javascript/objects/#base-object","title":"Base object","text":"<p>Base object provide a way to read, manipulate and output data in/from your base. The following methods are available.</p>"},{"location":"scripts/javascript/objects/columns/","title":"Columns","text":""},{"location":"scripts/javascript/objects/columns/#get-columns","title":"Get Columns","text":"<p>getColumns</p> <p>Get all the columns in the table, and return all the column objects in an array.</p> <pre><code>base.getColumns(table: Object/String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumns(table);\n\ncolumn.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre></p> <pre><code>const columns = base.getColumns('Table1');\n</code></pre> <p>listColumns</p> <pre><code>Get the columns by name of table and view, if view_name is not set, all columns in table will be returned\n\n``` js\nbase.listColumns(table_name: String, view_name: String);\n```\n\n__Examples__\n``` js\nconst table_name  = 'Table1'\nconst view_name = 'Default'\nconst columns = base.listColumns(table_name, view_name);\n\ncolumn.forEach((column) =&gt; {\n    output.text(column.name);\n})\n```\n\n``` js\nconst columns = base.listColumns('Table1');\n```\n</code></pre> <p>getShownColumns</p> <p>Get all the displayed columns in a view, excluding the hidden columns in the view, and return an array.</p> <pre><code>base.getShownColumns(table: Object/String, view: Object/String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'view 1');\nconst columns = base.getShownColumns(table, view);\ncolumn.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre></p> <pre><code>const columns = base.getShownColumns('Table1', 'view 1');\n</code></pre> <p>getColumnByName</p> <p>Get the column object via its name.</p> <pre><code>base.getColumnByName(table: Object/String, name: String);\n</code></pre> <p>Examples <pre><code>const column = base.getColumnByName(table, 'Column name');\noutput.text(column.name);\n</code></pre></p> <pre><code>const column = base.getColumnByName('Table1', 'Column name');\n</code></pre> <p>getColumnsByType</p> <p>Get all specific types of columns in the table.</p> <pre><code>const columns = base.getColumnsByType(table: Object/String, type: String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumnsByType(table, 'text');\noutput.text(column.length);\n</code></pre></p> <pre><code>const columns = base.getColumnsByType('Table1', 'text');\noutput.text(column.length);\n</code></pre>"},{"location":"scripts/javascript/objects/context/","title":"Context","text":"<p>When the script runs, the context object provides the context. The usage is as follows.</p> <p>currentTable</p> <p>Returns the name of the currently selected table.</p> <pre><code>base.context.currentTable\n</code></pre> <p>Example</p> <pre><code>const name = base.context.currentTable\noutput.text(`The name of the current table is: ${name}`)\n</code></pre> <p>currentRow</p> <p>Returns the currently selected row and returns the complete row object including <code>_id</code>, <code>_mtime</code>, <code>_ctime</code>. If no row is selected, this function returns <code>undefined</code>.</p> <pre><code>base.context.currentRow\n</code></pre> <p>Example</p> <pre><code>const row = base.context.currentRow\noutput.text(row)\n</code></pre>"},{"location":"scripts/javascript/objects/links/","title":"Links","text":""},{"location":"scripts/javascript/objects/links/#get-links","title":"Get Links","text":"<p>getLinkedRecords</p> <p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.getLinkedRecords(table_id, link_column_key, rows)\n</code></pre> <ul> <li>table_id: the id of link table</li> <li>link_column_key: the column key of the link column of link table ( not link_id )</li> <li>rows: a list, each item of the which contains a row info including row_id, offset (defualt by 0) and limit (default by 10) of link table</li> </ul> <p>Example</p> <pre><code>base.getLinkedRecords('0000', '89o4', [\n{'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n{'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\n\n// a key-value data structure returned as below\n// key: row_id of link table\n// value: a list which includes the row info of linked table\n{\n'FzNqJxVUT8KrRjewBkPp8Q': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n],\n'Jmnrkn6TQdyRg1KmOM4zZg': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n]\n}\n</code></pre>"},{"location":"scripts/javascript/objects/links/#get-link-id","title":"Get Link ID","text":"<p>getColumnLinkId</p> <p>Get the link id by column name.</p> <pre><code>base.getColumnLinkId(tableName, columnName)\n</code></pre> <p>Example</p> <pre><code>base.getColumnLinkId('Table1', 'Record')\n</code></pre>"},{"location":"scripts/javascript/objects/links/#add-links","title":"Add Links","text":"<p>addLink</p> <p>Add link, link other table records. Get more information about linking columns from the SeaTable API Reference.</p> <pre><code>base.addLink(linkId, tableName, linkedTableName, rowId, linkedRowId)\n</code></pre> <p>Example</p> <pre><code>base.addLink('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"scripts/javascript/objects/links/#remove-links","title":"Remove Links","text":"<p>removeLink</p> <p>Delete the link row.</p> <pre><code>base.removeLink(linkId, tableName, linkedTableName, rowId, linkedRowId)\n</code></pre> <p>Example</p> <pre><code>base.removeLink('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"scripts/javascript/objects/links/#update-links","title":"Update Links","text":"<p>updateLinks</p> <p>Remove all existing row links and add new links.</p> <pre><code>base.updateLinks(linkId, tableName, linkedTableName, rowId, updatedlinkedRowIds)\n</code></pre> <p>Example</p> <pre><code>const rows = base.getRows('contact', 'Default_view');\n// Update row links to [rows[0]._id, rows[1]._id, rows[2]._id, rows[3]._id]\nbase.updateLinks('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', [rows[0]._id, rows[1]._id, rows[2]._id, rows[3]._id])\n</code></pre> <p>batchUpdateLinks</p> <p>Batch update infos of link-type columns</p> <pre><code>base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"scripts/javascript/objects/output/","title":"Output","text":"<p>Output object supports output strings in text or Markdown format.</p> <p>text</p> <p>Prints the content of the passed variable as normal text. Code Syntax is ignored and just printed.</p> <pre><code>output.text(anything: String/Object/Array)\n</code></pre> <p>Example</p> <pre><code>const table = base.getActiveTable();\noutput.text(table.name);\n</code></pre> <p>markdown</p> <p>Prints the content of the passed variable. Markdown formating is used to style the output.</p> <pre><code>output.markdown(anything: String/Object/Array)\n</code></pre> <p>Example</p> <pre><code>const table = base.getActiveTable();\noutput.markdown(`# This is a headline and prints the name of the table: ${table.name}`);\n</code></pre>"},{"location":"scripts/javascript/objects/rows/","title":"Rows","text":"<p>Interact with the rows of a SeaTable base.</p>"},{"location":"scripts/javascript/objects/rows/#get-rows","title":"Get rows","text":"<p>getRows</p> <p>Get all the rows of the view and return an array.</p> <pre><code>base.getRows(table: Object/String, view: Object/String);\n</code></pre> <p>Examples</p> <pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'view1');\nconst rows = base.getRows(table, view);\n</code></pre> <pre><code>const rows = base.getRows('Table1', 'view1');\n</code></pre> <p>query</p> <p>Use sql to query a base. SQL-Query is the most powerful function to the data from a base. Most SQL-syntax is support.</p> <pre><code>await base.query(sql)\n</code></pre> <p>Example: Get everything with a wildcard</p> <pre><code>const data = await base.query('select * from Bill')\noutput.text(data) // (1)!\n</code></pre> <ol> <li>Returns for example the following:     <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2021\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2019\"},\n    {\"name\":\"Tom\",\"price\":\"100\",\"year\":\"2019\"},\n    {\"name\":\"Tom\",\"price\":\"100\",\"year\":\"2020\"},\n    {\"name\":\"Tom\",\"price\":\"200\",\"year\":\"2021\"},\n    {\"name\":\"Jane\",\"price\":\"200\",\"year\":\"2020\"},\n    {\"name\":\"Jane\",\"price\":\"200\",\"year\":\"2021\"}\n]\n</code></pre></li> </ol> <p>Example: WHERE</p> <pre><code>const data = await base.query('select name, price from Bill where year = 2021')\noutput.text(data) // (1)!\n\nconst data = await base.query('select name, price from Bill where name = \"Bob\"')\noutput.text(data) // (2)!\n</code></pre> <ol> <li>Returns for example the following:     <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\"},\n    {\"name\":\"Tom\",\"price\":\"200\"},\n    {\"name\":\"Jane\",\"price\":\"200\"}\n]\n</code></pre></li> <li>Returns for example the following:     <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2021\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2019\"}\n]\n</code></pre></li> </ol> <p>Example: GROUP BY</p> <pre><code>const data = await base.query('select name, sum(price) from Bill group by name')\noutput.text(data) // (1)!\n</code></pre> <ol> <li>Returns for example the following:     <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre></li> </ol> <p>Example: DISTINCT</p> <pre><code>const data = await base.query('select distinct name from Bill')\noutput.text(data) // (1)!\n</code></pre> <ol> <li>Returns for example the following:     <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre></li> </ol> <p>getGroupedRows</p> <p>Get rows in the grouped view.</p> <pre><code>base.getGroupedRows(table: Object/String, view: Object/String);\n</code></pre> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'GroupedView');\nconst groupViewRows = base.getGroupedRows(table, view);\n</code></pre> <pre><code>const groupViewRows = base.getGroupedRows('Table1', 'GroupedView');\n</code></pre> <p>getRow / getRowById (deprecated)</p> <p>Get a <code>row</code> via its <code>id</code> and return a row object.</p> <pre><code>base.getRow(table: Object/String, rowId: String);\n</code></pre> <p>Examples</p> <pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRow(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre> <pre><code>const row = base.getRow('Table1', \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#delete-row","title":"Delete row","text":"<p>deleteRow / deleteRowById (deprecated)</p> <p>Delete a <code>row</code> in a table by its <code>id</code>.</p> <pre><code>base.deleteRow(table: Object/String, rowId: String);\n</code></pre> <p>Examples</p> <pre><code>const table = base.getTableByName('Table1');\nbase.deleteRow(table, 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre> <pre><code>base.deleteRow('Table1', 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#add-row","title":"Add row","text":"<p>appendRow / addRow(deprecated)</p> <p>Add a row to a table.</p> <pre><code>base.appendRow(table: Object/String, rowData: Object, viewName?: String)\n</code></pre> <p>Examples</p> <pre><code>const table = base.getTableByName('Table1');\nbase.appendRow(table, {'Name': 'Alex', 'Age': '18'});\nbase.appendRow(table, {'Name': 'Alex', 'Age': '18'}, 'Default View');\n</code></pre> <pre><code>base.addRow('Table1', {'Name': 'Alex', 'Age': '18'});\nbase.addRow('Table1', {'Name': 'Alex', 'Age': '18'}, 'Default View');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#update-rows","title":"Update row(s)","text":"<p>updateRow / modifyRow(deprecated)</p> <p>Modify a row in the table.</p> <pre><code>base.updateRow(table: Object/String, row: Object/string, updateRowData: Object);\n</code></pre> <p>Examples</p> <pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRowById(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\nbase.updateRow(table, row, {'Name': 'new name', 'number': 100});\n</code></pre> <pre><code>base.updateRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw', {'Name': 'new name', 'number': 100})\n</code></pre> <p>modifyRows</p> <p>Modify multiple rows in the table at once.</p> <pre><code>base.modifyRow(table: Object/String, rows: Array, updatedRows: Array);\n</code></pre> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst rows = base.getRows('Table1', 'Default view');\nconst selectedColumnName = 'Name';\nconst selectedRows = [], updatedRows = [];\n\nrows.forEach((row) =&gt; {\nif (row[columnName] === 'name') {\n    selectedRows.push(row);\n    updatedRows.push({columnName: 'name1'});\n}\n});\nbase.modifyRow(table, selectedRows, updatedRows);\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#filter","title":"Filter","text":"<p><code>base.filter</code> allows to pass a conditional statement. It filters the rows that meet the conditions in the table, and returns a querySet object.</p> <p>filter</p> <pre><code>base.filter(tableName, viewName, filterExpression)\n</code></pre> <p>Example</p> <pre><code>// Filter out rows whose number column is equal to 5, and return a querySet object\nconst querySet = base.filter('Table1', 'Default', 'number = 5');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#filter-expressions","title":"Filter Expressions","text":"<p>filter expressions</p> <p>The table query will become simpler and more efficiency by using the sql-like statements as a paramter in <code>base.filter()</code> function. In different column types, there are a little differences in the query method and the format of input statement. These are the available query methods:</p> <ul> <li>greater-less query:  &gt;\uff0c &gt;\uff0c =\uff0c \\&lt;\uff0c \\&lt;=</li> <li>equal-unequal query:  =,  \\&lt;&gt;</li> <li>computation: +, -, *, /, ^, %</li> </ul> <p>Here is an example based on the code <code>queryset = base.filter(\"Table1\", \"age&gt;18\")</code></p> <ul> <li>age: column name</li> <li>&gt;: operator</li> <li>18: parameter</li> </ul> Data structure Column type Format of greater-less query Format of equal-unequal query computation String Text, Long Text, URL,Email, Single Select Unsupported String Unsupported List Multiple Select Unsupported String Unsupported Number Number int, float int, float, and empty string \"\" Supported Date Date, Created time,  Last modified time Patterns: YYYY-MM-DD, YYYY-MM-DD hh:mm, YYYY-MM-DD hh:mm:ss Same patterns as greater-less query Unsupported Boolean Checkbox Unsupported true, false and empty string \"\", (case-insensitive) Unsupported <p>Here are more examples of the different filter expressions pending of the column type.</p> <p>String-based Column</p> <p>Column types include Text, Long Text, URL, Email, Checkbox.</p> <pre><code># 1. equal-unequal query\nbase.filter('Table1', 'view_name', \"column_name=hello world\")\nbase.filter('Table1', 'view_name', \"column_name!=''\")\n</code></pre> <p>List-based Column</p> <p>Column types include Multiple Select</p> <pre><code># equal-unequal query\nbase.filter('Table1','view_name', \"column_name=A and column_name=B\") # Find the rows which contains both 'A' and 'B'\n</code></pre> <p>Number-based Column</p> <ol> <li>Column types include Number</li> </ol> <pre><code># 1. greater-less query\nbase.filter('Table1', 'view_name', \"column_name&gt;18\")\nbase.filter('Table1', 'view_name', \"column_name&gt;-10 and column_name&lt;=0\")\n\n# 2. equal-unequal query\nbase.filter('Table1', 'view_name',\"column_name&lt;&gt;20\")\nbase.filter('Table1', 'view_name', \"column_name=0\")\nbase.filter('Table1', 'view_name',\"column_name=''\")\n</code></pre> <ol> <li>Computation</li> </ol> <pre><code>base.filter('Table1', 'view_name', \"column_name+3&gt;18\")\nbase.filter('Table1', 'view_name', \"column_name*2=18\")\nbase.filter('Table1', 'view_name', \"column_name-2=18\")\nbase.filter('Table1', 'view_name', \"column_name/2=18\")\nbase.filter('Table1', 'view_name', \"column_name^2=18\")\nbase.filter('Table1', 'view_name', \"column_name%2=1\")\n</code></pre> <p>Date-based Column</p> <p>Column types include Date, Created time, Last modified time</p> <pre><code># 1. greater-less query\nbase.filter('Table1', 'view_name', \"column_name&gt;'2020-1-30'\")\nbase.filter('Table1', 'view_name', \"column_name&gt;='2019-1-1 5:30' and column_name&lt;='2019-5-1 6:00'\")\n\n# 2. equal-unequal query\nbase.filter('Table1', 'view_name', \"column_name='2020-1-1 10:59:59'\")\nbase.filter('Table1', 'view_name', \"column_name!=''\")\n</code></pre> <p>Note that please use the quotes \"\" when making the date-time query</p> <p>Boolean-based Column</p> <p>Column types include Checkbox</p> <pre><code># equal-unequal query\nbase.filter('Table1', 'view_name','column_name=False') # Same as base.filter('Table1', \"column_name=''\")\nbase.filter('Table1', 'view_name', \"column_name=True\")\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#filter-queries","title":"Filter Queries","text":"<p>The return value of the <code>base.filter</code> function, this object provides some methods to simplify the operation of the filtered data</p> <p>filter</p> <p>Pass a conditional statement, filter out the rows that meet the conditions in the table, and return a querySet object.</p> <pre><code>base.filter(table: Object/String, ??, condition: ??)\n</code></pre> <p>Example</p> <pre><code>// Filter out rows whose number column is equal to 5, and return a querySet object\nconst querySet = base.filter('Table1', 'Default', 'number = 5');\n</code></pre> <p>all</p> <p>Returns all filtered data in the form of a list</p> <pre><code>querySet.all(linkId, tableName, linkedTableName, rowId, updatedlinkedRowIds)\n</code></pre> <p>Example</p> <pre><code>const list = querySet.all();\n</code></pre> <p>count</p> <p>Returns the number of filtered rows</p> <p>Example</p> <pre><code>const count = querySet.count();\n</code></pre> <p>last</p> <p>Return the last filtered data</p> <p>Example</p> <pre><code>const row = querySet.last();\n</code></pre> <p>first</p> <p>Return the first filtered data</p> <p>Example</p> <pre><code>const row = querySet.first();\n</code></pre> <p>delete</p> <p>Delete all filtered rows and return the number of successfully deleted</p> <p>Example</p> <pre><code>const count = querySet.delete();\n</code></pre> <p>update</p> <p>Modify the row data and return the updated data</p> <p>Example</p> <pre><code>// Modify the contents of the Name column of all filtered rows to xxxx\nconst rows = querySet.update({Name: 'xxxx'});\n</code></pre> <p>filter</p> <p>Further filtering, return a querySet object</p> <p>Example</p> <pre><code>// Filter out the rows with the value of Tom in the Name column of the querySe\nconst querySet1 = querySet.filter('Name = \"Tom\"');\n</code></pre> <p>get</p> <p>Get a piece of data in the querySet that meets the conditions, and return a row</p> <p>Example</p> <pre><code>// Get the first data of Tom in the Name column of the querySet\nconst row = querySet.get('Name = \"Tom\"');\n</code></pre>"},{"location":"scripts/javascript/objects/tables/","title":"Tables","text":"<p>All available functions to interact with the tables of a SeaTable base.</p>"},{"location":"scripts/javascript/objects/tables/#get-tables","title":"Get Table(s)","text":"<p>getActiveTable</p> <p>Get the currently selected table and return a table object.</p> <pre><code>base.getActiveTable();\n</code></pre> <p>Example <pre><code>const table = base.getActiveTable();\noutput.text(`The name of the active table is: ${table.name}`);\n</code></pre></p> <p>getTables</p> <p>Get all tables of this base as <code>json</code> object with all rows and metadata.</p> <pre><code>base.getTables();\n</code></pre> <p>Example <pre><code>const tables = base.getTables();\noutput.text(tables);\n</code></pre></p> <p>getTableByName</p> <p>Get a table object by its name. The object contains all rows and metadata. <pre><code>base.getTableByName(tableName: String);\n</code></pre></p> <p>Example <pre><code>const table = base.getTableByName('Table1');\noutput.text(`The id of the table is: ${table._id}`);\n</code></pre></p>"},{"location":"scripts/javascript/objects/tables/#add-table","title":"Add Table","text":"<p>addTable</p> <p>Add a new table to this base. The table should not exist already in your base.</p> <pre><code>base.addTable(tableName: String);\n</code></pre> <p>Example <pre><code>base.addTable('New table');\noutput.text(\"Wow, I just added a new table to this base.\")\n</code></pre></p>"},{"location":"scripts/javascript/objects/tables/#rename-table","title":"Rename Table","text":"<p>renameTable</p> <p>Rename an existing table.</p> <pre><code>base.renameTable(oldName: String, newName: String);\n</code></pre> <p>Example <pre><code>const old_name = \"Table1\";\nconst new_name = \"Projects 2023\";\nbase.renameTable(old_name, new_name);\noutput.text(`This base ${old_name} got a new name: ${new_name}`);\n</code></pre></p>"},{"location":"scripts/javascript/objects/tables/#delete-table","title":"Delete Table","text":"<p>deleteTable</p> <p>Delete a table from the base. By the way, the table can be restored from the logs.</p> <pre><code>base.deleteTable(tableName: String);\n</code></pre> <p>Example <pre><code>base.deleteTable('Old table');\n</code></pre></p>"},{"location":"scripts/javascript/objects/utilities/","title":"Utility functions","text":"<p>Utility functions help you to work with data in SeaTable.</p>"},{"location":"scripts/javascript/objects/utilities/#date-and-time","title":"Date and Time","text":"<p>formatDate</p> <p>Format date to 'YYYY-MM-DD' to be used in a date column.</p> <pre><code>base.utils.formatDate(date: date object)\n</code></pre> <p>Example <pre><code>let date = new Date();\nlet formatDate = base.utils.formatDate(date);\noutput.text(formatDate);\n</code></pre></p> <p>formatDateWithMinutes</p> <p>Format date to 'YYYY-MM-DD HH:mm' to be used in a date column..</p> <pre><code>base.utils.formatDateWithMinutes(date: date object)\n</code></pre> <p>Example <pre><code>let date = new Date();\nlet formatDate = base.utils.formatDateWithMinutes(date);\noutput.text(formatDate);\n</code></pre></p>"},{"location":"scripts/javascript/objects/utilities/#lookup-and-query","title":"Lookup and Query","text":"<p>lookupAndCopy</p> <p>Similar to the vlookup function in Excel. Find a matching row in the source table for each row of the target table, and then copy the data of the specified cell of the matching row to the specified cell of the target row.</p> Name Email Hulk greenbigboy@stark-industries.movie Tony ironman <p>The target table only has the user names but we want to copy the email address from the source table to the target table, then this function can be used.</p> Name Email Hulk Tony <pre><code>base.utils.lookupAndCopy(targetTable, targetColumn, targetColumnToCompare, sourceTableName, sourceColumnName, sourceColumnToCompare = null);\n</code></pre> <p>Example</p> <pre><code>// Match the rows with the same content in the Name column of Table1 and Table2, copy the contents of the Email column of the row in Table1 to the Email column of the corresponding row in Table2\nbase.utils.lookupAndCopy('Table2', 'Email', 'Name', 'Table1', 'Name');\n\n// Match the rows with the same content in the Name column in Table1 and the Name1 column in Table2, and copy the contents of the Email column of the row in Table1 to the Email1 column of the corresponding row in Table2\nbase.utils.lookupAndCopy('Table2', 'Email1', 'Name1', 'Table1', 'Email', 'Name');\n</code></pre> <p>query</p> <p>Filter and summary the table data by SQL like statements.</p> <pre><code>base.utils.query(tableName: String, viewName: String, query: String);\n</code></pre> <p>Example</p> <pre><code>// Filter out the rows where the sum of the three columns 'number', 'number1', and 'number2' is greater than 5 then sum the number and number2 columns in these rows, return {number: 12, number2: 23}\nbase.utils.query('Table1', 'View_name', 'select sum(number), sum(number2) where number + number1 + number2 &gt; 5');\n</code></pre>"},{"location":"scripts/javascript/objects/views/","title":"Views","text":"<p>Functions to interact with the views of a table.</p>"},{"location":"scripts/javascript/objects/views/#get-views","title":"Get Views","text":"<p>getActiveView</p> <p>Get the current view, the method return a view object.</p> <pre><code>base.getActiveView();\n</code></pre> <p>Example <pre><code>const view  = base.getActiveView();\noutput.text(view._id);\noutput.text(view);\n</code></pre></p> <p>listViews / getViews (deprecated)</p> <p>Get all the views of the current table, and return all the views in an array</p> <pre><code>base.listViews(table: Object/String);\n</code></pre> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst views = base.listViews(table);\noutput.text(views.length);\n</code></pre></p> <p>getViewByName</p> <p>Get a view object via its name, and return a view object.</p> <pre><code>base.getViewByName(table: Object/String, viewName: String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'view 1');\noutput.text(view.name);\n</code></pre></p> <pre><code>const view = base.getViewByName('Table1', 'view 1');\noutput.text(view.name);\n</code></pre>"},{"location":"scripts/javascript/objects/views/#add-view","title":"Add View","text":"<p>addView</p> <p>Add a view to a table.</p> <pre><code>base.addView(table: Object/String, viewName: String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nbase.addView(table, 'view 2');\n</code></pre></p> <pre><code>base.addView('Table1', 'view 2');\n</code></pre>"},{"location":"scripts/javascript/objects/views/#rename-view","title":"Rename View","text":"<p>renameView</p> <p>Rename a view in the table.</p> <pre><code>base.renameView(table: Object/String, currentViewName: String, nextViewName: String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nbase.renameView(table, 'view1', 'view2');\n</code></pre></p> <pre><code>base.renameView('Table1', 'view1', 'view2');\n</code></pre>"},{"location":"scripts/javascript/objects/views/#delete-view","title":"Delete View","text":"<p>deleteView</p> <p>Delete a view.</p> <pre><code>base.deleteView(table: Object/String, viewName: String);\n</code></pre> <p>Examples <pre><code>const table  = base.getTableByName('Table1');\nbase.deleteView(table, 'view2');\n</code></pre></p> <pre><code>base.deleteView('Table1', 'view2');\n</code></pre>"},{"location":"scripts/python/authorization_python/","title":"Authorization","text":"<p>Python (in comparision to Javascript) scripts need an authentication.</p> <p>You can use two methods to obtain authorization to read and write a base.</p> <ol> <li> <p>One way is to use the api token of the base, the token can be directly generated on the web side. Read directly from context.api_token in the cloud environment.</p> </li> <li> <p>Another method is to use your username and password to initialize an <code>account</code> object, and then call the <code>account</code> interface to get a <code>base</code> object. The first method is much easier.</p> </li> </ol> <p>Protect your credentials</p> <p>Please be aware that a python script is readable for all users, who have access to this base. Therefore be careful if you store your username and password to a python script.</p>"},{"location":"scripts/python/authorization_python/#authorization-with-api-token","title":"Authorization with API-Token","text":"<pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n</code></pre>"},{"location":"scripts/python/authorization_python/#authorization-with-account-object","title":"Authorization with account object","text":"<pre><code>from seatable_api import Account\naccount = Account(username, password, server_url)\naccount.auth()\nbase = account.get_base(workspace_id, base_name)\n</code></pre>"},{"location":"scripts/python/authorization_python/#authorization-expiration-handling","title":"Authorization expiration handling","text":"<p>Note, this feature works with SeaTable version 3.1+</p> <p>In some cases, the program need to run for a long time, we put the base operation code into a while or for loop. Authorization may expire during execution and cause the program to break. We provide an exception called <code>AuthExpiredError</code> that can be caught for reauthorization.</p> <pre><code>from seatable_api import Base, context\nfrom seatable_api.exception import AuthExpiredError\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth()\n\nwhile True:\n    try:\n        base.append_row('Table1', {\"xxx\":\"xxx\"})\n        ...\n    except AuthExpiredError:\n       base.auth()\n</code></pre>"},{"location":"scripts/python/basic_structure_python/","title":"Basic structure of a Python script","text":"<p>Python scripts can be and executed directly in a base using a SeaTable component called Python Pipeline. You can also choose to run scripts locally. Where you run your Python script has consequences on the available libraries and authentication. </p>"},{"location":"scripts/python/basic_structure_python/#libraries","title":"Libraries","text":"<p>The current Python Pipeline ships with Python 3.11 and a bundle of third party libraries. One of the bundled library and the main library to interact with SeaTable bases is seatable-api.</p> <p>At a minimum, the Base and context function from the seatable-api library must be imported. Additionally, you can import functions from the bundled libraries.</p> <pre><code>from seatable_api import Base, context\nfrom datetime import datetime\n</code></pre> <p>When running Python scripts locally, you can take advantages of the uncountable number of Python libraries. </p>"},{"location":"scripts/python/basic_structure_python/#authentication","title":"Authentication","text":"<p>As a general rule, Python script must authenticate. </p> <p>Within SeaTable's integrated Python editor, authentication can be done using these two lines of code at the beginning of the script thanks to the context object:</p> <pre><code>base = Base(context.api_token, context.server_url)\nbase.auth()\n</code></pre> <p>Read here all details about authentication in Python scripts.</p> <p>Multiple tokens in SeaTable</p> <p>SeaTable provides multiple tokens to authenticate. But let's keep things simple! If you develop Python scripts in SeaTable, just use the context object <code>context.api_token</code> or provide a so called <code>API-Token</code> of a base.</p> <p>All details can be found in the SeaTable API Reference.</p> <p>It is even possible to develop a Python in the way that it could be executed in the cloud and local without changing the code.</p>"},{"location":"scripts/python/basic_structure_python/#objects-and-methods","title":"Objects and methods","text":"<p>There are a lot of predefined objects and methods in Python. If you compare JavaScript and Python, you will notice that Python has no output object. This is not necessary, because the output is either written directly into the base or printed.</p>"},{"location":"scripts/python/basic_structure_python/#lets-get-concrete","title":"Let's get concrete","text":"<p>Let's make this concrete and let us look at some basic examples.</p> <ol> <li>Jump to your SeaTable web interface</li> <li>Create a new script of the type Python</li> <li>Copy the following code</li> <li>Run the script</li> </ol> <p>You will learn from these examples, that it is quite easy to read, output and even manipulate the data of a base inside SeaTable with the predefined objects and the corresponding methods.</p> <p>Indents are important</p> <p>Please take care of indentations! Indentation is mandatory in Python to define the blocks of statements. The number of spaces must be uniform in a block of code. It is preferred to use whitespaces instead of tabs to indent in Python. If the indentations are wrong, the scripts will throw errors or not work as expected!</p> Add a table to a baseAdd a row to a table <p>This examples shows how to add a table to an existing bases.</p> <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth() # (1)!\n\ncolumns=[\n  {\n    \"column_type\" : \"text\", \n    \"column_name\": \"name\"\n  }, \n  {\n  \"column_type\": \"number\",\n  \"column_name\": \"age\"\n  }\n]\n\nbase.add_table(\"ScriptTest\", lang='en', columns=columns)\n</code></pre> <ol> <li>These three lines are always required to authorize against the base in SeaTable.</li> </ol> <p>This examples shows how to add a a record to a table. The example script assumes that a table \"ScriptTest\" table with two columns \"name\" and \"age\" exists in the base.</p> <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nrow_data = {\n  'name': 'Tom',\n  'age': 18\n  } \n\nbase.append_row('ScriptTest', row_data)\n</code></pre>"},{"location":"scripts/python/common_questions/","title":"Common questions (Python)","text":"How to make the script support both local and cloud run List of libraries supported in the cloud environment Install and use custom python libraries"},{"location":"scripts/python/common_questions/#how-to-make-the-script-support-both-local-and-cloud-run","title":"How to make the script support both local and cloud run","text":"<p>Flexible authorization</p> <p>When the script runs in the cloud, it will provide a context object, which contains the server URL auto generated by the system and the API token of base. If you run the script in local, you need to manually specify these two variables; the API token can be generated in the drop-down menu \"Advanced -&gt; API Token\" of the table.</p> <p>Use the following method to make the script support both local and cloud run</p> <pre><code>from seatable_api import Base, context\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369848455a39f4436147639cf02b2d'\n\n\nbase = Base(api_token, server_url)\nbase.auth()\n</code></pre> <p>Dependencies that need to be installed to run the script local</p> <p>The script need to install <code>seatable-api</code> when run in local.</p> <pre><code>pip3 install seatable-api\n</code></pre> <p>Additional requirements are:</p> <ul> <li>Python &gt;= 3.5</li> <li>requests</li> <li>socketIO-client-nexus</li> </ul>"},{"location":"scripts/python/common_questions/#list-of-libraries-supported-in-the-cloud-environment","title":"List of libraries supported in the cloud environment","text":"<p>In the cloud environment, Python scripts run within a Docker container. This container comes pre-configured with a set of Python libraries that can be imported and used in your scripts. If you require libraries not included in this set, please contact our support team. Otherwise, scripts using unsupported libraries can only be executed locally.</p> <p>Python Standard Library</p> <p>The cloud environment currently utilizes Python 3.11. This version supports all modules in the Python 3.11 standard library. Common built-in libraries such as <code>os</code>, <code>sys</code>, <code>datetime</code>, and others are readily available for use in your scripts.</p> <p>Third-Party Libraries</p> <p>In addition to the standard library, we've included several popular third-party packages to enhance your scripting capabilities:</p> <ul> <li>seatable-api: Official SeaTable Python API</li> <li>dateutils: Extensions to Python's datetime module</li> <li>requests: HTTP library for Python</li> <li>pyOpenSSL: Python wrapper for OpenSSL</li> <li>Pillow: Python Imaging Library (Fork) with support for HEIF images</li> <li>python-barcode: Barcode generator</li> <li>qrcode: QR Code generator</li> <li>pandas: Data manipulation and analysis library</li> <li>numpy: Fundamental package for scientific computing</li> <li>openai: OpenAI API client library</li> <li>ldap3: LDAP v3 client library</li> <li>pydantic: Data validation and settings management using Python type annotations</li> <li>httpx: A next-generation HTTP client for Python</li> <li>PyJWT: JSON Web Token implementation in Python</li> <li>python-socketio: Python implementation of the Socket.IO realtime server</li> <li>scipy: Fundamental algorithms for scientific computing in Python</li> <li>PyPDF: PDF toolkit for Python</li> <li>pdfmerge: Merge PDF files</li> </ul> <p>This list is not exhaustive. For a complete, up-to-date list of available third-party packages, you can run the following Python script in your SeaTable environment:</p> <pre><code>import importlib.metadata\n\n# List all installed packages\ninstalled_packages = importlib.metadata.distributions()\n\n# Print package names\nfor package in installed_packages:\n  print(package.metadata['Name'])\n</code></pre>"},{"location":"scripts/python/common_questions/#install-and-use-custom-python-libraries","title":"Install and use custom python libraries","text":"<ul> <li>The python libraries in SeaTable Cloud can not be changed.</li> <li>If you run your own SeaTable Server it is possible to install your own libaries.</li> </ul>"},{"location":"scripts/python/examples/","title":"Examples","text":"<p>This section contains some examples of Python Scripts. You can just copy&amp;paste them in any base in SeaTable any run them.</p>"},{"location":"scripts/python/examples/#seatable-email-sender","title":"SeaTable Email Sender","text":"<p>This Python script demonstrates sending emails via SMTP using the smtplib library and constructing MIME objects to compose rich content emails within SeaTable.</p> <p>read more </p>"},{"location":"scripts/python/examples/#seatable-barcode-image-generator","title":"SeaTable Barcode Image Generator","text":"<p>This Python script demonstrates the process of converting text slices into barcode images and storing them in an image column within SeaTable.</p> <p>read more </p>"},{"location":"scripts/python/examples/#seatable-qr-code-generator","title":"SeaTable QR Code Generator","text":"<p>This Python script is designed to generate QR codes and associate them with corresponding records in a SeaTable base. It uses the seatable_api library and qrcode module to accomplish this task.</p> <p>read more </p>"},{"location":"scripts/python/examples/#seatable-mysql-synchronization","title":"SeaTable MySQL Synchronization","text":"<p>This Python script facilitates the synchronization of data from a MySQL database to a SeaTable table.</p> <p>read more </p>"},{"location":"scripts/python/examples/#watch-stock-price","title":"Watch Stock Price","text":"<p>Integrating data from the Twelve Data API with SeaTable facilitates the updating and maintenance of current stock prices within a designated table in the SeaTable environment.</p> <p>read more </p>"},{"location":"scripts/python/examples/#merge-pdf","title":"Merge PDF","text":"<p>Merge two PDF files and save the merged file into a new row in a SeaTable base.</p> <p>read more: </p>"},{"location":"scripts/python/examples/#convert-heic-to-png","title":"Convert HEIC to PNG","text":"<p>Convert HEIC image files to PNG format and save the converted file into a new row in a SeaTable base.</p> <p>read more: </p>"},{"location":"scripts/python/examples/generate_barcode/","title":"Generate Barcode","text":"<p>This Python script demonstrates the process of converting text slices into barcode images and storing them in an image column within SeaTable.</p>"},{"location":"scripts/python/examples/generate_barcode/#functionality","title":"Functionality","text":"<ul> <li>Setup and Authentication: Utilizes SeaTable API credentials for authentication.</li> <li>Barcode Generation: Processes rows in a specified SeaTable table, extracting text from a designated column (TEXT_COL) to generate barcode images.</li> <li>Association with Records: Associates generated barcode images with the respective records by updating an image column (BARCODE_IMAGE_COL) in the SeaTable table.</li> <li>Handling Existing Images: Skips rows if a barcode image already exists for efficient processing.</li> <li>Customization Options: Provides customizable parameters such as module width, height, padding, font size, and text-barcode distance for barcode image generation.</li> <li>Error Handling: Includes exception handling to manage errors encountered during the barcode image generation process.</li> </ul>"},{"location":"scripts/python/examples/generate_barcode/#process-overview","title":"Process Overview","text":"<ol> <li>Iterates through rows in a specified SeaTable table.</li> <li>Converts text data from a designated column into barcode images using the specified barcode type (BARCODE_TYPE).</li> <li>Saves the generated barcode images temporarily.</li> <li>Uploads the generated barcode images to SeaTable and associates them with corresponding records.</li> <li>Removes temporary barcode image files after successful upload.</li> <li>This script offers an automated way to generate barcode images from text data in a SeaTable table, enhancing data visualization and association within the SeaTable platform.</li> </ol>"},{"location":"scripts/python/examples/generate_barcode/#code","title":"Code","text":"<pre><code>import os\nimport time\nimport barcode\nfrom barcode.writer import ImageWriter\nfrom seatable_api import Base, context\n\"\"\"\nThe python script shows how to transfer a slice of text into a barcode image and save it into\nthe image column\n\"\"\"\n\napi_token = context.api_token or \"859ad340d9a2b11b067c11f43078992e14853af5\"\nserver_url = context.server_url or \"https://cloud.seatable.io\"\n\nTEXT_COL = \"Message\"  # column which is expected to be transferred into barcode\nBARCODE_IMAGE_COL = \"BarcodeImage\"\nTABLE_NAME = 'Table1'\nBARCODE_TYPE = 'code128'\n\nCUSTOM_OPTIONS = {\n    \"module_width\": 0.2,       # width of single stripe of barcode, mm\n    \"module_height\": 15.0,     # height of barcode, mm\n    \"quiet_zone\": 6.5,         # padding size of first and last stripe to the image, mm\n    \"font_size\": 10,           # font size of the text below the barcode,pt\n    \"text_distance\": 5.0,      # distance between the text and the barcode, mm\n}\n\n\nCODE = barcode.get_barcode_class(BARCODE_TYPE)\nbase = Base(api_token, server_url)\nbase.auth()\n\ndef get_time_stamp():\n    return str(int(time.time()*100000))\n\nupdated_rows = 0\nfor row in base.list_rows(TABLE_NAME):\n    # continue if the image is already shown up here\n    if row.get(BARCODE_IMAGE_COL):\n        continue\n\n    try:\n        row_id = row.get('_id')\n        msg = str(row.get(TEXT_COL))\n\n        # create a barcode object\n        code_img = CODE(msg, writer=ImageWriter())\n        save_name = \"%s_%s\" % (row_id, get_time_stamp())\n\n        # temporarily saved as an image\n        file_name = code_img.save(\"/tmp/%s\" % save_name, options=CUSTOM_OPTIONS)\n\n        # upload the barcode image to the base\n        info_dict = base.upload_local_file(file_name, name=None, file_type='image', replace=True)\n        img_url = info_dict.get('url')\n        base.update_row(TABLE_NAME, row_id, {BARCODE_IMAGE_COL: [img_url]})\n\n        # remove the image file which is saved temporarily\n        os.remove(file_name)\n        updated_rows += 1\n    except Exception as error:\n        print(\"error occured during barcode generate\", error)\n        continue\n\n# Summary\nprint(\"I created %s barcodes\" % updated_rows)\n</code></pre>"},{"location":"scripts/python/examples/generate_qrcode/","title":"Generate QR-Code","text":"<p>This Python script is designed to generate QR codes and associate them with corresponding records in a SeaTable base. It uses the <code>seatable_api</code> library and <code>qrcode</code> module to accomplish this task.</p>"},{"location":"scripts/python/examples/generate_qrcode/#functionality","title":"Functionality","text":"<ul> <li>Setup and Authentication: Utilizes SeaTable API credentials for authentication.</li> <li>QR Code Generation: Processes rows in a specified SeaTable table, extracting text from a designated column (STRING_COLUMN) to generate QR codes.</li> <li>Association with Records: Associates generated QR code images with the respective records by updating an image column (IMAGE_COLUMN) in the SeaTable table.</li> <li>Handling Existing Images: Allows the option to skip rows if an image already exists or overwrite existing barcode images based on the OVERWRITE flag.</li> <li>Error Handling: Provides error handling to manage exceptions during the QR code generation process.</li> </ul>"},{"location":"scripts/python/examples/generate_qrcode/#process-overview","title":"Process Overview","text":"<ol> <li>Iterates through rows in a specified SeaTable table.</li> <li>Generates QR codes based on the text content in the designated column.</li> <li>Saves the QR code images temporarily.</li> <li>Uploads the generated images to SeaTable and associates them with corresponding records.</li> <li>Removes temporary image files after successful upload.</li> </ol> <p>This script offers an automated way to generate QR codes from text data in a SeaTable table, enhancing data visualization and association within the SeaTable platform.</p>"},{"location":"scripts/python/examples/generate_qrcode/#code","title":"Code","text":"<pre><code>import os\nimport time\nimport qrcode\nfrom seatable_api import Base, context\n\napi_token = context.api_token or \"...\"\nserver_url = context.server_url or \"https://cloud.seatable.io\"\n\nSTRING_COLUMN = \"String\"  # text column which is expected to be transferred into qrcode\nIMAGE_COLUMN = \"Image\"\nTABLE_NAME = \"Table1\"\nOVERWRITE = True  # set to True to overwrite existing barcode images\n\nbase = Base(api_token, server_url)\nbase.auth()\n\nqr = qrcode.QRCode(\n    version=2,\n    error_correction=qrcode.constants.ERROR_CORRECT_L,\n    box_size=40,\n    border=8\n)\n\ndef get_time_stamp():\n    return str(int(time.time() * 100000))\n\ndef main():\n  for row in base.list_rows(TABLE_NAME):\n    if not OVERWRITE and row.get(IMAGE_COLUMN):\n      print(\"Skipping row. Image already exists.\")\n      continue\n\n    try:\n      row_id = row.get('_id')\n      message = row.get(STRING_COLUMN)\n\n      if not message:\n        print(\"Skipping row. Empty message.\")\n        continue\n\n      # clear, add data and make an qrcode object\n      qr.clear()\n      qr.add_data(str(message))\n      qr.make()\n\n      img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n      save_name = f\"{row_id}_{get_time_stamp()}\"\n      img.save(f\"/tmp/{save_name}.png\")\n\n      # temporarily saved as an image\n      info_dict = base.upload_local_file(f\"/tmp/{save_name}.png\", name=None, file_type='image', replace=True)\n      img_url = info_dict.get('url')\n      base.update_row(TABLE_NAME, row_id, {IMAGE_COLUMN: [img_url]})\n\n      # remove the image file which is saved temporarily\n      os.remove(f\"/tmp/{save_name}.png\")\n    except Exception as exception:\n      print(\"Error occurred during Image generation:\", exception)\n      continue\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"scripts/python/examples/heic_to_png/","title":"Convert HEIC to PNG","text":"<p>Requires Python Runner v4.1.1</p> <p>The library <code>pillow_heif</code> was added with the Python Runner version 4.1.1. If you're using SeaTable Cloud, this was added with v5.1.</p> <p>This Python script demonstrates how to convert HEIC image files to PNG format and save the converted file into a new row in a SeaTable base. It utilizes the <code>pillow_heif</code> library to handle HEIC files, <code>Pillow</code> for image processing, and the <code>seatable_api</code> library to interact with SeaTable.</p>"},{"location":"scripts/python/examples/heic_to_png/#script-overview","title":"Script Overview","text":"<p>The script performs the following steps:</p> <ul> <li>Authenticate with SeaTable: Uses the API token and server URL to authenticate.</li> <li>Download HEIC Files: Retrieves HEIC files from a specified column in SeaTable.</li> <li>Convert HEIC to PNG: Transforms the downloaded HEIC file to PNG format.</li> <li>Upload Converted PNG: Uploads the PNG file back to SeaTable and updates the row with the new file URL.</li> </ul>"},{"location":"scripts/python/examples/heic_to_png/#example-script","title":"Example Script","text":"<pre><code>import requests\nfrom PIL import Image\nfrom pillow_heif import register_heif_opener\nfrom seatable_api import Base, context\n\n# Activate heif/heic support\nregister_heif_opener()\n\n# &gt;&gt;&gt; UPDATE THESE VALUES ACCORDING TO YOUR NEEDS\nTABLE_NAME = \"Table1\"\nFILE_COLUMN = \"HEIC\"\nRESULT_COLUMN = \"PNG\"\n\n# Authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nfor row in base.list_rows(TABLE_NAME):\n    if row.get(FILE_COLUMN) is None:\n        continue\n\n    # input must be image.heic, output is image-xxx.png\n    filename_heic = 'image.heic'\n    filename_png = f'image-{row[\"_id\"]}.png'\n\n    # Download heic image\n    url = row.get(FILE_COLUMN)[0]\n    base.download_file(url, filename_heic)\n\n    # transform image to png\n    im = Image.open(filename_heic)\n    im.save(filename_png, quality=90)\n    print('Saved image')\n\n    # Upload\n    info_dict = base.upload_local_file(filename_png, name=None, file_type='image', replace=True)\n    print('Uploaded file')\n\n    # Save back to SeaTable Base\n    img_url = info_dict.get('url')\n    base.update_row(TABLE_NAME, row['_id'], {RESULT_COLUMN: [img_url]})\n    print('Stored image info in base')\n</code></pre>"},{"location":"scripts/python/examples/heic_to_png/#detailed-steps","title":"Detailed Steps","text":"<ul> <li>HEIC Support Activation: The script uses register_heif_opener() to enable HEIC file support.</li> <li>Authentication: The script uses Base from seatable_api to authenticate using the API token and server URL.</li> <li>File Handling: It downloads HEIC files specified in the HEIC column for each row. The files are saved locally as image.heic.</li> <li>Conversion Process: The script uses Pillow to open the HEIC file and save it as a PNG with 90% quality.</li> <li>Uploading and Updating: The converted PNG file is uploaded back to SeaTable, and its URL is stored in the PNG column of the same row.</li> </ul>"},{"location":"scripts/python/examples/heic_to_png/#usage-notes","title":"Usage Notes","text":"<p>Ensure that each row in <code>Table1</code> contains a HEIC-file in the <code>HEIC</code> column for successful execution. Adjust table and column names as necessary to fit your specific SeaTable configuration. The script processes one HEIC file per row. If you need to handle multiple HEIC files per row, you'll need to modify the script accordingly.</p>"},{"location":"scripts/python/examples/merge_pdf/","title":"Merge PDF","text":"<p>Requires Python Runner v4.1.1</p> <p>The library <code>pdfmerge</code> was added with the Python Runner version 4.1.1. If you're using SeaTable Cloud, this was added with v5.1.</p> <p>This Python script demonstrates how to merge two PDF files and save the merged file into a new row in a SeaTable base. It utilizes the <code>pdfmerge</code> library to handle the PDF merging process and the <code>seatable_api</code> library to interact with SeaTable.</p>"},{"location":"scripts/python/examples/merge_pdf/#script-overview","title":"Script Overview","text":"<p>The script performs the following steps:</p> <ul> <li>Authenticate with SeaTable: Uses the API token and server URL to authenticate.</li> <li>Download PDF Files: Retrieves two PDF files from a specified column in SeaTable.</li> <li>Merge PDFs: Combines the downloaded PDF files into a single PDF using pdfmerge.</li> <li>Upload Merged PDF: Uploads the merged PDF back to SeaTable and updates the row with the new file.</li> </ul>"},{"location":"scripts/python/examples/merge_pdf/#example-script","title":"Example Script","text":"<pre><code>import os\nimport pdfmerge\nimport requests\nimport sys\nimport shutil\nfrom pdfmerge import pdfmerge\nfrom seatable_api import Base, context\n\n# &gt;&gt;&gt; UPDATE THESE VALUES ACCORDING TO YOUR NEEDS\nTABLE_NAME = \"Table1\"\nFILE_COLUMN = \"PDF Files\"\nRESULT_COLUMN = \"Merged Files\"\nFILENAMES = ['file-1.pdf', 'file-2.pdf']\n\n# Authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n# Get rows\nfor row in base.list_rows(TABLE_NAME):\n    if row.get(FILE_COLUMN) is None:\n        continue\n\n    files = [file['url'] for file in row[FILE_COLUMN]]\n    assert len(files) == 2\n\n    # Download pdfs\n    base.download_file(files[0], FILENAMES[0])\n    base.download_file(files[1], FILENAMES[1])\n    print('Downloaded 2 files')\n\n    # Merge\n    output_filename = f'output-{row[\"_id\"]}.pdf'\n    pdfmerge(FILENAMES, output_filename)\n    print('Merged PDF files')\n\n    # Upload file + store URL in base\n    info_dict = base.upload_local_file(output_filename, name=None, file_type='file', replace=True)\n    base.update_row(TABLE_NAME, row['_id'], {RESULT_COLUMN: [info_dict]})\n    print('Uploaded PDF file')\n</code></pre>"},{"location":"scripts/python/examples/merge_pdf/#detailed-steps","title":"Detailed Steps","text":"<ul> <li>Authentication: The script uses Base from seatable_api to authenticate using the API token and server URL.</li> <li>File Handling: It downloads two PDFs specified in the <code>PDF Files</code> column for each row. The files are saved locally as <code>file-1.pdf</code> and <code>file-2.pdf</code>.</li> <li>Merging Process: The pdfmerge function is used to merge these two PDFs into a single file named with the pattern output-{row_id}.pdf.</li> <li>Uploading and Updating: The merged file is uploaded back to SeaTable, and its URL is stored in the <code>Merged Files</code> column of the same row.</li> </ul>"},{"location":"scripts/python/examples/merge_pdf/#usage-notes","title":"Usage Notes","text":"<p>Ensure that each row in <code>Table1</code> contains exactly two PDFs in the <code>PDF Files</code> column for successful execution. Adjust table and column names as necessary to fit your specific SeaTable configuration.</p>"},{"location":"scripts/python/examples/send_email/","title":"Send E-mails","text":"<p>This Python script demonstrates sending emails via SMTP using the smtplib library and constructing MIME objects to compose rich content emails within SeaTable.</p>"},{"location":"scripts/python/examples/send_email/#functionality","title":"Functionality","text":"<ul> <li>Setup and Authentication: Uses SMTP parameters and SeaTable API credentials for authentication and sending emails.</li> <li>Recipient Selection: Retrieves email addresses from a SeaTable table's column (Contacts -&gt; Email) to serve as multiple recipients.</li> <li> <p>Email Composition:</p> <ul> <li>Constructs an email with a specified subject, sender, and HTML content body for the email.</li> <li>Allows for attaching files stored in SeaTable records to the email.</li> </ul> </li> </ul>"},{"location":"scripts/python/examples/send_email/#process-overview","title":"Process Overview","text":"<ol> <li>Retrieves recipient email addresses from a designated SeaTable table column (Contacts -&gt; Email).</li> <li>Composes an email using HTML content to create a rich-text message body.</li> <li>Attaches a file from SeaTable to the email by fetching its download link using the SeaTable API and attaching it to the email.</li> </ol> <p>This script offers an automated way to send emails with rich content and attachments using data stored within SeaTable, enabling streamlined communication and file sharing within the SeaTable environment.</p>"},{"location":"scripts/python/examples/send_email/#code","title":"Code","text":"<pre><code>import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage\nfrom email.header import Header\nfrom urllib import parse\nimport requests\nfrom seatable_api import Base, context\n\n# SeaTable API authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n# SMTP server configurations for sending emails\nsmtpserver = 'smtp.163.com'\nusername = '13069744444@163.com'\npassword = 'topsecret'\nsender = '13069744444@163.com'\n\n# Option a) define the recipient email address in this script\nreceivers = ['1223408888@qq.com']\n\n# Option b) Retrieving recipient email addresses from the 'Contacts' table in SeaTable\nreceiver_rows = base.list_rows('Contacts')\nreceivers = [row['Email'] for row in receiver_rows if row.get('Email')]\n\n# Email subject\nsubject = 'SeaTable Send email'\n\n# Constructing the email message\nmsg = MIMEMultipart('mixed')\nmsg['Subject'] = subject\nmsg['From'] = '13069744444@163.com &lt;13069744444@163.com&gt;'\nmsg['To'] = \";\".join(receivers)\n\n# Option a) plain text message\n# text = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.google.com\"\n# text_plain = MIMEText(text,'plain', 'utf-8')\n# msg.attach(text_plain)\n\n# Option b) HTML content for the email body\nhtml = \"\"\"\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hi!&lt;br&gt;\n       This is a sample of messages\n       from SeaTable\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\ntext_html = MIMEText(html,'html', 'utf-8')\nmsg.attach(text_html)\n\n# Attaching a file from SeaTable to the email\nrows = base.list_rows('Table3')\nfilename = rows[0]['File'][0]['name']\nfile_url = rows[0]['File'][0]['url']\npath = file_url[file_url.find('/files/'):]\ndownload_link = base.get_file_download_link(parse.unquote(path))\n\ntry:\n    response = requests.get(download_link)\n    if response.status_code != 200:\n        print('Failed to download image, status code: ', response.status_code)\n        exit(1)\nexcept Exception as e:\n    print(e)\n    exit(1)\n\n# Attaching the file to the email\ntext_att = MIMEText(response.content, 'base64', 'utf-8')\ntext_att[\"Content-Type\"] = 'application/octet-stream'\ntext_att[\"Content-Disposition\"] = 'attachment;filename*=UTF-8\\'\\'' + parse.quote(filename)\n\nmsg.attach(text_att)\n\n# Sending the email using SMTP\nsmtp = smtplib.SMTP()\nsmtp.connect(smtpserver)\nsmtp.login(username, password)\nsmtp.sendmail(sender, receivers, msg.as_string())\nsmtp.quit()\n</code></pre>"},{"location":"scripts/python/examples/sync_mysql/","title":"SeaTable MySQL Synchronization","text":"<p>This Python script facilitates the synchronization of data from a MySQL database to a SeaTable table.</p>"},{"location":"scripts/python/examples/sync_mysql/#functionality","title":"Functionality","text":"<ul> <li>Configuration Setup: Defines configurations for SeaTable, specifying server URL and API token, as well as MySQL database connection details.</li> <li> <p>Data Sync Process:</p> <ul> <li>Establishes a connection to the SeaTable base and authenticates using the provided API token and server URL.</li> <li>Retrieves existing rows from a designated SeaTable table (Table1) and extracts specific column (Name) data.</li> <li>Connects to the MySQL database (seatable) and fetches data from the order table.</li> <li>Compares MySQL data with SeaTable data to identify new records.</li> <li>Appends new records found in MySQL but not present in SeaTable to ensure synchronization.</li> </ul> </li> </ul>"},{"location":"scripts/python/examples/sync_mysql/#process-overview","title":"Process Overview","text":"<ol> <li>Initializes connections to both SeaTable and MySQL databases.</li> <li>Fetches existing rows and column data from the designated SeaTable table (Table1).</li> <li>Retrieves data from the MySQL order table.</li> <li>Compares MySQL data with SeaTable data to identify new records by matching the 'name' field.</li> <li>Adds new records from MySQL to SeaTable (Table1) for synchronization.</li> </ol> <p>This script enables the automated synchronization of data between a MySQL database and a SeaTable table, ensuring consistency and updating records seamlessly.</p>"},{"location":"scripts/python/examples/sync_mysql/#code","title":"Code","text":"<pre><code>import pymysql\nfrom seatable_api import Base, context\n\n# Base config\nSERVER_URL = context.server_url or 'http://127.0.0.1:8000'\nAPI_TOKEN = context.api_token or '...'\n\n# Table config\nTABLE_NAME = 'Table1'\nNAME_COLUMN = 'Name'\n\n# MySQL config\nHOST = 'localhost'\nUSER = ''\nPASSWORD = ''\nDB = 'seatable'\n\ndef sync_mysql():\n    \"\"\"Sync database into the table\n    \"\"\"\n    # base initiated and authed\n    base = Base(API_TOKEN, SERVER_URL)\n    base.auth()\n\n    rows = base.list_rows(TABLE_NAME)\n    row_keys = [row.get(NAME_COLUMN) for row in rows]\n\n    # mysql data\n    connection = pymysql.connect(host=HOST, user=USER, password=PASSWORD, db=DB)\n\n    with connection.cursor(pymysql.cursors.DictCursor) as cursor:\n        sql = \"SELECT * FROM order\"\n        cursor.execute(sql)\n        mysql_data = cursor.fetchall()\n\n    # sync\n    for item in mysql_data:\n        if item.get('name') not in row_keys:\n            row_data = {\n                'Name': item.get('name'),\n            }\n            base.append_row(TABLE_NAME, row_data)\n\n\nif __name__ == '__main__':\n    sync_mysql()\n</code></pre>"},{"location":"scripts/python/examples/update_stock_price/","title":"Stock Price Update with Twelve Data API","text":"<p>This Python script integrates data from the Twelve Data API with SeaTable to update and maintain current stock prices within a designated SeaTable table.</p>"},{"location":"scripts/python/examples/update_stock_price/#functionality","title":"Functionality","text":"<ul> <li>Configuration Setup: Defines configurations for the Twelve Data API and SeaTable server, specifying API keys and table/column details within SeaTable.</li> <li> <p>Stock Price Retrieval:</p> <ul> <li>Utilizes the Twelve Data API to retrieve the current stock prices based on stock symbols.</li> <li>Makes HTTP GET requests to the Twelve Data API to fetch stock prices using the provided API key.</li> </ul> </li> <li> <p>SeaTable Update:</p> <ul> <li>Retrieves stock symbols from a designated SeaTable table (Stock Watch).</li> <li>Updates the SeaTable table with the current stock prices fetched from the Twelve Data API, populating the designated column (Current stock price) in SeaTable.</li> <li>Displays the updated stock prices for each symbol in the console.</li> </ul> </li> </ul>"},{"location":"scripts/python/examples/update_stock_price/#process-overview","title":"Process Overview","text":"<ol> <li>Initializes configurations for the Twelve Data API and SeaTable server.</li> <li>Fetches current stock prices using the Twelve Data API based on stock symbols.</li> <li>Retrieves stock symbols from the SeaTable table (Stock Watch).</li> <li>Updates the SeaTable table with the fetched current stock prices in the designated column (Current stock price).</li> <li>Displays the updated stock prices for each symbol in the console.</li> </ol> <p>This script enables the automated update of current stock prices within a SeaTable table by leveraging data from the Twelve Data API, ensuring that stock information remains up-to-date within the SeaTable environment.</p>"},{"location":"scripts/python/examples/update_stock_price/#seatable-base-used-in-this-example","title":"SeaTable Base used in this example","text":"Symbol Current stock price AAPL $198.03 AMZN $147.40"},{"location":"scripts/python/examples/update_stock_price/#code","title":"Code","text":"<pre><code>from seatable_api import Base, context\nimport requests\n\nTWELVE_DATA_API_KEY = \"dfb122bbca6a4...\"  # Replace this with your actual API key from Twelve Data (up to 800 calls per days are free)\n\nSERVER_URL = context.server_url or \"https://cloud.seatable.io/\"\nAPI_TOKEN = context.api_token or \"...\"\n\nTABLE_WITH_STOCK_SYMBOLS = \"Stock Watch\"\nCOLUMN_WITH_STOCK_SYMBOLS = \"Symbol\"\nCOLUMN_WITH_STOCK_PRICE = \"Current stock price\"\n\n###\n# Do not change anything below this line\n###\n\n# Endpoint to fetch current stock price\ndef get_stock_price(SYMBOL):\n    url = f\"https://api.twelvedata.com/price?symbol={SYMBOL}&amp;apikey={TWELVE_DATA_API_KEY}\"\n\n    # Making the GET request to fetch the data\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        output = response.json()\n        return output['price']\n    else:\n        return false\n\n# get symbols from SeaTable base and update the current stock price\ndef update_stock_price():\n    for row in base.list_rows(TABLE_WITH_STOCK_SYMBOLS):\n        current_price = get_stock_price(row['Symbol'])\n        base.update_row(TABLE_WITH_STOCK_SYMBOLS, row.get('_id'), {COLUMN_WITH_STOCK_PRICE: current_price})\n        print(f\"The current price of {row['Symbol']} is: {current_price}\")\n\nif __name__ == '__main__':\n    base = Base(API_TOKEN, SERVER_URL)\n    base.auth()\n    update_stock_price()\n    print(\"Update complete.\")\n</code></pre>"},{"location":"scripts/python/objects/","title":"Predefined Objects and Methods (Python)","text":"<p>Python scripts connects to SeaTable Base with the python library seatable-api. You can find the source code on GitHub.</p> <p>This manual list all available objects and methods that are availabe within python scripts in SeaTable.</p> <p>Need specific function?</p> <p>The Python class <code>seatable_api</code> does not yet cover all available functions of the SeaTable API. If you are missing a special function, please contact us at support@seatable.io and we will try to add the missing functions.</p> <p>For a more detailed description of the used parameters, refer to the data model at the SeaTable API Reference.</p>"},{"location":"scripts/python/objects/#authentication","title":"Authentication","text":"<p>Don't forget to authenticate</p> <p>Every python script requires an authorization. All the examples does not contain the required lines of code.</p> <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n</code></pre>"},{"location":"scripts/python/objects/#base-object","title":"Base object","text":"<p>Base represents a table in SeaTable. The <code>base</code> object provide a way to read, manipulate and output data in/from your base. The following methods are available.</p>"},{"location":"scripts/python/objects/accounts/","title":"Python Objects: Account","text":"<p>Account provides an interface to list all Workspaces, add/copy/delete Bases, and obtain access rights to a Base.</p> <p>Separate Authentication required</p> <p>Account requires a separate authentication.</p> <pre><code>from seatable_api import Account\nusername = 'xiongxxx@xxx.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.cn/'\naccount = Account(username, password, server_url)\naccount.auth()\n</code></pre>"},{"location":"scripts/python/objects/accounts/#list-of-account-objects","title":"List of account objects","text":"<p>List workspaces</p> <p>Get all your workspaces and its Bases.</p> <pre><code>account.list_workspaces()\n</code></pre> <p>Add a base</p> <p>Add a base to a Workspace.</p> <pre><code>account.add_base(name, workspace_id=None)\n</code></pre> <p>Example</p> <pre><code>account.add_base('new-base', 35)\n</code></pre> <p>Copy a base</p> <p>Copy a base to a workspace.</p> <pre><code>account.copy_base(src_workspace_id, base_name, dst_workspace_id)\n</code></pre> <p>Example</p> <pre><code>account.copy_base(35, 'img-file', 74)\n</code></pre> <p>Get a base</p> <p>Get a base object. Get the Base object named base_name that exists in the workspace whose id is workspace_id.</p> <pre><code>account.get_base(workspace_id, base_name)\n</code></pre> <p>Example</p> <pre><code>base = account.get_base(35, 'new-base')\n</code></pre>"},{"location":"scripts/python/objects/big_data/","title":"Big data storage","text":"<p>Insert rows into big data storage</p> <p>Batch insert rows into big data storage.</p> <pre><code>base.big_data_insert_rows(table_name, rows_data)\n</code></pre> <p>Example</p> <pre><code>rows = [\n        {'Name': \"A\"},\n        {'Name': \"B\"}\n    ]\nbase.big_data_insert_rows('Table1', rows_data=rows)\n</code></pre>"},{"location":"scripts/python/objects/columns/","title":"Column","text":"<p>Every table in a base contains columns. The following calls are available to interact with the columns of a table.</p>"},{"location":"scripts/python/objects/columns/#list-columns","title":"List columns","text":"<p>List columns</p> <p>List all rows of the table/view.</p> <pre><code>base.list_columns(table_name, view_name=None);\n</code></pre> <p>Example</p> <pre><code>base.list_columns('Table1', default)\n</code></pre> <p>Get column by name</p> <pre><code>base.get_column_by_name(table_name, colume_name)\n</code></pre> <p>Example</p> <pre><code>base.get_column_by_name('Table1', 'Name')\n</code></pre> <p>Get columns by type</p> <pre><code>base.get_columns_by_type(table_name, column_type)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.constants import ColumnTypes\nbase.get_columns_by_type('Table1', ColumnTypes.TEXT)\n</code></pre>"},{"location":"scripts/python/objects/columns/#insert-column","title":"Insert column","text":"<p>Insert column</p> <p>Insert or append a column to a table.</p> <pre><code>base.insert_column(table_name, column_name, column_type, column_key=None, column_data=None)\n</code></pre> <p>Examples</p> <pre><code>base.insert_column('Table1', 'New long text column', 'long text')\n</code></pre> <pre><code>from seatable_api.constants import ColumnTypes\nbase.insert_column('Table1', 'Link', ColumnTypes.LINK, column_data={\n    'table':'Table1',\n    'other_table':'Test_User'\n})\n</code></pre>"},{"location":"scripts/python/objects/columns/#rename-column","title":"Rename column","text":"<p>Rename column</p> <p>Rename a column.</p> <pre><code>base.rename_column(table_name, column_key, new_column_name)\n</code></pre> <p>Example</p> <pre><code>base.rename_column('Table1', 'kSiR', 'new column name')\n</code></pre>"},{"location":"scripts/python/objects/columns/#freeze-column","title":"Freeze column","text":"<p>Freeze column</p> <p>Freeze a column.</p> <pre><code>base.freeze_column(table_name, column_key, frozen)\n</code></pre> <p>Example</p> <pre><code>base.freeze_column('Table1', '0000', True)\n</code></pre>"},{"location":"scripts/python/objects/columns/#move-column","title":"Move column","text":"<p>Move column</p> <p>Move column. In this example, the column with the key <code>loPx</code> will be moved to the right of the column <code>0000</code>.</p> <pre><code>base.move_column(table_name, column_key, target_column_key)\n</code></pre> <p>Example</p> <pre><code>base.move_column('Table1', 'loPx', '0000')\n</code></pre>"},{"location":"scripts/python/objects/columns/#modify-column-types","title":"Modify column types","text":"<p>Modify column type</p> <p>Change the column type of an existing column</p> <pre><code>base.modify_column_type(table_name, column_key, new_column_type)\n</code></pre> <p>Example</p> <pre><code>base.modify_column_type('Table1', 'nePI', 'checkbox')\n</code></pre>"},{"location":"scripts/python/objects/columns/#add-column-options","title":"Add column options","text":"<p>Add column options</p> <p>Used by single-select or multiple-select type columns to add new options.</p> <pre><code>add_column_options(self, table_name, column, options)\n</code></pre> <p>Example</p> <pre><code>base.add_column_options('Table1', 'My choices', [\n    {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n    {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n    {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre>"},{"location":"scripts/python/objects/columns/#add-column-cascade-settings","title":"Add column cascade settings","text":"<p>Add column cascade settings</p> <p>Used by single-select column, to add a limitation of child column options according to the option of parent column.</p> <pre><code>add_column_cascade_settings(table_name, child_column, parent_column, cascade_settings)\n</code></pre> <p>Example</p> <pre><code>base.add_column_cascade_settings(\"Table1\", \"single-op-col-c\", \"single-op-col\", {\n    \"aaa\": [\"aaa-1\", \"aaa-2\"], # If \u201caaa\u201d is selected by parent column, the available options of child column are \"aaa-1 and aaa-2\"\n    \"bbb\": [\"bbb-1\", \"bbb-2\"],\n    \"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre>"},{"location":"scripts/python/objects/columns/#delete-column","title":"Delete column","text":"<p>Delete column</p> <p>Deletes a column from the table.</p> <pre><code>base.delete_column(table_name, column_key)\n</code></pre> <p>Example</p> <pre><code>base.delete_column('Table1', 'bsKL')\n</code></pre>"},{"location":"scripts/python/objects/constants/","title":"Constants","text":"<p>In the script there may be some constants we need to know</p>"},{"location":"scripts/python/objects/constants/#columntypes","title":"ColumnTypes","text":"<p>ColumnTypes</p> <p>Column type, when insert/add columns, change column types, etc. need to be used</p> <pre><code>from seatable_api.constants import ColumnTypes\n\nColumnTypes.NUMBER              # number\nColumnTypes.TEXT                # text\nColumnTypes.LONG_TEXT           # long text\nColumnTypes.CHECKBOX            # checkbox\nColumnTypes.DATE                # date &amp; time\nColumnTypes.SINGLE_SELECT       # single select\nColumnTypes.MULTIPLE_SELECT     # multiple select\nColumnTypes.IMAGE               # image\nColumnTypes.FILE                # file\nColumnTypes.COLLABORATOR        # collaborator\nColumnTypes.LINK                # link to other records\nColumnTypes.FORMULA             # formula\nColumnTypes.CREATOR             # creator\nColumnTypes.CTIME               # create time\nColumnTypes.LAST_MODIFIER       # last modifier\nColumnTypes.MTIME               # modify time\nColumnTypes.GEOLOCATION         # geolocation\nColumnTypes.AUTO_NUMBER         # auto munber\nColumnTypes.URL                 # URL\n</code></pre>"},{"location":"scripts/python/objects/context/","title":"Context","text":"<p>When the script is running in the cloud, the context object provides a context environment. Here's how to use it</p>"},{"location":"scripts/python/objects/context/#server_url","title":"server_url","text":"<p>server_url</p> <p>Server URL, used to initialize Base.</p> <pre><code>context.server_url\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.server_url)\n</code></pre>"},{"location":"scripts/python/objects/context/#api_token","title":"api_token","text":"<p>api_token</p> <p>API token for access a base.</p> <pre><code>context.api_token\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.api_token)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_table","title":"current_table","text":"<p>current_table</p> <p>The name of the table that the current user is viewing when the user runs a script manually.</p> <pre><code>context.current_table\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_table)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_row","title":"current_row","text":"<p>current_row</p> <p>When the user manually runs a script, the line where the cursor is currently located.</p> <pre><code>context.current_row\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_row)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_username","title":"current_username","text":"<p>current_username</p> <p>The System ID of the user who runs the script manually (in old verison, it is called current_user_id).</p> <pre><code>context.current_username\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_username)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_id_in_org","title":"current_id_in_org","text":"<p>current_id_in_org</p> <p>The id of the user in the team, it can be set by the team admin via Web UI.</p> <pre><code>context.current_id_in_org\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_id_in_org)\n</code></pre>"},{"location":"scripts/python/objects/date-utils/","title":"Date Utility Functions","text":"<p>We provide a set of functions for the date operations based on the datetime module of python. These functions have the same behavior as the functions provided by the formula column of SeaTable.</p> <p>function import required</p> <p>To use these functions, the dateutils module must be imported.</p> <pre><code>from seatable_api.date_utils import dateutils\n</code></pre> <p>Timezone</p> <p>If the input time string has a timezone info, it will be automatically converted to local time.</p>"},{"location":"scripts/python/objects/date-utils/#date","title":"date","text":"<p>date</p> <p>Return the ISO formatted date string.</p> <pre><code>dateutils.date(year, month, day)\n</code></pre> <p>Example</p> <pre><code>custom_date = dateutils.date(2020, 5, 16)\nprint(custom_date) # 2020-05-16\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#now","title":"now","text":"<p>now</p> <p>Return the ISO formatted date time of current and accurated to seconds.</p> <pre><code>dateutils.now()\n</code></pre> <p>Example</p> <pre><code>now = dateutils.now()\nprint(now) # 2022-02-07 09:44:00\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#today","title":"today","text":"<p>today</p> <p>Return the ISO formatted current date time in string</p> <pre><code>dateutils.today()\n</code></pre> <p>Example</p> <pre><code>today = dateutils.today()\nprint(today) # 2022-02-07\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#dateadd","title":"dateadd","text":"<p>dateadd</p> <p>Addition operation for a datetime by different units such as years, months, weeks, days, hours, minutes and seconds, default by days.</p> <pre><code>dateutils.dateadd(time_str, number, inverval)\n</code></pre> <p>Example</p> <pre><code>time_str = \"2020-6-15\"\ntime_str_s = \"2020-6-15 15:23:21\"\n\ndateutils.dateadd(time_str, -2, 'years') # 2018-06-15\ndateutils.dateadd(time_str, 3, 'months') # 2020-09-15\ndateutils.dateadd(time_str_s, 44, 'minutes') # 2020-06-15 16:07:21\ndateutils.dateadd(time_str_s, 1000, 'days') # 2023-03-12 15:23:21\ndateutils.dateadd(time_str_s, 3, 'weeks') # 2020-07-06 15:23:21\ndateutils.dateadd(time_str_s, -3, 'hours') # 2020-06-15 12:23:21\ndateutils.dateadd(time_str_s, 3, 'seconds') # 2020-06-15 15:23:24\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#datediff","title":"datediff","text":"<p>datediff</p> <p>Caculation of the different between 2 date times by different units such as S, Y, D, H, M, YM, MD, YD.</p> <ul> <li>YM: The difference between the months in start_date and end_date. The days and years of the dates are ignored.</li> <li>MD: The difference between the days in start_date and end_date. The months and years of the dates are ignored.</li> <li>YD: The difference between the days of start_date and end_date. The years of the dates are ignored.</li> </ul> <pre><code>dateutils.datediff(start, end, unit)\n</code></pre> <p>Example</p> <pre><code>time_start = \"2019-6-1\"\ntime_end = \"2020-5-15\"\ndateutils.datediff(start=time_start, end=time_end, unit='S') # seconds 30153600\ndateutils.datediff(start=time_start, end=time_end, unit='Y') # years 0\ndateutils.datediff(start=time_start, end=time_end, unit='D') # days 349\ndateutils.datediff(start=time_start, end=time_end, unit='H') # hours 8376\ndateutils.datediff(start=time_start, end=time_end, unit='M') # months 11\ndateutils.datediff(start=time_start, end=time_end, unit='YM') #  11\ndateutils.datediff(start=time_start, end=time_end, unit='MD') #  14\ndateutils.datediff(\"2019-1-28\",\"2020-2-1\", unit='YD') # 3\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#eomonth","title":"eomonth","text":"<p>eomonth</p> <p>Return the last day of n months befor or after given date. Parameter months refers to n.</p> <pre><code>dateutils.eomonth(date, months)\n</code></pre> <p>Example</p> <pre><code>date = \"2022-7-4\"\ndateutils.eomonth(date, months=0) # 2022-07-31\ndateutils.eomonth(date, months=2) # 2022-09-30\ndateutils.eomonth(date, months=-5) # 2022-02-28\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#year","title":"year","text":"<p>year</p> <p>Return the year of given date.</p> <pre><code>dateutils.year(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.year(\"2019-1-1\") # 2019\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#month","title":"month","text":"<p>month</p> <p>Return the month of given date.</p> <pre><code>dateutils.month(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.month(\"2019-5-4\") # 5\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#months","title":"months","text":"<p>months</p> <p>Return the months difference of two given date.</p> <pre><code>dateutils.months(start, end)\n</code></pre> <p>Example</p> <pre><code>dateutils.months(\"2019-5-1\",\"2020-5-4\") # 12\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#day","title":"day","text":"<p>day</p> <p>Return the day of given date.</p> <pre><code>dateutils.day(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.day('2020-6-15 14:23:21') # 15\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#days","title":"days","text":"<p>days</p> <p>Return the days difference of two given date.</p> <pre><code>dateutils.days(start, end)\n</code></pre> <p>Example</p> <pre><code>dateutils.days('2019-6-1', '2020-5-15') # 349\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#hour","title":"hour","text":"<p>hour</p> <p>Return the hour of given datetime.</p> <pre><code>dateutils.hour(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.hour(\"2020-1-1 12:20:30\") # 12\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#hours","title":"hours","text":"<p>hours</p> <p>Return the hours difference of two given datetime.</p> <pre><code>dateutils.hours(start, end)\n</code></pre> <p>Example</p> <pre><code>dateutils.hours(\"2019-6-3 20:1:12\", \"2020-5-3 13:13:13\") # 8033\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#minute","title":"minute","text":"<p>minute</p> <p>Return the minutes of given datetime.</p> <pre><code>dateutils.minute(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.minute(\"2020-5-3 13:13:13\") # 13\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#second","title":"second","text":"<p>second</p> <p>Return the seconds of given datetime.</p> <pre><code>ateutils.second(date)\n</code></pre> <p>Example</p> <pre><code>ateutils.second(\"2020-5-3 13:13:33\") # 33\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#weekday","title":"weekday","text":"<p>weekday</p> <p>Return the weekday by recording 0 to 6 from Monday to Sunday.</p> <pre><code>dateutils.weekday(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.weekday(\"2019-6-3\") # 0\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isoweekday","title":"isoweekday","text":"<p>isoweekday</p> <p>Return the weekday by recording 1 to 7 from Monday to Sunday based on ISO standard.</p> <pre><code>dateutils.isoweekday(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.isoweekday(\"2019-6-3\") # 1\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#weeknum","title":"weeknum","text":"<p>weeknum</p> <p>Return the week number of given date by counting the 1st of Jan. as the first week.</p> <pre><code>dateutils.weeknum(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.weeknum('2012-1-2') # 2\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isoweeknum","title":"isoweeknum","text":"<p>isoweeknum</p> <p>Return the week number of given date based on ISO standard.</p> <pre><code>dateutils.isoweeknum(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.isoweeknum('2012-1-2') # 1\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isomonth","title":"isomonth","text":"<p>isomonth</p> <p>Return the ISO formatted month.</p> <pre><code>dateutils.isomonth(date)\n</code></pre> <p>Example</p> <pre><code>dateutils.isomonth(\"2012-1-2\") # 2012-01\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarter_from_yq","title":"quarter_from_yq","text":"<p>quarter_from_yq</p> <p>Return a DateQuarter object, and params inlclude year and quarter..</p> <pre><code>dateutils.quarter_from_yq(year, quarter)\n</code></pre> <p>Example</p> <pre><code>dateutils.quarter_from_yq(2022, 3) # DateQuarter obj:&lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarter_from_ym","title":"quarter_from_ym","text":"<p>quarter_from_ym</p> <p>Return a DateQuarter object, and params include year and month.</p> <pre><code>dateutils.quarter_from_ym(year, month)\n</code></pre> <p>Example</p> <pre><code>dateutils.quarter_from_ym(2022, 3) # DateQuarter obj:&lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#to_quarter","title":"to_quarter","text":"<p>to_quarter</p> <p>Return a DateQuarter object of a time string.</p> <pre><code>dateutils.to_quarter(time_str)\n</code></pre> <p>Example</p> <pre><code>dateutils.to_quarter(\"2022-07-17\") # DateQuarter obj: &lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarters_within","title":"quarters_within","text":"<p>quarters_within</p> <p>Return a generator which will generate the DateQuater objects between a start date and end date. You can get the last quarter in the generator if you set param <code>include_last=True</code> which is <code>False</code> by default.</p> <pre><code>dateutils.quarters_within(start, end, include_last)\n</code></pre> <p>Example</p> <pre><code>qs = dateutils.quarters_within(\"2021-03-28\", \"2022-07-17\", include_last=True)\nlist(qs) # [&lt;DateQuarter-2021,1Q&gt;, &lt;DateQuarter-2021,2Q&gt;,...., &lt;DateQuarter-2022,3Q&gt;]\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarter-operation","title":"Quarter operation","text":"<p>Quarter operation</p> <p>Some operations are supported based on DateQuater object. Please refer the examples below:</p> <pre><code>q = dateutils.quarter_from_yq(2022, 3)\n\nq.year # 2022\nq.quarter # 3\n\nq.start_date # 2022-07-01\nq.end_date # 2022-09-30\n\nq.days()  # generator, which will generate the date in such quarter\nlist(q.days()) # [datetime.date(2022, 7, 1), datetime.date(2022, 7, 2),....., datetime.date(2022, 9, 30)]\n\nq + 10 # &lt;DateQuarter-2025,1Q&gt;\nq1 = dateutils.quater_from_yq(2021, 1) # &lt;DateQuarter-2021,1Q&gt;\nq - q1 # 6\nq &lt; q1 # False\n\"2022-6-28\" in q # False\n\"2022-8-28\" in q # True\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#other-examples","title":"Other examples","text":"<p>Other examples</p> <p>The date info returned can also be assigned as a param of dateutils. Here are some examples:</p> <pre><code>dt_now = dateutils.now()  # 2022-02-07 09:49:14\n# 1. date after 10 days\ndt_10_days = dateutils.dateadd(dt_now, 10) # 2022-02-17 09:49:14\n# 2. month after 10 days\ndt_month_10_days = dateutils.month(dt_10_days) # 2\n# 3. difference between 2 days\ndt_10_days_before = dateutils.dateadd(dt_now, -10)\ndate_df = dateutils.datediff(dt_10_days_before, dt_10_days, unit=\"D\") # 20\n# 4. handle the time string with time-zone info with local timezone of \"Asia/Shanghai\" (UTC+8)\ntime_str = \"2021-07-17T08:15:41.106+00:00\"\ntime_day = dateutils.day(time_str) # 17\ntime_month = dateutils.month(time_str) # 7\ntime_year = dateutils.year(time_str) # 2021\ntime_hour = dateutils.hour(time_str) # 16\ntime_date = dateuitls.date(time_year, time_month, time_day) # 2021-07-17\n</code></pre>"},{"location":"scripts/python/objects/files/","title":"Files","text":""},{"location":"scripts/python/objects/files/#download","title":"Download","text":"<p>Download (simple method)</p> <p>Download a file to a local path.</p> <pre><code>base.download_file(file_url, save_path)\n</code></pre> <p>Example</p> <pre><code>file_url = \"https://cloud.seatable.io/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/invoice.pdf\"\nsave_path = \"/tmp/invoice.pdf\"\nbase.download_file(file_url, save_path)\n</code></pre> <p>Download (detailed method)</p> <p>This detailed method is for handling complex situations where the file is extremly large or the internet connection is slow. In this example I assume that there exist a file like <code>https://cloud.seatable.io/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/invoice.pdf</code>.</p> <pre><code>download_link = base.get_file_download_link(file_url)\n</code></pre> <p>Example</p> <pre><code>import requests\ndownload_link = base.get_file_download_link('files/2020-10/invoice.pdf')\nresponse = requests.get(download_link)\n</code></pre> <p>Download file to local</p> <pre><code>base.download_custom_file(path, save_path)\n</code></pre> <p>Example</p> <pre><code>custom_file_path = \"/Main/sky.png\"\nlocal_path = \"/Users/Desktop/sky.png\"\nbase.download_custom_file(custom_file_path, local_path)\n</code></pre>"},{"location":"scripts/python/objects/files/#upload","title":"Upload","text":"<p>Upload (simple method)</p> <p>Upload a file from your local drive, memory or a website.</p> <pre><code>base.upload_local_file(file_path, name=None, file_type='file', replace=False)\n# or\nbase.upload_bytes_file(name, content, file_type='file', replace=False)\n</code></pre> <p>Example: Upload a file from local hard drive</p> <pre><code>local_file = '/Users/Markus/Downloads/seatable-logo.png'\ninfo_dict = base.upload_local_file(local_file, name='seatable-logo.png', file_type='image', replace=True)\n</code></pre> <p>Example: Upload a file from memory</p> <pre><code>local_file = '/Users/Markus/Downloads/seatable-logo.png'\nwith open (local_file, 'rb') as f:\n  content = f.read()\ninfo_dict = base.upload_bytes_file = ('seatable-logo.png', content, file_type='image')\n</code></pre> <p>Example: Upload a file from a website</p> <pre><code>import requests\nfile_url = 'https://seatable.io/wp-content/uploads/2021/09/seatable-logo.png'\nresponse = requests.get(file_url)\ninfo_dict = base.upload_bytes_file = ('seatable-logo.png', response.content)\n</code></pre> <p>Upload (detailed method)</p> <p>Get a file upload link.</p> <pre><code>base.get_file_upload_link()\n</code></pre> <p>Example</p> <pre><code># Get the upload link and file path allocated by server\nupload_link_dict = base.get_file_upload_link()\nparent_dir = upload_link_dict['parent_path']\nupload_link = upload_link_dict['upload_link'] + '?ret-json=1'\n\n# Upload the file\nupload_file_name = \"file_uploaded.txt\"\nreplace = 1\nresponse = requests.post(upload_link, data={\n    'parent_dir': parent_dir,\n    'replace': 1 if replace else 0\n}, files={\n    'file': (upload_file_name, open('/User/Desktop/file.txt', 'rb'))\n})\n</code></pre> <p>Upload local file to custom folders</p> <pre><code>base.upload_local_file_to_custom_folder(self, local_path, custom_folder_path=None, name=None)\n</code></pre> <p>Example</p> <pre><code>local_path = \"/Users/Desktop/sky.png\"\ncustom_path = \"/Main/\"\n\ninfo_dict = base.upload_local_file_to_custom_folder(local_path\uff0c custom_path)\nrow_id = \"xxxx\"\nfile_col_name = \"File\"\nbase.update_row('Table1', row_id, {\"File\": [info_dict]})\n</code></pre>"},{"location":"scripts/python/objects/files/#list-files","title":"List files","text":"<p>List files</p> <p>List files in custom folders.</p> <pre><code>base.list_custom_assets(path)\n</code></pre> <p>Example</p> <pre><code>folder_dir = \"/Main/photos\"\nbase.list_custom_assets(folder_dir)\n# A dict will be returned including dir and file\n{\n\"dir\": [{'name': \"MyDir\"}, ...]\n\"file\":[{'name': \"sky.png\"}, ....]\n}\n</code></pre>"},{"location":"scripts/python/objects/files/#get-file-info","title":"Get file info","text":"<p>Get file info</p> <p>The data structure returned can be used to updated cells of file column.</p> <pre><code>base.get_custom_file_info(path, name)\n</code></pre> <p>Example</p> <pre><code>folder_dir = \"/Main/\"\nfile_name = \"sky.png\"\ninfo_dict = base.get_custom_file_info(path, name)\nrow_id = \"xxxx\"\nfile_col_name = \"File\"\nbase.update_row('Table1', row_id, {\"File\": [info_dict]})\n</code></pre>"},{"location":"scripts/python/objects/links/","title":"Links","text":""},{"location":"scripts/python/objects/links/#links","title":"Links","text":""},{"location":"scripts/python/objects/links/#get-link-id","title":"Get link id","text":"<p>Get link id</p> <p>Get the link id by column name</p> <pre><code>base.get_column_link_id(table_name, column_name)\n</code></pre> <p>Example</p> <pre><code>base.get_column_link_id('Table1', 'Record')\n</code></pre>"},{"location":"scripts/python/objects/links/#get-linked-records","title":"Get linked records","text":"<p>Get linked records</p> <p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.get_linked_records(table_id, link_column_key, rows)\n</code></pre> <p>Example</p> <pre><code># rows: a list, each item of the which contains a row info including row_id, offset (defualt by 0) and limit (default by 10) of link table.\nbase.get_linked_records('0000', '89o4', rows=[\n    {'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n    {'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\n# a key-value data structure returned as below\n# key: row_id of link table\n# value: a list which includes the row info of linked table\n{\n    'FzNqJxVUT8KrRjewBkPp8Q': [\n        {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n        {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n        ...\n    ],\n    'Jmnrkn6TQdyRg1KmOM4zZg': [\n        {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n        {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n         ...\n    ]\n}\n</code></pre>"},{"location":"scripts/python/objects/links/#add-link","title":"Add link","text":"<p>Add link</p> <p>Add links, link other table records. A link column must already exist.</p> <pre><code>base.add_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Example</p> <pre><code>base.add_link('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"scripts/python/objects/links/#update-link","title":"Update link","text":"<p>Update link</p> <p>Modify the info of link-type column.</p> <pre><code>update_link(self, link_id, table_name, other_table_name, row_id, other_rows_ids)\n</code></pre> <p>Example</p> <pre><code>base.update_link(\n    link_id='r4IJ',\n    table_name='Table1',\n    other_table_name='Table2',\n    row_id='BXhEm9ucTNu3FjupIk7Xug',\n    other_rows_ids=[\n      'exkb56fAT66j8R0w6wD9Qg',\n      'DjHjwmlRRB6WgU9uPnrWeA'\n    ]\n)\n</code></pre>"},{"location":"scripts/python/objects/links/#batch-update-links","title":"Batch update links","text":"<p>Batch update links</p> <p>Batch update infos of link-type columns.</p> <pre><code>base.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre> <p>Example</p> <pre><code>link_id = \"WaW5\"\ntable_name = \"Table1\"\nother_table_name =\"Table2\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n    \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n    \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\nbase.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"scripts/python/objects/links/#remove-link","title":"Remove link","text":"<p>Remove link</p> <p>Delete the link row.</p> <pre><code>base.remove_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Example</p> <pre><code>base.remove_link('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"scripts/python/objects/metadata/","title":"Metadata","text":"<p>Metadata delivers the complete structure of a base with tables, views and columns.</p> <p>get_metadata</p> <p>Get the complete metadata of a table. The metadata will not contain the concrete rows of the table.</p> <pre><code>base.get_metadata()\n</code></pre> <p>Example result of this call.</p> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre>"},{"location":"scripts/python/objects/notifications/","title":"Notifications","text":""},{"location":"scripts/python/objects/notifications/#sent-toast-notification","title":"Sent toast notification","text":"<p>Send toast notification</p> <p>Show a toast notification in SeaTable's web interface to a user.</p> <pre><code>base.send_toast_notification(username, msg, toast_type='success')\n# toast_type: one of \"success\", \"warning\" or \"danger\"\n</code></pre> <p>Example</p> <pre><code>base.send_toast_notification(\n\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\",\n\"error request\",\n\"danger\"\n)\n</code></pre>"},{"location":"scripts/python/objects/rows/","title":"Rows","text":""},{"location":"scripts/python/objects/rows/#get-row-rows","title":"Get row / rows","text":"<p>Get row</p> <p>Gets one row of a table by its row ID.</p> <pre><code>base.get_row(table_name, row_id)\n</code></pre> <p>Example</p> <pre><code>row = base.get_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre> <p>List rows</p> <p>Lists multiple rows of a table.</p> <pre><code>base.list_rows(table_name, view_name=None, start=None, limit=None)\n</code></pre> <p>The default limit is 1000 which is also the maximum number of rows this method returns.</p> <p>The query method (see below) offers more filter options and can return more rows.</p> <p>Examples</p> <pre><code>rows = base.list_rows('Table1')\nrows = base.list_rows('Table1', view_name='default', start=5, limit=20)\n</code></pre> <p>Query</p> <p>Queries a base using a SQL statement.</p> <pre><code>base.query(sql-statement)\n</code></pre> <p>Unless the SQL statement specifies a higher limit, the method returns a maximum of 100 rows. The maximum number of rows returned is 10000 no matter the limit specified in the SQL statement.</p> <p>Example with a wildcard</p> <pre><code>json_data = base.query('select * from Users') // (1)!\nprint(json.dumps(json_data, indent=2))\n</code></pre> <ol> <li>Returns for example the following:     <pre><code>[\n    {\n        \"Name\": \"Thomas\",\n        \"_id\": \"VkyADGkFRiif0bEVHd-CtA\",\n        \"_ctime\": \"2023-08-16T15:04:56.018Z\",\n        \"_mtime\": \"2023-08-17T07:02:59.585Z\",\n        \"_creator\": \"a5adebe279e04415a28b2c7e256e9e8d@auth.local\",\n        \"_last_modifier\": \"a5adebe279e04415a28b2c7e256e9e8d@auth.local\",\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false\n    },\n    {\n        \"Name\": \"Steve\",\n        \"_id\": \"UevpAVOjRrmbfqMmpsuTEg\",\n        \"_ctime\": \"2023-08-17T07:03:00.292Z\",\n        \"_mtime\": \"2023-08-17T07:03:00.801Z\",\n        \"_creator\": \"a5adebe279e04415a28b2c7e256e9e8d@auth.local\",\n        \"_last_modifier\": \"a5adebe279e04415a28b2c7e256e9e8d@auth.local\",\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false\n    },\n]\n</code></pre></li> </ol> <p>Example with WHERE</p> <pre><code>json_data = base.query('select name, price from Bill where year = 2021')\nprint(json.dumps(json_data, indent=2))\n</code></pre> <p>Example with ORDER BY</p> <pre><code>json_data = base.query('select name, price, year from Bill order by year')\nprint(json.dumps(json_data, indent=2))\n</code></pre> <p>Example with GROUP BY</p> <pre><code>json_data = base.query('select name, sum(price) from Bill group by name')\nprint(json.dumps(json_data, indent=2))\n</code></pre> <p>Example with DISTINCT</p> <pre><code>json_data = base.query('select distinct name from Bill')\nprint(json.dumps(json_data, indent=2))\n</code></pre>"},{"location":"scripts/python/objects/rows/#add-rows","title":"Add rows","text":"<p>By default, the default values specified for the table columns in the webinterface do not apply when adding/appending rows via API. In order to apply the default values, add <code>apply_default=True</code>as a function parameter. If set to True, the default values can be overwritten by specifying alternative values in <code>row_data</code>. </p> <p>Append row</p> <p>Appends one row to a table.</p> <pre><code>base.append_row(table_name, row_data, apply_default=False)\n</code></pre> <p>Example</p> <pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\n\nbase.append_row('Table1', row_data, apply_default=True)\n</code></pre> <p>Batch append rows</p> <p>Appends multiple rows to a table.</p> <pre><code>base.batch_append_rows(table_name, rows_data, apply_default=False)\n</code></pre> <p>Example</p> <pre><code>rows_data = [{\n    'Name': 'Ron',\n    'Birthday': '1975-01-01'\n}, {\n    'Name': 'Richard',\n    'Birthday': '1978-10-08'\n}]\n\nbase.batch_append_rows('Table6', rows_data)\n</code></pre> <p>Insert row</p> <p>Inserts one row to a table under a anchor row.</p> <pre><code>base.insert_row(table_name, row_data, anchor_row_id, apply_default=False)\n</code></pre> <p>Example</p> <pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\nbase.insert_row('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"scripts/python/objects/rows/#update-row","title":"Update row","text":"<p>Update row</p> <p>Updates one row in a table.</p> <pre><code>base.update_row(table_name, row_id, row_data)\n</code></pre> <p>Example</p> <pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\nbase.update_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\n</code></pre> <p>Batch update rows</p> <p>Updates multiple rows in a table.</p> <pre><code>base.batch_update_rows(table_name, rows_data)\n</code></pre> <p>Example</p> <pre><code>rows_data = [{\n    \"row_id\" : \"fMmCFyoxT4GN5Y2Powbl0Q\",\n    \"row\" : {\n        \"Name\" : \"Ron\",\n        \"Height\" : \"183\"\n        }\n}, {\n    \"row_id\" : \"cF5JTE99Tae-VVx0BGT-3A\",\n    \"row\" : {\n        \"Name\" : \"Richard\",\n        \"Height\" : \"184\"\n        }\n}, {\n    \"row_id\" : \"WP-8rb5PSUaM-tZRmTOCPA\",\n    \"row\" : {\n        \"Name\" : \"Regina\",\n        \"Heigt\" : \"173\"\n        }\n}]\nbase.batch_update_rows('Table1', rows_data)\n</code></pre>"},{"location":"scripts/python/objects/rows/#delete-rows","title":"Delete rows","text":"<p>Delete row</p> <p>Deletes one row from a table.</p> <pre><code>base.delete_row(table_name, row_id)\n</code></pre> <p>Example</p> <pre><code>base.delete_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre> <p>Batch delete rows</p> <p>Deletes multiple rows from a table.</p> <pre><code>base.batch_delete_rows(table_name, row_ids)\n</code></pre> <p>Example</p> <pre><code>del_rows = rows[:3]\nrow_ids = [row['_id'] for row in del_rows]\nbase.batch_delete_rows('Table1', row_ids)\n</code></pre>"},{"location":"scripts/python/objects/tables/","title":"Table","text":"<p>List tables</p> <p>Get the active table.</p> <pre><code>base.list_tables()\n</code></pre> <p>Example <pre><code>tables = base.list_tables()\n</code></pre></p> <p>Get a table by name</p> <p>Get the active table.</p> <pre><code>base.get_table_by_name(table_name)\n</code></pre> <p>Example <pre><code>base.get_table_by_name('Table1')\n</code></pre></p> <p>Add table</p> <p>Add a table into a base.</p> <pre><code>base.add_table(table_name, lang='en', columns=[]);\n</code></pre> <p>Example <pre><code>base.add_table('Investigation', lang='zh-cn')\n</code></pre></p> <p>Rename table</p> <p>Add a table into a base.</p> <pre><code>base.rename_table(table_name, new_table_name)\n</code></pre> <p>Example <pre><code>base.rename_table('Table1', 'Table11')\n</code></pre></p> <p>Delete table</p> <p>Add a table into a base.</p> <pre><code>base.delete_table(table_name)\n</code></pre> <p>Example <pre><code>base.delete_table('Table1')\n</code></pre></p>"},{"location":"scripts/python/objects/users/","title":"User","text":""},{"location":"scripts/python/objects/users/#get_user_info","title":"get_user_info","text":"<p>Get a user info</p> <p>Returns the name of the user and his <code>id_in_org</code>.</p> <pre><code>base.get_user_info(username)\n</code></pre> <p>Example</p> <pre><code>base.get_user_info(\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\")\n</code></pre>"},{"location":"scripts/python/objects/views/","title":"Views","text":"<p>Every table in a base contains views. The following calls are available to interact with the views of a table.</p>"},{"location":"scripts/python/objects/views/#list-views","title":"List views","text":"<p>List views</p> <pre><code>base.list_views(table_name)\n</code></pre> <p>Example</p> <pre><code>base.list_views('Table1')\n</code></pre> <p>Get view by name</p> <pre><code>base.get_view_by_name(table_name, view_name)\n</code></pre> <p>Example</p> <pre><code>base.get_view_by_name('Table1', 'MyView')\n</code></pre>"},{"location":"scripts/python/objects/views/#add-view","title":"Add view","text":"<p>Add view</p> <pre><code>base.add_view(table_name, view_name)\n</code></pre> <p>Examples</p> <pre><code>base.add_view('Table1', 'New view')\n</code></pre>"},{"location":"scripts/python/objects/views/#rename-view","title":"Rename view","text":"<p>Rename view</p> <pre><code>base.rename_view(table_name, view_name, new_view_name)\n</code></pre> <p>Example</p> <pre><code>base.rename_view('Table1', 'MyView', 'NewView')\n</code></pre>"},{"location":"scripts/python/objects/views/#delete-view","title":"Delete view","text":"<p>Delete view</p> <pre><code>base.delete_view(table_name, view_name)\n</code></pre> <p>Example</p> <pre><code>base.delete_view('Table1', 'MyView')\n</code></pre>"},{"location":"scripts/python/objects/websockets/","title":"Websockets","text":""},{"location":"scripts/python/objects/websockets/#socketio","title":"socketIO","text":"<p>socketIO</p> <p>By using websocket, you can get realtime data update notifications of a base.</p> <pre><code>from seatable_api import Base\n\nserver_url = 'https://cloud.seatable.cn'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\nbase.socketIO.wait()\n</code></pre> <p>When Base has data updated, the following will be output in the terminal.</p> <pre><code>2022-07-19 11:48:37.803956 [ SeaTable SocketIO connection established ]\n2022-07-19 11:48:39.953150 [ SeaTable SocketIO on UPDATE_DTABLE ]\n{\"op_type\":\"insert_row\",\"table_id\":\"0000\",\"row_id\":\"YFK9bD1XReSuQ7WP1YYjMA\",\"row_insert_position\":\"insert_below\",\"row_data\":{\"_id\":\"RngJuRa0SMGXyiA-SHDiAw\",\"_participants\":[],\"_creator\":\"seatable@seatable.com\",\"_ctime\":\"\",\"_last_modifier\":\"seatable@seatable.com\",\"_mtime\":\"\"},\"links_data\":{}}\n</code></pre> <p>After getting data update notifications, performance self-defined actions by listen to the UPDATE_DTABLE event.</p> <pre><code>import json\nfrom seatable_api import Base\nfrom seatable_api.constants import UPDATE_DTABLE\n\nserver_url = 'https://cloud.seatable.cn'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\ndef on_update(data, index, *args):\n    try:\n        operation = json.loads(data)\n        print(operation)\n        op_type = operation['op_type']\n        table_id = operation['table_id']\n        row_id = operation['row_id']\n        # ... do something\n    except Exception as e:\n        print(e)\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\nbase.socketIO.on(UPDATE_DTABLE, on_update)\nbase.socketIO.wait()\n</code></pre>"},{"location":"scripts/sql/functions/","title":"SQL function reference","text":"<p>You can use supported functions in SQL query statements.</p>"},{"location":"scripts/sql/functions/#functions-for-sql","title":"Functions for SQL","text":"<p>With functions you can transform, calculate, combine or merge the values of other columns from the current table. On top of that, functions can refer to each other.</p> <p>The functions supported in SQL are roughly the same as the set of functions supported by formulas in SeaTable.</p> <p>The basic syntax of functions is as follows:</p> <pre><code>FunctionName(parameters...)\n</code></pre> <p>The parameters can be number,string,constants,column name or other functions. Column name cannot be an alias. If the column name contains \"-\", you can use \"`\" to enclose it.</p> <p>Currently SQL query offers the following functions:</p> <ul> <li>Operands</li> <li>Mathematical functions</li> <li>Text functions</li> <li>Date functions</li> <li>Geo functions</li> <li>Logical functions</li> <li>Statistical functions</li> </ul> <p>In this article, we will show you a complete overview of all functions with examples. If you are looking for a specific function, you can use the Ctrl+F to quickly find an entry on this page.</p>"},{"location":"scripts/sql/functions/#functions-with-examples","title":"Functions with examples","text":"<p>You can use the following constants in the function:</p> OPERATOR DESCRIPTION INPUT RESULT e Returns the Euler number e=2.71828... e+1 3.71828183 pi Returns the circle number Pi. pi 3.14159265 true() Returns the logical value 'true'. true() true false() Returns the logical value 'false'. false() false"},{"location":"scripts/sql/functions/#operands","title":"Operands","text":"<p>Parameters must be strings or numbers. If a number is passed to a parameter that expects a string, it'll be converted to string, and vice versa.</p> OPERATOR DESCRIPTION INPUT RESULT add(num1,num2) Adds two numeric values (num1 and num2) and returns the result. add(1,2) 3 subtract(num1,num2) Subtracts one numeric value (num2) from another (num1). subtract(5,4) 1 multiply(num1,num2) Multiplies two numeric values. multiply(3,4) 12 divide(num1,num2) Divides one numeric value (num1) by another (num2). divide(3,2) 1.5 mod(num1,num2) Calculates the remainder of a division. mod(15,7) 1 power(num1,num2) Calculates the power (num2) of a number (num1). power(3,2) 9 greater(num1,num2) Checks if a numeric value (num1) is greater than another (num2) and returns the logical value 'true' or 'false'. greater(2,3) false lessthan(num1,num2) Checks if a numeric value (num1) is less than another (num2) and returns the logical value 'true' or 'false'. lessthan(2,3) true greatereq(num1,num2) Checks whether a numeric value (num1) is greater than or equal to another (num2) and returns the logical value 'true' or 'false'. greatereq(2,3) false lessthaneq(num1,num2) Checks whether a numeric value (num1) is less than or equal to another (num2) and returns the logical value 'true' or 'false'. lessthaneq(2,3) false equal(num1,num2) Checks if two values (number1, number 2) are equal and returns the logical value 'true' or 'false'. equal(`Old price`, `New price`) false unequal Checks whether two values (number1, number2) are not equal and returns the logical value 'true' or 'false'. unequal(`Old price`, `New price`) true concatenate(string1, string2, ...) Combines several character strings (string1, string 2, ...) into one character string. concatenate(`Supplier`, \" has the product \", `Product`) Microsoft has the product Windows"},{"location":"scripts/sql/functions/#mathematical-functions","title":"Mathematical functions","text":"<p>Parameters must be numbers. If string is passed to a parameter, it'll be converted to number.</p> OPERATOR DESCRIPTION INPUT RESULT abs(number) Returns the absolute value of a number. abs(-2) 2 ceiling(number, significance) Rounds a number to the nearest integer or to the nearest multiple of the specified significance. If either argument is non-numeric, the formula returns an empty value. ceiling(2.14) 3 If the number is an exact multiple of the significance, then no rounding occurs. If the number and the significance are negative, then the rounding is away from 0. If the number is negative and the significance is positive, then the rounding is towards 0. ceiling(-2.14, 4) 0 even(number) Assigns a real number to the nearest larger even number. even(2.14) 4 exp(number) Exponential function for Euler's number e. Returns the value of e given high (number). expr(1) 2.71828... floor(number, significance) Rounds a number to the nearest integer or to the nearest multiple of the specified significance. If either argument is non-numeric, the formula returns an empty value. floor(2.86) 2 If the number is an exact multiple of the significance, then no rounding takes place. If the sign of the number is positive, then the rounding is towards 0. If the sign of the number is negative, then the rounding is away from 0. floor(-3.14, 5) -5 int(number) Assigns the nearest smaller integer to a real number. int(-3.14) -4 lg(number) Logarithm function (number) with 10 as base. lg(100) 2 log(number, base) Logarithm function (number) with definable base. log(81, 3) 4 But if no base is given, this function works exactly like lg(), with 10 as base. log(1000) 3 odd(number) Assigns a real number to the nearest larger odd number. odd(-2.14) -1 round(number, digits) Rounds a number to the nearest integer. If no decimal place (digits) is specified, the number is rounded to the 1st digit to the left of the decimal point. round(3.14) 3 If a positive decimal place (digits) is given, the digit to the right of the decimal point is rounded. round(3.14, 1) 3.1 If a negative decimal place (digits) is given, is rounded to the left of the decimal point. round(3.14, -3) 0 rounddown(number, digits) Rounds a number towards zero. If no decimal place (digits) is given, the number is rounded to the 1st digit left of the decimal point. rounddown(3.12, 1) 3.1 roundup(number, digits) Rounds a number from zero to the nearest whole number. If no decimal place (digits) is given, the number is rounded to the 1st digit left of the decimal point. roundup(-3.15) -4 sign(number) Checks whether a number is greater, equal or less than 0. Returns the values 1, 0 and -1 respectively. In other words: it returns the sign of a number, for '+', 'zero' and '-' with 1, 0, and -1 respectively. sign(-2) -1 sqrt(number) Returns the square root of a number. sqrt(81) 9"},{"location":"scripts/sql/functions/#text-functions","title":"Text functions","text":"OPERATOR DESCRIPTION INPUT RESULT exact(string1, string2) Checks whether two character strings (string1, string2) are exactly identical. Returns the values 'true' or 'false' respectively. Case sensitive. exact('SeaTable', 'Seatable') false find(findString, sourceString, startPosition) Returns the start position of a string (findString) within another string (sourceString). It is case sensitive. Without find, 0 is returned. If the start position (startPosition) is given as decimal, it is rounded down. If the cell in the column for the keyword (findString) is still empty, 1 is returned. If the cell in the column for the target string (sourceString) is still empty, an empty value ('') is returned. find('Sea', 'seaTable', 1) 0 The search will start from the given 'startPosition'. This 'startPosition' has no influence on the result: it always returns the absolute start position. If the 'startPosition' of the character string to be searched for (findString) is given after the actual start position of the character string (sourceString), 0 is returned, since nothing was found from this position. find('table', 'big table', 4) 5 left(string, count) Returns the specified number (count) of characters at the beginning of a string. left('SeaTable', 3) Sea len(string) Returns the number of characters in a string. len('SeaTable') 8 lower(string) Converts a character string to lower case letters. lower('German) german mid(string, startPosition, count) Returns the specified number (count) of characters from the specified start position (startPosition) of a string. mid('SeaTable is the best', 1, 8) SeaTable Start position (startPosition) and count must not be empty, negative or zero. However, if start position (startPosition) and number (count) are given as decimal, they are rounded down. Too much count is ignored. mid('SeaTable is the best.', 10.9, 27.3) is the best. replace(sourceString, startPosition, count, newString) Replaces a part (count) of a character string (sourceString) from a certain start position (startPosition) with another character string (newString). The number (count) of characters is only taken into account for the old string (sourceString), but not for the new string (newString). replace('SeaTable is the best.', 1, 8, 'Seafile') Seafile is the best. If number (count) is given as zero, the new string (newString) is simply added to the old string (sourceString) from the start position (startPosition). replace('SeaTable is the best.', 1, 0, 'Seafile') SeafileSeaTable is the best. rept(string, number) Repeats a string as often (number) as specified. rept('Sea ', 3) SeaSeaSea right(string, count) Returns the specified number (count) of characters at the end of a string. right('SeaTable', 5) Table search(findString, sourceString, startPosition) Returns the start position of a string (findString) within another string (sourceString). It is not case-sensitive. Without find, 0 is returned. If the start position (startPosition) is given as decimal, it is rounded down. If the cell in the column for the keyword (findString) is still empty, 1 is returned. If the cell in the column for the target string (sourceString) is still empty, an empty value ('') is returned. search('Sea', 'seaTable', 1) 1 The search will start from the given 'startPosition'. This 'startPosition' has no influence on the result: it always returns the absolute start position. If the 'startPosition' of the character string to be searched for (findString) is given after the actual start position of the character string (sourceString), 0 is returned, since nothing was found from this position. search('table', 'big table', 6) 0 substitute(sourceString, oldString, newString, index) Replaces existing text (oldString) with new text (newString) in a string (sourceString). If there is more than one text (oldString) in the string (sourceString), only the 'index'-th text is replaced. The text is case-sensitive. substitute('SeaTableTable', 'Table', 'file', 1) SeafileTable If the index is given as 0 or not, all found text (oldString) will be replaced by the new text (newString). substitute('SeaTableTable', 'Table', 'file') Seafilefile T(value) Checks whether a value is text. If so, the text is returned. If no, the return value is empty. T('123') 123 text(number, format) Converts a number into text and formats it in the specified format. The format can be percent and number as well as dollar, euro and yuan. text(150, 'euro') \u20ac150 When a number is converted directly to percent, its absolute value is retained. In other words, 50 is converted into 5000%. But if you want 50%, you have to divide the number by 100 before the conversion. text(50, 'percent') 5000% trim(string) Removes spaces at the beginning and end of a string. trim(' SeaTable ') SeaTable upper(string) Converts a string to uppercase letters. upper('German) GERMAN value(string) Converts a text (string) representing a number into a number. value('123') 123"},{"location":"scripts/sql/functions/#date-functions","title":"Date functions","text":"<p>When passing a parameter with time or date type, you can specify a contant in \"2021-09-01 12:00:01\" or \"2021-09-01\" format. When you query the result of a date function in SQL, the result will be converted to a string in RFC3339 format, e.g. \"2021-09-03T00:00:00+02:00\". Please note that if a date function returns a date type, it cannot be used as parameter for text or maths functions.</p> OPERATOR DESCRIPTION INPUT RESULT date(year, month, day) Returns a date in international format (ISO) from entered year, month and day. If the year is entered with two digits, it is automatically understood as a year in the 1900s. If the number of the month or day is too large (greater than 12 or 31 respectively), these months or days are automatically converted to the next year or month. date(2021, 1, 3) 2021-01-03T00:00:00+02:00 dateAdd(date, count, unit) Adds the specified number (count) of years ('years'), months ('months'), weeks ('weeks'), days ('days'), hours ('hours'), minutes ('minutes') or seconds ('seconds') to a date/time ('date'). dateAdd('2020-02-03', 2, 'days') 2020-02-05T00:00:00+02:00 Tip: if you want to add a complex duration (count) such as 1 day 12 hours, you can convert it to e.g. 24+12=36 hours ('hours') and enter it into the formula as a uniform duration (count). The duration is converted to the smallest unit: in this case, hours. dateAdd('2020-09-04 13:05:18', 36, 'hours') ODER dateAdd(`form submission`, 36, 'hours') 2020-09-06T01:05:18+02:00 datedif(startDate, endDate, unit) Calculates the seconds, days, months, or years between two date values. The optional unit argument can be one of the following: S (seconds), D (full days), M (full months), Y (full years), YD (full days, ignoring years), YM (full months, ignoring days and years), MD (full days, ignoring months and years). If the startDate is empty, a default value of \"1900-01-01\" will be set. If both date values are empty, it will return 0. dateDif('2018-01-01', '2020-01-01') 2 The optional unit argument can be one of the following: S (seconds), D (full days), M (full months), Y (full years), YD (full days, ignoring years), YM (full months, ignoring days and years), MD (full days, ignoring months and years). dateDif('2019-10-11', '2020-12-12', 'M') 14 day(date) Returns the day of a date as a number. The returned number is between 1 and 31. day('2020-01-03) 3 eomonth(startDate, months) Determines the date of the last day of the month that is the specified number (months) of months after the specified date (startDate). If the number (months) is given as 0, the last day of the month is simply determined. eomonth('2020-01-01', 1) 2020-02-29T00:00:00+02:00 If the number (months) is given as negative, the date of the last day of the month that contains the absolute number (months) of months before the specified date (startDate) is determined. eomonth('2020-01-01', -1) 2019-12-31T00:00:00+02:00 hour(date) Returns the hour of a date as a number. The number returned is between 0 and 23. hour('2020-02-14 13:14:52) 13 If no hour is contained in the time specification (date), 0 is returned. hour('2020-02-14) 0 hours(startDate, endDate) Returns the number of hours between two date values (startDate and endDate). The minutes in the date values are not taken into account. hours('2020-02-14 13:14', '2020-02-14 15:14') 2 If no hours are included in the time specification (startDate or endDate), 0 o'clock on this day is automatically assumed. hours('2020-02-14', '2020-02-14 15:14') 15 minute(date) Returns the minutes of a time specification (date) as a number. The number returned is between 0 and 59. minute('2020-02-14 13:14:52 14 If no minutes are included in the time (date), 0 is returned. minute('2020-02-14) 0 month(date) Returns the month of a date as a number. The returned number is between 1 (January) and 12 (December). month('2020-02-14 13:14:52) 2 months(startDate, endDate) Returns the number of months between two date values (startDate and endDate). The days and time in the date values are not taken into account. months('2020-02-01 13:14', '2020-03-31 15:54') 1 If no month is given in the date values (startDate, endDate), January is automatically assumed to be the month. months('2020', '2021') 12 networkdays(startDate, endDate, holiday1, holiday2, ...) Returns the number of full working days between two dates (startDate and endDate). You can also define holidays other than Saturday and Sunday (holiday1, holiday2, etc.), which are also deducted. If you do not want to include public holidays, you can simply omit these parameters. networkdays('2020-01-01', '2020-01-07','2020-01-01') 4 Please note that the specified last day (endDate) is also included in the formula. That means, as in this formula, three working days are counted: the 7th, 8th and 9th of September, 2020. networkdays('2020-09-07', '2020-09-09') 3 now() Returns the current date and time. This column is only updated automatically when the Base is reloaded. now() 2020-09-07T12:59+02:00 second(date) Returns the seconds of a time (date) as a number. The number returned is between 0 and 59. second('2020-02-14 13:14:52') 52 today() Returns the current date. This column is only updated automatically if the Base has been reloaded. today() 2020-09-07T00:00:00+02:00 This function is handy for calculating time between a certain date &amp; time and now. On each reload or recalculation of the Base, the calculation is updated. networkdays('2020-09-01', today()) 4 weekday(date, weekStart) Returns the weekday of a date as a number. The returned number between 1 and 7, where you can define the first day of the week (weekStart): Monday ('Monday') or Sunday ('Sunday' or omitted, since the start as Sunday is the default). A third option is not possible. Upper/lower case is not considered. weekday('2020-01-01', 'Monday') 3 If no 'weekStart' is given or if a 'weekStart' other than 'Monday' or 'Sunday' is given, it is always assumed to be 'Sunday'. So if it should be 'Monday', enter 'Monday'; if it should be 'Sunday', you can omit this parameter. weekday('2020-01-01', 'Thursday') OR weekday('2020-01-01') 4 weeknum(date, return_type) Returns the absolute week number of a date as a number. The returned number is between 1 and 53, where you can define the first day of the week (return_type). Enter the number 1 or 2, or 11 to 17, and 21 as \"return_type\" to define the start of a week: 1/Sunday\u30012/Monday\u300111/Monday\u300112/Tuesday\u300113/Wednesday\u300114/Thursday\u300115/Friday\u300116/Saturday\u300117/Sunday. If you want the week number to be returned according to ISO standard, specify the number of 21 as \"return_type\", or use the function isoweeknum. weeknum('2020-01-12', 11) 2 If no 'return_type' is given, it is always assumed to be 'Sunday'. weeknum('2020-01-12') 3 year(date) Returns the year of a date as a number. year('2020-01-01') 2020 startofweek(date, weekStart) Returns the first day of the week in which the date is located. WeekStart defaults to sunday, or it can be set to monday. startofweek('2021-04-28') 2021-4-25T00:00:00+02:00 quarter(date) Returns the quarter of the date, the return value is 1, 2, 3, 4. quarter('2021-01-01') 1 isodate(date) Returns the ISO string representation of the date. isodate('2021-01-01 11:00:00') 2021-01-01 isomonth(date) Returns the ISO string representation of the year and month isomonth('2021-01-01 11:00:00') 2021-01"},{"location":"scripts/sql/functions/#geo-functions","title":"Geo functions","text":"OPERATOR DESCRIPTION INPUT RESULT country(geolocation) Returns the country or region of a Geolocation column. (Since version 5.1.0) country(column_name) Germany"},{"location":"scripts/sql/functions/#logical-functions","title":"Logical functions","text":"OPERATOR DESCRIPTION INPUT RESULT and(logical1, logical2, ...) Checks if all arguments (logical1, logical2, ...) are true (valid, not empty and not equal to zero). If yes, 'true' is returned, otherwise 'false'. and(1, '', 2) false if(logical, value1, value2) Checks if an argument (logical) is true and if yes, returns the first value (value1) and if no, returns the second value (value2). if(1&gt;2, 3, 4) 4 For the condition (logical) only a comparison with is allowed. If you enter only condition (logical) and the first value (value1): it will return the first value (value1) if the condition (logical) is true; and it will return an empty value ('') if the condition (logical) is false. if(`Budget`&gt;`Price`, 'Yes') Yes ifs(logical1, value1, logical2, value2, ...) Checks if one or more conditions (logical1, logical2, ...) are true and returns a value (value1, value2, ...) that matches the first TRUE condition. ifs( 1&gt;2, 3, 5&gt;4, 9) 9 not(boolean) Inverts the logical value (boolean). In other words: converts 'true' to 'false' and 'false' to 'true'. not(and(1, '', 2)) true or(logical1, logical2, ...) Checks if at least 1 of the arguments (value1, value2, ...) is true (valid, not empty and not equal to zero), and returns 'true' in this case. If all arguments are false, then returns 'false'. or(1,'',2) true switch(logical, matcher1, value1, matcher2, value2, ..., default) Evaluates an expression (logical) against a list of values (matcher) and returns the result (value) corresponding to the first matching value. If there is no match, an optional default value is returned. At least 3 parameters (logical, matcher, value) must be specified. switch(`grades`, 1, 'very good', 2, 'good', 3, 'satisfactory', 4, 'passed', 'failed') very good If there are several identical values in the value list (matcher), only the first hit is taken into account. switch(int(68/10), 6, 'OK', 6, 'KO') OK xor(logical1, logical2, ...) Returns the contravalence of all arguments. In other words, checks if the number of true arguments is (logical) odd and returns 'true'. xor(1, 0, 2\\&lt;1) false"},{"location":"scripts/sql/functions/#statistical-functions","title":"Statistical functions","text":"OPERATOR DESCRIPTION INPUT RESULT average(number1, number2, ...) Returns the average of the numbers (number1, number2, ...) average(1, 2, 3, 4, 5) 3 counta(textORnumber1, textORnumber2, ...) Counts the number of non-empty cells (textORnumber1, textORnumber2, ...). These cells can be text or numbers. In this example, 1 and 2 are numbers, '3' is text, and '' is an empty value. counta(1, '', 2, '3') 3 countall(textORnumber1, textORnumber2, ...) Counts the number of elements (textORnumber1, textORnumber2, ...) including numbers (1, 2), text ('3') and empty cells (''). countall(1, '', 2, '3') 4 countblank(textORnumber1, textORnumber2, ...) Counts the number of empty cells. countall(1, '', 2, '3') 1 countItems(column) Counts the number of items in a column. The supported column types are multiple select, collaborator, file, image. (available since version 2.7.0) countItems(column_name) 2"},{"location":"scripts/sql/reference/","title":"SQL in SeaTable","text":"<p>You can use SQL to query data in SeaTable. If some tables in a base are archived, archived rows are also queried, as well as rows that are not archived yet.</p>"},{"location":"scripts/sql/reference/#supported-sql-syntax","title":"Supported SQL Syntax","text":"<p>Currently only <code>select</code>, <code>insert</code>, <code>update</code>, and <code>delete</code> statements are supported. (<code>insert</code>, <code>update</code>, and <code>delete</code> statements require version 2.7 or later)</p> <p>The syntax of <code>select</code> statement is:</p> <pre><code>SELECT [DISTINCT] fields FROM table_name [WhereClause] [GroupByClause] [HavingClause] [OrderByClause] [Limit Option]\n</code></pre> <p>Since version 4.3, basic JOIN query is supported, for example:</p> <pre><code>SELECT ... FROM table1, table2 WHERE table1.column1 = table2.column2 AND ...\n</code></pre> <p>The JOIN query has the following restrictions:</p> <ul> <li>Only <code>INNER JOIN</code> is supported, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code> are not supported.</li> <li>Tables in the <code>FROM</code> clause should be unique (no duplicate tables).</li> <li>Each table in the <code>FROM</code> clause should be associated with at least one join condition.</li> <li>Join conditions should be placed in the <code>WHERE</code> clause, and connected with <code>AND</code>s.</li> <li>Join conditions can only use equality operator on columns, e.g. <code>table1.column1 = table2.column2</code>.</li> <li>Columns in join conditions must be indexed, unless the table is not archived.</li> </ul> <p>Notes:</p> <ul> <li>Most SQL syntax can be used in where clause, including arithmetic expressions, comparison operators, <code>[NOT] LIKE</code>, <code>IN</code>, <code>BETWEEN ... AND ...</code>, <code>AND</code>, <code>OR</code>, <code>NOT</code>, <code>IS [NOT] TRUE</code>, <code>IS [NOT] NULL</code>.</li> <li>Arithmetic expressions only support numbers.</li> <li><code>LIKE</code> only supports strings. The key word <code>ILIKE</code> can be used instead of <code>LIKE</code> to make the match case-insensitive.</li> <li><code>BETWEEN ... AND ...</code> only supports numbers and time.</li> <li>Time constants should be strings in ISO format (e.g. \"2020-09-08 00:11:23\"). Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\").</li> <li><code>GROUP BY</code> uses strict syntax. The selected fields must appear in group by list, except for aggregation functions (<code>COUNT</code>, <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>AVG</code>) and formulas (see extended syntax section below).</li> <li><code>HAVING</code> filters rows resulting from the group by clause. Only fields referred in the \"GROUP BY\" clause or aggregation functions (such as \"SUM\") can be used in having clause. Other syntax is the same as specified for the where clause.</li> <li>Fields in \"order by\" list must be a column or an expression in the selected fields. For example, <code>select a from table order by b</code> is invalid; while <code>select a from table order by b</code> and <code>select abs(a), b from table order by abs(a)</code> are valid.</li> <li>Limit options are in MySQL format. The general syntax is <code>LIMIT ... OFFSET ...</code>. You may omit <code>LIMIT</code> or <code>OFFSET</code>.</li> <li>Field alias with <code>AS</code> syntax is supported. For example, <code>select table.a as a from table</code> returns rows whose first column is keyed by \"a\". There are two notes:</li> <li>Field alias can be referred in <code>group by</code>, <code>having</code> and <code>order by</code> clauses. E.g., <code>select t.registration as r, count(*) as c from t group by r having c &gt; 100</code> is valid.</li> <li>Field alias cannot be referred in <code>where</code> clause. E.g., <code>select t.registration as r, count(*) from t group by r where r &gt; \"2020-01-01\"</code> will report syntax error.</li> </ul> <p>Each returned row is a JSON map. The keys of the maps are the column keys, NOT column names. To use column names as keys, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE. For JOIN query, the keys of row maps match the \"id\" fields (not the \"key\" or the \"name\"). Those column fields (e.g. id, key, name) are returned under <code>metadata</code> array in query response.</p> <p>The syntax of <code>insert</code>, <code>update</code>, and <code>delete</code> statements are:</p> <pre><code>INSERT INTO table_name [column_list] VALUES value_list [, ...]\n\nUPDATE table_name SET column_name = value [, ...] [WhereClause]\n\nDELETE FROM table_name [WhereClause]\n</code></pre> <ul> <li><code>column_list</code> is a list of column names surrounded by parentheses. If omitted, it defaults to all updatable columns.</li> <li><code>value_list</code> is a list of values surrounded by parentheses. Values must be in the same order as the column list, for example: <code>(1, \"2\", 3.0)</code>.</li> <li>Multivalued columns, such as multiple-select column type, requires values to be surrounded by parentheses, for example: <code>(1, \"2\", 3.0, (\"foo\", \"bar\"))</code>.</li> <li>Values of single-select and multiple-select column types must be option names, not option keys.</li> <li><code>WhereClause</code> is optional. If omitted, all rows in the table are included.</li> <li><code>INSERT</code> statement only supports bases that have been archived. The rows will be inserted into big-data storage. It'll return error if the base is not archived yet. If you want to insert rows into such bases, please use API for adding rows (e.g. Python API).</li> <li><code>UPDATE</code> and <code>DELETE</code> statements allows updating/deleting rows in both normal and big-data storage.</li> </ul> <p>Note: these column types are not allowed to insert or update:</p> <ul> <li>built-in columns, such as <code>_id</code>, <code>_ctime</code>.</li> <li>image, file, formula, link, link-formula, geolocation, auto-number, button</li> </ul>"},{"location":"scripts/sql/reference/#data-types","title":"Data Types","text":"<p>Below is mapping from SeaTable column types to SQL column types.</p> SeaTable Column Type SQL Column Type Query result format Use in WHERE clause Use in GROUP BY / ORDER BY clause text String Supported Supported. long-text String Raw text in Markdown forms Supported Supported number Float Supported Supported single-select String Returned rows contain the option key by default. To return the option name, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE. Refer an option by its name. E.g. <code>where single_select = \"New York\"</code>. Order by the definition order of the options multiple-select List of strings Returned rows contain the option key by default. To return the option name, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE. Refer an option by its name. E.g. <code>where multi_select = \"New York\"</code>. More details in \"List Types\" section below. More details in \"List Types\" section below. checkbox Bool Supported Supported date Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported image List of URL for images A JSON array with image URLs as elements Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. file Will be returned as JSON format string when queried. Not supported Not Supported Not Supported collaborator List of user IDs Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with Seatable APIs. Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. link to other records List of linked rows Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. formula The type depends on the return value of the formula. Depends on the type of the return value Depends on the type of the return value Depends on the type of the return value _creator User ID as string Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with Seatable APIs. Supported Supported _ctime Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported _last_modifier User ID as string Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with Seatable APIs. Supported Supported _mtime Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported auto number String Supported Supported. url String Supported Supported. email String Supported Supported. duration Float Returned in the unit of seconds Supported Supported."},{"location":"scripts/sql/reference/#list-types","title":"List Types","text":"<p>In SeaTable, two categories of column types are list types:</p> <ul> <li>Built-in list types: including multiple selection, image, collaborator, and link to other records.</li> <li>Return values for the following link formulas: formula columns whose formula is <code>{link.column}</code> or <code>lookup</code>; link formula columns whose formula is <code>lookup</code>, <code>findmin</code> or <code>findmax</code>.</li> </ul> <p>When referring a column with list type in <code>where</code> conditions, the following rules apply, depending on the type for the list elements. (If an operator is not listed below, it's unsupported.)</p> Element Type Operator Rule string IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. string LIKE, ILIKE Always take the first element for comparison; if there is no element, use \"\". string IS NULL Return <code>true</code> when the list is empty or no data in the cell. string =, != Always take the first element for comparison; if there is no element, use \"\". float IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. float =, !=, \\&lt;, \\&lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. float IS NULL Return <code>true</code> when the list is empty or no data in the cell. float Arithmetics such as +/-/*// Use the first element for calculation. Datetime IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. Datetime =, !=, \\&lt;, \\&lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. Datetime IS NULL Return <code>true</code> when the list is empty or no data in the cell. bool IS TRUE Always take the first element for comparison; return false if there are no elements. linked record Follow the rules for the type of the display column. <p>When a list column is returned in a selected field, only the first 10 elements are returned.</p> <p>When used in <code>group by</code> or <code>order by</code> clauses, the elements for each list will first be sorted in ascending order, then the lists will be sorted by the rules below:</p> <ul> <li>Compare the elements one by one, list with smaller element is sorted before list with larger element.</li> <li>If all elements compared in step 1 are equal, shorter list is sorted before longer list.</li> <li>Otherwise the tow lists are equal.</li> </ul> <p>If a list column is passed as parameter to a formula, and the parameter expects a scalar value, the first element will be used. And if the element is a linked record, the value of its display column will be used.</p> <p>When applying aggregate functions (min, max, sum, avg) to a list column, if there is only 1 element in the list, use that element; otherwise this row will not be aggregated.</p>"},{"location":"scripts/sql/reference/#null-values","title":"NULL Values","text":"<p>NULL value is distinct from 0. It represents a missing value. The following values are treated as NULL:</p> <ul> <li>Empty cells in a table is treated as NULL.</li> <li>Values which cannot be converted to the column type will be treated as NULL.</li> <li>Empty strings (\"\") will be treated as NULL too. This is different from standard SQL.</li> <li>Lists are treated as NULL based on the rules described in the \"List Types\" section.</li> <li>Functions or formula columns that return error will be treated as NULL.</li> </ul> <p>In the <code>Where</code> clause:</p> <ul> <li>Arithmetic operations (+, -, * etc.) on NULL values will return NULL.</li> <li><code>!=</code>, <code>NOT LIKE</code>, <code>NOT IN</code>, <code>NOT BETWEEN</code>, <code>HAS NONE OF</code>, <code>IS NOT TRUE</code>, and <code>IS NULL</code> operations will return true when the value is NULL.</li> <li><code>AND</code>, <code>OR</code>, <code>NOT</code> treat NULL values as false.</li> <li>Aggregate functions (min, max, sum, avg) will ignore NULL values.</li> </ul> <p>In formulas, NULL values will be converted to 0 or an empty strings.</p>"},{"location":"scripts/sql/reference/#extended-syntax","title":"Extended Syntax","text":""},{"location":"scripts/sql/reference/#use-formulas-in-sql-query","title":"Use Formulas in SQL Query","text":"<p>You may use a formula syntax that's almost the same as SeaTable's formulas in SQL queries. There are a few special notes:</p> <ul> <li>Link formulas are not supported. e.g. {link.age} is invalid.</li> <li>Reference to columns should not be enclosed by curly brackets (\"{}\"). Don't write <code>select abs({column}) from table;</code>. Write <code>select abs(column) from table;</code>. This is consistent with standard SQL syntax.</li> <li>You can use back quote (\"``\") to enclose column references, when column name contains space or \"-\". E.g. select abs(<code>column-a</code>) from table;</li> <li>You may not use column alias in formulas. E.g. <code>select abs(t.column) from table as t;</code> is invalid.</li> <li>formulas can be use in group by and order by clauses.</li> </ul> <p>A few extended formulas are supported:</p> <ul> <li><code>STARTOFWEEK(date, weekStart)</code>: returns the first day of the week where \"date\" is in. \"weekstart\" can be used to choose \"sunday\" or \"monday\" as the first day of a week.</li> <li><code>Quarter(date)</code>: Returns the quarter of the date. Return value is 1, 2, 3 or 4.</li> <li><code>ISODate(date)</code>: Returns ISO format string for the date. E.g. \"2020-09-08\".</li> <li><code>ISOMonth(date)</code>: Returns ISO format string for the month where \"date\" is in. E.g. \"07\".</li> </ul> <p>The above formulas can be used for group by week, quarter, date and month. E.g. <code>select sum(sale) from SalesRecord group by ISODate(SalesTime);</code> will return the total sales amount for each day.</p> <p>For more details, please refer to [./function.md].</p>"},{"location":"scripts/sql/reference/#extended-list-operators","title":"Extended List Operators","text":"<p>Some column types in SeaTable have list values. The SeaTable UI supports a few special filters for such types. They are <code>HAS ANY OF</code>, <code>HAS ALL OF</code>, <code>HAS NONE OF</code>, <code>IS EXACTLY</code>. You may also use the same syntax to filter such columns with SQL.</p> <p>For example, if column \"city\" is of type multi-select, and we want to find out all rows that contains \"New York\" or \"Paris\" in the \"city\" column, you can query: <code>select * from table where city has any of (\"New York\", \"Paris\");</code>. The list of string constant are enclosed with brackets, just like the syntax for <code>IN</code>.</p>"},{"location":"scripts/sql/reference/#indexes","title":"Indexes","text":"<p>To improve query performance, SeaTable will automatically create indexes for the rows stored in big data storage engine. Currently, text, number, date, single-select, multiple-select, collaborators, creator, create date, modifier, modification date columns are indexed.</p> <p>When you add or delete a column in a table, the index for this column is not added/removed immediately. Indexes creation and deletion are triggered in two cases:</p> <ol> <li>When you archive the table for the next time, indexes are created for new columns and indexes for removed columns are removed.</li> <li>Users may manage indexes from \"index management\" UI. You can open it from the \"Big data management\" menu in the base.</li> </ol>"}]}