{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>You've decided to venture into developing your own script, plugin, or custom application: excellent choice! This guide is designed to cover all aspects of this journey. While some descriptions might seem obvious to seasoned professionals, this manual is crafted to assist novice developers who are just starting out.</p>"},{"location":"#who-is-this-manual-for","title":"Who is this manual for?","text":"<p>The Developer Manual caters to developers interested in utilizing custom scripts within SeaTable, creating their own plugins, or developing custom programs. Both minimal programming skills and knowledge of SeaTable are therefore recommended to take full advantage of this manual.</p> <p>Tips for beginners</p> <p>You don't feel familiar enough with coding or with SeaTable? Depending on your actual skills, knowledge and aims, here are some suggested starting points: </p> <ul> <li> <p>You would like to get started but currently have no programming knowledge? We invite you to consult the Coding for beginners page</p> </li> <li> <p>You are new to SeaTable? Do not hesitate to consult SeaTable's user manual to get more familiar with it.</p> </li> </ul>"},{"location":"#scope-of-this-manual","title":"Scope of this manual","text":"<p>This guide illustrates three fundamental approaches to development within SeaTable:</p> <ol> <li>Scripting within SeaTable: Create custom logic or perform individual data processing using JavaScript or Python, both supported within SeaTable.</li> <li>SeaTable plugins: Develop plugins capable of interacting with, visualizing, and operating on data within a SeaTable Base.</li> <li>Utilizing any programming language with SeaTable's API: Seamlessly interact with the SeaTable API to construct your own web pages or programs.</li> </ol> <p>JavaScript or Python scripts?</p> <p>Differences between JavaScript and Python (in terms of abilities and requirements) are mentioned in the Scripting introduction page to help you make the right choice depending on your needs</p> <p>All instructions provided are applicable to self-hosted SeaTable installations (Enterprise and Developer Editions), as well as to SeaTable Cloud.</p>"},{"location":"#where-to-start","title":"Where to start?","text":"<p>For guidance on choosing the right section within this manual, refer to the decision tree diagram below.</p> <p></p> <p>If you aim to integrate a software product with SeaTable, note that SeaTable supports multiple workflow automation tools such as n8n, Zapier, and Make. Please refer to the SeaTable User Manual for detailed information on these integrations, as they are not covered here.</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#development-system","title":"Development system","text":"<p>To begin your development journey with SeaTable, you'll need a SeaTable system. If you're planning to create short scripts, SeaTable Cloud could be a suitable option. However, for more in-depth development or when creating plugins, it's highly recommended to set up your own SeaTable Server. Refer to the Admin manual for installation instructions.</p> <p>Known limitations of SeaTable Cloud</p> <ol> <li>Custom Plugin Installation: SeaTable Cloud does not support the installation of custom plugins.</li> <li>Python Script Runs Limitation: The number of Python script runs is constrained by your current SeaTable Cloud subscription.</li> </ol> <p>Therefore, it's recommended to set up your own SeaTable Server if you intend to develop custom plugins, applications, or run multiple Python scripts. For further information about deploying your server, please refer to the Admin Manual.</p>"},{"location":"#authentication","title":"Authentication","text":"<p>The actual authentication depends on the development approach one chooses.</p> ScriptsPluginsClient APIs <p>JavaScript Scripts does not require any authentication at all because these scripts are executed in the browser of the user and the user has to be authenticated already.</p> <p>Plugin Scripts require an authentication to get data from the base, but the <code>context</code> objects contains everything for an easy authentication.</p> <p>Plugins interact with the data of one base. SeaTable provides all required functions for easy authentication.</p> <p>If you want to build your own application you always have to authenticate with a base token against the base (learn more about the different tokens used by SeaTable in the API Reference).</p>"},{"location":"#data-model","title":"Data model","text":"<p>As a developer you typically interact with a single base. In SeaTable, a base can contain multiple tables, each one containing multiple rows and columns (or fields) and eventually multiple views used to filter, sort and/or group these rows and columns. The logic is like this:</p> <pre><code>SeaTable Base\n\u251c\u2500 Table 1 (Column A | Column B | Column C)\n\u2502  \u2514\u2500 View A (Column A | Column B | Column C)\n|     \u2514\u2500 Row 1\n|     \u2514\u2500 Row 2\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 ...\n\u2502  \u2514\u2500 View B (Column A | Column C)\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 Row 4\n\u2514\u2500 Table 2\n|  \u2514\u2500 ...\n</code></pre> <p>Every objects and methods will help you interact with this architecture. For details about the different objects (tables, view, rows &amp; columns and links) you can look at the global structure presented in each object page or at the SeaTable API Reference for even more information.</p>"},{"location":"includes/","title":"Includes","text":"<p>As a developer you typically interact with a single base. In SeaTable, a base can contain multiple tables, each one containing multiple rows and columns (or fields) and eventually multiple views used to filter, sort and/or group these rows and columns. The logic is like this:</p> <pre><code>SeaTable Base\n\u251c\u2500 Table 1 (Column A | Column B | Column C)\n\u2502  \u2514\u2500 View A (Column A | Column B | Column C)\n|     \u2514\u2500 Row 1\n|     \u2514\u2500 Row 2\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 ...\n\u2502  \u2514\u2500 View B (Column A | Column C)\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 Row 4\n\u2514\u2500 Table 2\n|  \u2514\u2500 ...\n</code></pre> <p>Every objects and methods will help you interact with this architecture. For details about the different objects (tables, view, rows &amp; columns and links) you can look at the global structure presented in each object page or at the SeaTable API Reference for even more information.</p>"},{"location":"includes/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a table object: <pre><code>{\n    \"_id\": \"IfcB\",\n    \"name\": \"New table\",\n    \"is_header_locked\": false,\n    \"summary_configs\": {},\n    \"columns\": [ // (1)!\n        {\n        \"key\": \"0000\",\n        \"type\": \"number\",\n        \"name\": \"First column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"2w6F\",\n        \"type\": \"text\",\n        \"name\": \"second column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"3aAf\",\n        \"type\": \"date\",\n        \"name\": \"third column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        }\n    ],\n    \"rows\": [], // (2)!\n    \"views\": [ // (3)!\n        {\n        \"_id\": \"0000\",\n        \"name\": \"Default View\",\n        \"type\": \"table\",\n        \"is_locked\": false,\n        \"filter_conjunction\": \"And\",\n        \"filters\": [],\n        \"sorts\": [],\n        \"groupbys\": [],\n        \"group_rows\": [],\n        \"groups\": [],\n        \"colorbys\": {},\n        \"hidden_columns\": [],\n        \"rows\": [],\n        \"formula_rows\": {},\n        \"link_rows\": {},\n        \"summaries\": {},\n        \"colors\": {}\n        }\n    ],\n    \"id_row_map\": {}\n}\n</code></pre></p> <ol> <li> <p>Array of existing columns     <pre><code>{\n  \"key\": \"g4s1\",\n  \"type\": \"number\",\n  \"name\": \"api3\",\n  \"editable\": true,\n  \"width\": 200,\n  \"resizable\": true,\n  \"draggable\": true,\n  \"data\": null,\n  \"permission_type\": \"\",\n  \"permitted_users\": []\n}\n</code></pre></p> </li> <li> <p>Array of existing rows     <pre><code>{\n\"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n\"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n\"Name\": \"NewName\",\n\"Date\": \"2020-08-01\",\n\"Content\": \"111\",\n\"link\": [\n            {\n            \"display_value\": \"1\",\n            \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n        ]\n}\n</code></pre></p> </li> <li> <p>Array of existing views     <pre><code>{\n  \"_id\": \"0000\",\n  \"name\": \"Default View\",\n  \"type\": \"table\",\n  \"is_locked\": false,\n  \"rows\": [],\n  \"formula_rows\": {},\n  \"summaries\": [],\n  \"filter_conjunction\": \"And\",\n  \"sorts\": [],\n  \"filters\": [],\n  \"hidden_columns\": [],\n  \"groupbys\": [],\n  \"group_rows\": [],\n  \"groups\": []\n}\n</code></pre> Please refer to the SeaTable API Reference for a more detailed presentation.</p> </li> </ol>"},{"location":"includes/#global-structure_1","title":"Global structure","text":"<p>Here is the global structure of a view object:</p> <pre><code>{\n    \"_id\": \"0000\",\n    \"name\": \"Default View\",\n    \"type\": \"table\",\n    \"is_locked\": false,\n    \"rows\": [],\n    \"formula_rows\": {},\n    \"summaries\": [],\n    \"filter_conjunction\": \"And\",\n    \"sorts\": [],\n    \"filters\": [],\n    \"hidden_columns\": [],\n    \"groupbys\": [],\n    \"group_rows\": [],\n    \"groups\": []\n}\n</code></pre> <p>Please refer to the SeaTable API Reference for a more detailed presentation.</p>"},{"location":"includes/#global-structure_2","title":"Global structure","text":"<p>Here is the global structure of a column object:</p> <pre><code>{\n    \"key\":\"bjcM\",\n    \"type\":\"number\",\n    \"name\":\"Val\",\n    \"editable\":true,\n    \"width\":200,\n    \"resizable\":true,\n    \"draggable\":true,\n    \"data\": // (1)!\n        {\n            \"format\":\"number\",\n            \"precision\":2,\n            \"enable_precision\":false,\n            \"enable_fill_default_value\":false,\n            \"enable_check_format\":false,\n            \"decimal\":\"comma\",\n            \"thousands\":\"no\",\n            \"format_min_value\":0,\n            \"format_max_value\":1000\n        },\n    \"permission_type\":\"\",\n    \"permitted_users\":[],\n    \"permitted_group\":[],\n    \"edit_metadata_permission_type\":\"\",\n    \"edit_metadata_permitted_users\":[],\n    \"edit_metadata_permitted_group\":[],\n    \"description\":null,\n    \"colorbys\":{},\n    \"editor\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        },\n    \"formatter\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        }\n}\n</code></pre> <ol> <li>See below for a presentation of <code>data</code> object keys depending on the column <code>type</code></li> </ol> <p>Columns particularities</p> <ul> <li>Unless other elements, columns don't have an <code>_id</code>, but a <code>key</code></li> <li>Link-type columns also have a link id that should not be mistaken with the column <code>key</code>. This value is present in the <code>data</code> object (see below)</li> </ul>"},{"location":"includes/#column-data","title":"Column data","text":"<p>The <code>data</code> object keys will depend on the column <code>type</code> and will allow you to define the specific column parameters. Here is a list of the different <code>data</code> keys depending on the column <code>type</code>:</p> <p><code>text</code>, <code>email</code>, <code>long-text</code>, <code>image</code>, <code>file</code>, <code>url</code>, <code>creator</code>, <code>ctime</code>, <code>last-modifier</code>, <code>mtime</code></p> <p>empty</p> <code>link</code> <pre><code>{\n    \"display_column_key\":\"qqXZ\",\n    \"table_id\":\"0000\",\n    \"other_table_id\":\"XE5U\",\n    \"is_internal_link\":true,\n    \"is_multiple\":true,\n    \"only_adding_new_record\":false,\n    \"is_row_from_view\":false,\n    \"other_view_id\":\"\",\n    \"link_id\":\"OSD1\",\n    \"array_type\":\"text\",\n    \"array_data\":null,\n    \"result_type\":\"array\"\n}\n</code></pre> <code>number</code> <pre><code>{\n    \"format\":\"custom_currency\",\n    \"precision\":2,\n    \"enable_precision\":true,\n    \"enable_fill_default_value\":false,\n    \"decimal\":\"comma\",\n    \"thousands\":\"no\",\n    \"currency_symbol_position\":\"after\",\n    \"currency_symbol\":\"p\"\n}\n</code></pre> <code>date</code> <pre><code>{\n    \"format\":\"M/D/YYYY HH:mm\"\n}\n</code></pre> <code>duration</code> <pre><code>{\n    \"format\":\"duration\",\n    \"duration_format\":\"h:mm\"\n}\n</code></pre> <code>single select, multiple select</code> <pre><code>{\n    \"options\":\n        [\n            {\n                \"name\":\"Male\",\n                \"id\":\"783482\",\n                \"color\":\"#46A1FD\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#3C8FE4\"\n            },\n            {\n                \"name\":\"Female\",\n                \"id\":\"330935\",\n                \"color\":\"#DC82D2\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#D166C5\"\n            },\n            {\n                \"name\":\"Non-binary\",\n                \"id\":\"147140\",\n                \"color\":\"#ADDF84\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#9CCF72\"\n            }\n        ],\n        \"cascade_column_key\":\"Qvkt\",\n        \"cascade_settings\":\n            {\n                \"147140\":[\"783482\"],\n                \"330935\":[\"330935\"],\n                \"783482\":[\"783482\"]\n            }\n}\n</code></pre> <code>checkbox</code> <pre><code>{\n    \"default_value\":false,\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>rate</code> <pre><code>{\n    \"rate_max_number\":5,\n    \"rate_style_color\":\"#FF8000\",\n    \"default_value\":\"\",\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>formula</code> <pre><code>{\n    \"formula\":\"left({Email},search(\\\"@\\\",{Email},1)-1)\",\n    \"operated_columns\":[\"JfP2\"],\n    \"result_type\":\"string\",\n    \"enable_precision\":true,\n    \"precision\":1,\n    \"thousands\":\"no\"\n}\n</code></pre> <code>link-formula</code> <pre><code>{\n    \"formula\":\"findmax\",\n    \"result_type\":\"array\",\n    \"operated_columns\":[\"TaXD\"],\n    \"conditions\":[],\n    \"link_column_key\":\"TaXD\",\n    \"include_condition\":false,\n    \"condition_conjunction\":\"And\",\n    \"column_key_in_linked_record\":\"0000\",\n    \"column_key_for_comparison\":\"RSjx\",\n    \"level2_linked_table_column_key\":null,\n    \"array_type\":\"auto-number\",\n    \"array_data\":null\n}\n</code></pre> <code>geolocation</code> <pre><code>{\n    \"geo_format\":\"lng_lat\"\n}\n</code></pre> <code>auto-number</code> <pre><code>{\n    \"format\":\"YYYYMMDD-00\",\n    \"max_used_auto_number\":33,\n    \"digits\":2,\n    \"prefix_type\":\"date\",\n    \"prefix\":\"20250909\"\n}\n</code></pre> <code>button</code> <pre><code>{\n    \"button_type\":\"copy_row_to_another_table\",\n    \"button_name\":\"Copy to Table2\",\n    \"button_color\":\"#FFFCB5\",\n    \"table_id\":\"0000\"\n}\n</code></pre> <p>Accessing a particular data object value</p> <p>This rather long list is not exhaustive, however. If you need to access a specific <code>data</code> value, consult the SeaTable API Reference or create the corresponding column to display the content of its <code>data</code> object.</p>"},{"location":"includes/#global-structure_3","title":"Global structure","text":"<p>Here is the global structure of a row object: <pre><code>{\n  \"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n  \"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n  \"Name\": \"NewName\",\n  \"Date\": \"2020-08-01\",\n  \"Content\": \"111\",\n  \"link\": [\n            {\n              \"display_value\": \"1\",\n              \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n          ]\n}\n</code></pre></p> <p>Please note the specific format for link-type columns (structure of the array objects for key <code>link</code>):</p> <ul> <li> <p><code>display_value</code>: Value displayed in the cell</p> </li> <li> <p><code>row_id</code>: id of the linked row in the other table</p> </li> </ul> <p>For each example, you'll need a special base structure so that you can just copy&amp;paste the scripts into SeaTable and run them.</p> <p>If you don't want to recreate the tables, here are two bases containing the tables required for each example, depending on whether you want to recreate the scripts yourself or you prefer them to already be present:</p> <ul> <li>Examples material (without scripts)</li> <li>Examples material (scripts included)</li> </ul> <p>Once downloaded, you can easily create a base from the DTABLE file.</p>"},{"location":"includes/#add-rows","title":"Add rows","text":"<p>This script adds two expenses rows in a ledger. Before adding them, it checks if they have already been added for the current month.</p> <p>Here is the structure of the table named <code>Daily expenses</code> you need so that this script could run:</p> Column name Name Date Type Type (single select) Fee Column type text date text single select number"},{"location":"includes/#calculate-accumulated-value","title":"Calculate accumulated value","text":"<p>This script accumulates the values of the current row and the previous rows, and records the result to the current row. It does the same than the Calculate accumulated value operation from the data processing menu. If there's a grouping rule active on the view, accumulated values will be calculated for each group.Otherwise, values are accumulated for all rows. Please not that this script only supports grouping by a single column.</p> <p>Here is the structure of the table named <code>Accumulated value</code> you need so that this script could run:</p> Column name Value to add Incremental total Grouping column Column type number number single select"},{"location":"includes/#compute-attendance-statistics","title":"Compute attendance statistics","text":"<p>This script computes, from a list of clocking times, daily clock in (earliest clocking) and clock out (latest clocking) times for each day and staff member.</p> <p>Here is the structure of the table named <code>Clocking table</code> that contains the input data:</p> Column name Name Department Date Clocking time Column type text single select date duration <p>And the structure of the table <code>Attendance statistics</code> where the daily summarized values will be stored:</p> Column name Name Department Date Clock-in Clock-out Column type text single select date duration duration"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#just-to-test","title":"just to test ...","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>gitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit</code></pre> <pre><code>graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n    E--&gt;C;\n    F--&gt;E;\n    G--&gt;F;</code></pre> <pre><code>pie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15</code></pre> <pre><code>gantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 4d\n        Another task    :after a1, 10d\n    section Another\n        Task in Another :2014-01-12, 2d\n        another task    :4d</code></pre>"},{"location":"clients/","title":"Client APIs","text":"<p>Thanks to SeaTable's full API, virtually anything can be controlled with any programming language.</p> <p>On the API Reference you can find all available API commands and sample codes for different programming languages.</p> <p>For a few programming languages there are already ready-to-use client APIs classes that do some of the work for you. These are presented in this part of the documentation.</p>"},{"location":"clients/php_api/","title":"PHP client","text":"<p>SeaTable's API exposes the entire SeaTable features via a standardized programmatic interface. The SeaTable PHP Client encapsulates SeaTable Server Restful API. If you are familiar this client enables you to call every available API endpoint of SeaTable. You can interact with the user accounts, bases or files.</p> <p>Auto generated from openapi specification</p> <p>Since April 2024, we auto generate this SeaTable php client from our public available openapi specification. The advantage is that, the php client automatically contains all available API endpoints and we save a lot of programming capacity. Also we could generate more api clients for other programming languages in no time with the same feature set. The disadvantage is, that with this new client we removed some convenitent functions for authentication and the new version is not compatible at all with the version v0.2 and earlier.</p>"},{"location":"clients/php_api/#installation","title":"Installation","text":"<p>The SeaTable API installs as part of your project dependencies. It is available from Packagist and can be installed with Composer:</p> <pre><code>composer require seatable/seatable-api-php\n</code></pre> <p>The source code of the PHP Client API is available at GitHub.</p>"},{"location":"clients/php_api/#getting-started","title":"Getting started","text":"<p>After installation you can easily connect to your SeaTable system and execute API calls.</p>"},{"location":"clients/php_api/#get-information-about-your-account","title":"Get information about your account","text":"<p>The following code connects to SeaTable Cloud. You have to provide your <code>Account Token</code>. Please refer to api.seatable.com for guidance on how to obtain an <code>Account Token</code>.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure Bearer authorization\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCOUNT_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\User\\UserApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getAccountInfo();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi-&gt;getAccountInfo: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#list-your-bases","title":"List your bases","text":"<p>This time, we connect to a self-hosted SeaTable Server.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure Bearer authorization: AccountTokenAuth\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration();\n$config-&gt;setAccessToken('YOUR_ACCOUNT_TOKEN');\n$config-&gt;setHost('https://seatable.example.com');\n\n$apiInstance = new SeaTable\\Client\\User\\BasesApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;listBases();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BasesApi-&gt;listBases: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#get-metadata-from-your-base","title":"Get Metadata from your Base","text":"<p>First we have to get the <code>Base-Token</code> and the <code>base_uuid</code> and then we can execute the <code>getMetadata</code> call.</p> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Metadata\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n$apiInstance = new SeaTable\\Client\\Base\\BaseInfoApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getMetadata($result['dtable_uuid']);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseInfoApi-&gt;getMetadata: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#execute-sql-query-against-your-base","title":"Execute SQL-Query against your base","text":"<pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Base query\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n\n$apiInstance = new SeaTable\\Client\\Base\\RowsApi(new GuzzleHttp\\Client(), $config);\n\n$base_uuid = $result['dtable_uuid'];\n$sql_query = new SeaTable\\Client\\Base\\SqlQuery([\"sql\" =&gt; \"Select * from Table1\", \"convert_keys\" =&gt; false]);\n\ntry {\n    $result = $apiInstance-&gt;querySQL($base_uuid, $sql_query);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RowsApi-&gt;querySQL: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#add-a-row-to-your-base","title":"Add a row to your base","text":"<pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Prerequisite: API Token for your base\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_API_TOKEN');\n\n$apiInstance = new SeaTable\\Client\\Auth\\BaseTokenApi(new GuzzleHttp\\Client(), $config);\n\ntry {\n    $result = $apiInstance-&gt;getBaseTokenWithApiToken();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BaseTokenApi-&gt;getBaseTokenWithApiToken: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n// Base query\n$config = SeaTable\\Client\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($result['access_token']);\n\n$apiInstance = new SeaTable\\Client\\Base\\RowsApi(new GuzzleHttp\\Client(), $config);\n\n$base_uuid = $result['dtable_uuid'];\n$request = new SeaTable\\Client\\Base\\AppendRows([\n    'table_name' =&gt; 'Table1',\n    'rows' =&gt; [\n        [\n            'Name' =&gt; 'Inserted via API',\n        ],\n    ],\n    // Whether to apply default values\n    'apply_default' =&gt; false,\n]);\n\ntry {\n    $result = $apiInstance-&gt;appendRows($base_uuid, $request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RowsApi-&gt;appendRows: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"clients/php_api/#api-endpoints","title":"API Endpoints","text":"<p>You can find detailed documentation for all endpoints including auto-generated examples on GitHub:</p> <ul> <li>Auth</li> <li>Base</li> <li>File</li> <li>SysAdmin</li> <li>TeamAdmin</li> <li>User</li> </ul>"},{"location":"clients/python_api/","title":"Python client","text":"<p>The SeaTable Python Client encapsulates SeaTable Server Restful API. You can call it in your python program.</p> <p>Unique Python library</p> <p>Unlike JavaScript, external python programs and python scripts, executed in SeaTable, use the same python library and therefore share the same functions. For an overview of the available functions, read the chapter of script programming with Python in this documentation.\"</p>"},{"location":"clients/python_api/#installation","title":"Installation","text":"<pre><code>pip3 install seatable-api\n</code></pre> <p>The source code of the Python Client API is available at GitHub.</p>"},{"location":"clients/ruby_api/","title":"Ruby client","text":"<p>One of our community members made a first version of a SeaTable Ruby client.</p> <p>The source code of the Ruby client API and additional explanations are available at GitHub.</p>"},{"location":"clients/javascript/columns/","title":"Columns","text":"<p>Every table in a base contains columns. The following calls are available to interact with the columns of a table.</p>"},{"location":"clients/javascript/columns/#get-columns","title":"Get Columns","text":"<p>listColumns</p> <pre><code>base.listColumns(table_name, (view_name = \"\"));\n</code></pre> <p>Example</p> <pre><code>const columns1 = await base.listColumns(\"Table1\");\nconst columns2 = await base.listColumns(\"Table1\", (view_name = \"default\"));\n</code></pre> <p>getColumnByName</p> <pre><code>base.getColumnByName(table_name, column_name);\n</code></pre> <p>Example <pre><code>const col = await base.getColumnsByName('Table1', 'Name');\n</code></pre></p> <p>getColumnsByType</p> <pre><code>base.getColumnsByType(table_name, col_type);\n</code></pre> <p>Example <pre><code>const cols = await base.getColumnsByType('Table1', 'number')\n</code></pre></p>"},{"location":"clients/javascript/columns/#add-column","title":"Add Column","text":"<p>insertColumn</p> <pre><code>base.insertColumn(table_name, column_name, column_type, column_key='', column_data='')\n</code></pre> <p>Example <pre><code>import { ColumnTypes } from 'seatable-api';\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT)\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT, '0000')\nawait base.insertColumn('Table1', 'Link1', ColumnTypes.LINK, column_data={\n        'table':'Table1',\n        'other_table':'Test_User'\n    })\n</code></pre></p>"},{"location":"clients/javascript/columns/#rename-column","title":"Rename Column","text":"<p>renameColumn</p> <pre><code>base.renameColumn(table_name, column_key, new_column_name)\n</code></pre> <p>Example <pre><code>await base.renameColumn('Table1', 'kSiR', 'new-seatable-api')\n</code></pre></p>"},{"location":"clients/javascript/columns/#column-settings","title":"Column Settings","text":"<p>resizeColumn</p> <pre><code>base.resizeColumn(table_name, column_key, new_column_width)\n</code></pre> <p>Example <pre><code>await base.resizeColumn('Table1', 'asFV', 500)\n</code></pre></p> <p>freezeColumn</p> <pre><code>base.freezeColumn(table_name, column_key, frozen)\n</code></pre> <p>Example <pre><code>await base.freezeColumn('Table1', '0000', true)\n</code></pre></p> <p>moveColumn</p> <pre><code>base.moveColumn(table_name, column_key, target_column_key)\n</code></pre> <p>Example In this example, the 'loPx' column will be moved to the right of the '0000' column <pre><code>await base.moveColumn('Table1', 'loPx', '0000')\n</code></pre></p> <p>modifyColumnType</p> <pre><code>base.modifyColumnType(table_name, column_key, new_column_type)\n</code></pre> <p>Example <pre><code>import { ColumnTypes } from 'seatable-api';\nawait base.modifyColumnType('Table1', 'nePI', ColumnTypes.NUMBER)\n</code></pre></p> <p>addColumnOptions</p> <p>Used by \"single select\" or \"multiple select\"-type columns <pre><code>base.addColumnOptions(table_name, column, options)\n</code></pre></p> <p>Example <pre><code>await base.addColumnOptions('Table1', 'My choices', [\n        {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre></p> <p>addColumnCascadeSettings</p> <p>Used by \"single select\"-type column, to add a limitation of child column options according to the option of parent column <pre><code>base.addColumnCascadeSettings(table_name, child_column, parent_column, cascade_settings)\n</code></pre></p> <p>Example <pre><code>await base.addColumnCascadeSettings(\"Table1\", \"single-op-col-c\", \"single-op-col\", {\n\"aaa\": [\"aaa-1\", \"aaa-2\"], # If \u201caaa\u201d is selected by parent column, the available options of child column are \"aaa-1 and aaa-2\"\n\"bbb\": [\"bbb-1\", \"bbb-2\"],\n\"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre></p>"},{"location":"clients/javascript/columns/#delete-column","title":"Delete Column","text":"<p>deleteColumn</p> <pre><code>base.deleteColumn(table_name, column_key)\n</code></pre> <p>Example <pre><code>await base.deleteColumn('Table1', 'bsKL')\n</code></pre></p>"},{"location":"clients/javascript/constants/","title":"Constants","text":"<p>In the script there may be some constants we need to know.</p> <p>ColumnTypes</p> <p>Column type, when insert/add columns, change column types, etc. need to be used <pre><code>import { ColumnTypes } from 'seatable-api';\n\nColumnTypes.NUMBER              // number\nColumnTypes.TEXT                // text\nColumnTypes.LONG_TEXT           // long text\nColumnTypes.CHECKBOX            // checkbox\nColumnTypes.DATE                // date &amp; time\nColumnTypes.SINGLE_SELECT       // single select\nColumnTypes.MULTIPLE_SELECT     // multiple\nColumnTypes.IMAGE               // image\nColumnTypes.FILE                // file\nColumnTypes.COLLABORATOR        // collaborator\nColumnTypes.LINK                // link to\nColumnTypes.FORMULA             // formula\nColumnTypes.CREATOR             // creator\nColumnTypes.CTIME               // create time\nColumnTypes.LAST_MODIFIER       // last modifier\nColumnTypes.MTIME               // modify time\nColumnTypes.GEOLOCATION         // geolocation\nColumnTypes.AUTO_NUMBER         // auto munber\nColumnTypes.URL                 // URL\n</code></pre></p>"},{"location":"clients/javascript/javascript_api/","title":"JavaScript client","text":"<p>The SeaTable JavaScript client encapsulates SeaTable Server Restful API. You can call it in your front-end page or Node.js program.</p> <p>Two different clients</p> <p>JavaScript API cannot be used for scripts in SeaTable bases. For script programming with JavaScript, there is a separate chapter in this documentation.</p> <p>Note that JavaScript API calls SeaTable Server Restful API, whereas scripts in SeaTable bases interact with the base loaded in the browser, so the APIs of the two are somewhat different.</p>"},{"location":"clients/javascript/javascript_api/#installation","title":"Installation","text":"<pre><code>npm install seatable-api\n</code></pre> <p>The source code of the JavaScript Client API is available at GitHub.</p>"},{"location":"clients/javascript/javascript_api/#reference","title":"Reference","text":"<p>To use SeaTable APIs, you should first initialize a base object and call <code>base.auth()</code>. <code>base.auth()</code> is an async function, which needs to be executed in async functions. Other APIs all return a promise object. There are two ways to use them:</p> First way using thenSecond way using await <pre><code>base.listViews(tableName).then(views =&gt; {\n  // Use views to complete the requirements\n}).catch(error =&gt; {\n  // Exception handling\n})\n</code></pre> <pre><code>try {\n  const views = await base.listViews(tableName);\n  // Use views to complete the requirements\n} catch (error) {\n  // Exception handling\n}\n</code></pre> <p>Here are the main SeaTable API errors you might encounter:</p> <ul> <li>400 Params invalid</li> <li>403 Permission denied</li> <li>413 Exceed limit (see the API Reference about limits)</li> <li>500 Internal Server Error</li> </ul>"},{"location":"clients/javascript/javascript_api/#authorization","title":"Authorization","text":"<p>The <code>Base</code> object represents a table. You need to specify an <code>APIToken</code> to get access authorization and to be able to read and write the base. API tokens can be directly generated in the web interface.</p> <p>Example</p> <pre><code>import { Base } from \"seatable-api\";\n\nconst config = {\n  server: \"https://cloud.seatable.cn\",\n  APIToken: \"c3c75dca2c369849455a39f4436147639cf02b2d\",\n};\n\nconst base = new Base(config);\nawait base.auth();\n</code></pre>"},{"location":"clients/javascript/links/","title":"Links","text":""},{"location":"clients/javascript/links/#get-links","title":"Get Links","text":"<p>getLinkedRecords</p> <p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.getColumnLinkId(table_name, column_name);\n</code></pre> <p>Example</p> <pre><code>await base.getLinkedRecords('0000', '89o4', [\n{'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n{'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\n\n// a key-value data structure returned as below\n// key: row_id of link table\n// value: a list which includes the row info of linked table\n{\n'FzNqJxVUT8KrRjewBkPp8Q': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n],\n'Jmnrkn6TQdyRg1KmOM4zZg': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n]\n}\n</code></pre>"},{"location":"clients/javascript/links/#get-link-id","title":"Get Link ID","text":"<p>Get Link ID</p> <pre><code>base.getColumnLinkId(table_name, column_name);\n</code></pre> <p>Example</p> <pre><code>const linkId = await base.getColumnLinkId(\"LinkTable\", \"Record\");\n// return the link id such as 'aHL2'\n</code></pre>"},{"location":"clients/javascript/links/#add-link","title":"Add Link","text":"<p>addLink</p> <p>Add links, link other table records</p> <pre><code>base.addLink(link_id, table_name, other_table_name, row_id, other_row_id);\n</code></pre> <p>Example</p> <pre><code>await base.addLink(\n\"5WeC\",\n\"real-img-files\",\n\"contact\",\n\"CGtoJB1oQM60RiKT-c5J-g\",\n\"PALm2wPKTCy-jdJNv_UWaQ\"\n);\n</code></pre>"},{"location":"clients/javascript/links/#update-links","title":"Update Link(s)","text":"<p>updateLink</p> <p>Modify the info of link-type column <pre><code>base.updateLink(link_id, table_name, other_table_name, row_id, other_rows_ids)\n</code></pre></p> <p>Example <pre><code>await base.updateLink(\n        link_id='r4IJ',\n        table_name='Table1',\n        other_table_name='Table2',\n        row_id='BXhEm9ucTNu3FjupIk7Xug',\n        other_rows_ids=[\n        'exkb56fAT66j8R0w6wD9Qg',\n        'DjHjwmlRRB6WgU9uPnrWeA'\n        ]\n    )\n</code></pre></p> <p>batchUpdateLinks</p> <p>Batch update infos of link-type columns <pre><code>base.batchUpdateLinks(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre></p> <p>Example <pre><code>link_id = \"WaW5\"\ntable_name =\"Table1\"\nother_table_name = \"Table2\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"eSQe9OpPQxih8A9zPXdMVA\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n        \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n        \"eSQe9OpPQxih8A9zPXdMVA\":[\"cWHbzQiTR8uHHzH_gVSKIg\",\"X56gE7BrRF-i61YlE4oTcw\"],\n        \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\n\nawait base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)\n</code></pre></p>"},{"location":"clients/javascript/links/#remove-link","title":"Remove Link","text":"<p>removeLink</p> <pre><code>base.removeLink(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Example <pre><code>await base.removeLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre></p>"},{"location":"clients/javascript/metadata/","title":"Metadata","text":"<p>Metadata delivers the complete structure of a base with tables, views and columns.</p> <p>getMetadata</p> <p>Get the complete metadata of a table. The metadata will not contain the concrete rows of the table.</p> <pre><code>base.getMetadata();\n</code></pre> <p>Example</p> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre>"},{"location":"clients/javascript/metadata/#_1","title":"Metadata","text":""},{"location":"clients/javascript/rows/","title":"Rows","text":""},{"location":"clients/javascript/rows/#get-rows","title":"Get Rows","text":"<p>listRows</p> <pre><code>base.listRows(table_name, view_name=None, order_by='', desc='', start='', limit='')\n</code></pre> <p>Example <pre><code>const rows1 = await base.listRows('Table1')\nconst rows2 = await base.listRows('Table1', view_name='default', order_by='\u5e74\u9f84', desc=true, start=5, limit=20)\n</code></pre></p> <p>getRow</p> <pre><code>base.getRow(table_name, row_id)\n</code></pre> <p>Example <pre><code>const row = await base.getRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p>"},{"location":"clients/javascript/rows/#add-rows","title":"Add Row(s)","text":"<p>appendRow</p> <pre><code>base.appendRow(table_name, row_data, apply_default = false)\n</code></pre> <p>Example <pre><code>row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.appendRow('Table1', row_data)\n</code></pre></p> <p>insertRow</p> <pre><code>base.insertRow(table_name, row_data, anchor_row_id, apply_default = false)\n</code></pre> <p>Example <pre><code>const row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.insertRow('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p> <p>batchAppendRows</p> <pre><code>base.batchAppendRows(table_name, rows_data, apply_default = false)\n</code></pre> <p>Example</p> <pre><code>const rows_data = [{\n    'Name': 'test batch',\n    'content': 'Yes'\n}, {\n    'Name': 'test batch',\n    'content': 'Yes'\n}, {\n    'Name': 'test batch',\n    'content': 'Yes'\n}]\n\n// Whether to use the default value set in the table column.\n// If set to true, the default value will be used if the column is not specified in row_data.\n// apply_default is set to false by default.\nawait base.batchAppendRows('Table6', rows_data, apply_default = true)\n</code></pre>"},{"location":"clients/javascript/rows/#update-row","title":"Update Row","text":"<p>updateRow</p> <pre><code>base.updateRow(table_name, row_id, row_data)\n</code></pre> <p>Example <pre><code>row_data = {\n    \"Number\": \"123\"\n}\nawait base.updateRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\n</code></pre></p> <p>batchUpdateRows</p> <pre><code>base.batchUpdateRows(table_name, rows_data)\n</code></pre> <p>Example <pre><code>const updates_data = [\n        {\n            \"row_id\": \"fMmCFyoxT4GN5Y2Powbl0Q\",\n            \"row\": {\n                \"Name\": \"Ranjiwei\",\n                \"age\": \"36\"\n            }\n        },\n        {\n            \"row_id\": \"cF5JTE99Tae-VVx0BGT-3A\",\n            \"row\": {\n                \"Name\": \"Huitailang\",\n                \"age\": \"33\"\n            }\n        },\n        {\n            \"row_id\": \"WP-8rb5PSUaM-tZRmTOCPA\",\n            \"row\": {\n                \"Name\": \"Yufeng\",\n                \"age\": \"22\"\n            }\n        }\n    ]\nawait base.batchUpdateRows('Table1', rows_data=updates_data)\n</code></pre></p>"},{"location":"clients/javascript/rows/#delete-rows","title":"Delete Row(s)","text":"<p>deleteRow</p> <pre><code>base.deleteRow(table_name, row_id)\n</code></pre> <p>Example <pre><code>await base.deleteRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre></p> <p>batchDeleteRows</p> <pre><code>base.batchDeleteRows(table_name, row_ids)\n</code></pre> <p>Example <pre><code>const del_rows = rows.slice(0, 3);\nconst row_ids = del_rows.map(row =&gt; row._id);\nawait base.batchDeleteRows('Table1', row_ids)\n</code></pre></p>"},{"location":"clients/javascript/sql_query/","title":"Query with SQL","text":"<p>query</p> <p>Use sql to query a base <pre><code>base.query(sql)\n</code></pre></p> <p>Example: BASIC <pre><code>await base.query('select name, price, year from Bill')\n</code></pre> Returns for example the following: <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre></p> <p>Example: WHERE</p> <p><pre><code>await base.query('select name, price from Bill where year = 2021 ')\n</code></pre> Returns for example the following: <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre></p> <p>Example: ORDER BY</p> <p><pre><code>await base.query('select name, price, year from Bill order by year')\n</code></pre> Returns for example the following:</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>Example: GROUP BY</p> <p><pre><code>await base.query('select name, sum(price) from Bill group by name')\n</code></pre> Returns for example the following: <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre></p> <p>Example: DISTINCT</p> <p><pre><code>await base.query('select distinct name from Bill')\n</code></pre> Returns for example the following:</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre>"},{"location":"clients/javascript/tables/","title":"Tables","text":""},{"location":"clients/javascript/tables/#get-tables","title":"Get Table(s)","text":"<p>getTables</p> <pre><code>base.getTables()\n</code></pre> <p>Example <pre><code>const tables = await base.getTables();\n</code></pre></p> <p>getTableByName</p> <pre><code>base.getTableByName(tableName);\n</code></pre> <p>Example <pre><code>const table = await base.getTableByName('Table1')\n</code></pre></p>"},{"location":"clients/javascript/tables/#add-table","title":"Add Table","text":"<p>addTable</p> <pre><code>base.addTable(tableName: String, lang='en', columns=[])\n</code></pre> <p>Example <pre><code>await base.addTable('Investigation', lang='en')\n</code></pre></p>"},{"location":"clients/javascript/tables/#rename-table","title":"Rename Table","text":"<p>renameTable</p> <pre><code>base.renameTable(oldNname: String, newName: String)\n</code></pre> <p>Example <pre><code>await base.renameTable('Table1', 'Projects 2023');\n</code></pre></p>"},{"location":"clients/javascript/tables/#delete-table","title":"Delete Table","text":"<p>deleteTable</p> <pre><code>base.deleteTable(tableName)\n</code></pre> <p>Example <pre><code>await base.deleteTable('Table1')\n</code></pre></p>"},{"location":"clients/javascript/views/","title":"Views","text":""},{"location":"clients/javascript/views/#get-views","title":"Get Views","text":"<p>listViews</p> <pre><code>base.listViews(table_name)\n</code></pre> <p>Example <pre><code>const views = await base.listViews('Table1')\n</code></pre></p> <p>getViewByName</p> <pre><code>base.getViewByName(table_name, view_name);\n</code></pre> <p>Example <pre><code>const view = await base.getViewByName('Table1', 'MyView');\n</code></pre></p>"},{"location":"clients/javascript/views/#add-view","title":"Add View","text":"<p>addView</p> <pre><code>base.addView(table_name, new_view_name);\n</code></pre> <p>Example <pre><code>await base.addView('Table1', 'new_view');\n</code></pre></p>"},{"location":"clients/javascript/views/#rename-view","title":"Rename View","text":"<p>renameView</p> <pre><code>base.renameView(table_name, view_name, new_view_name);\n</code></pre> <p>Example <pre><code>await base.renameView('Table1', 'myView', 'myView-01');\n</code></pre></p>"},{"location":"clients/javascript/views/#delete-view","title":"Delete View","text":"<p>deleteView</p> <pre><code>base.deleteView(table_name, view_name);\n</code></pre> <p>Example <pre><code>await base.deleteView('Table1', 'MyView');\n</code></pre></p>"},{"location":"clients/javascript/examples/file-upload/","title":"File Upload","text":"<p>The following script uploads an image from the local filesystem and attaches it to an image column.</p> <p>seatable-api NPM Package</p> <p>The script does not use the <code>seatable-api</code> NPM package since the package does not currently support file/image uploads. Instead, <code>fetch()</code> is used. The script does not require any external dependencies.</p>"},{"location":"clients/javascript/examples/file-upload/#prerequisites","title":"Prerequisites","text":"<p>You need a valid API token in order to execute the script. Set the <code>API_TOKEN</code> variable inside the script to the value of your token. You can generate an API token inside the SeaTable UI or by using your account token.</p>"},{"location":"clients/javascript/examples/file-upload/#code","title":"Code","text":"<pre><code>import { readFileSync } from 'fs';\nimport { basename } from 'path';\n\nconst SERVER_URL = 'https://cloud.seatable.io';\nconst API_TOKEN = '';\nconst TABLE_NAME = 'Table1';\nconst IMAGE_COLUMN_NAME = 'Images';\n\n// Absolute path to the file on the local filesystem\nconst FILE_PATH = 'Test.svg';\nconst FILE_NAME = basename(FILE_PATH);\n\n/**\n * Get file upload link\n * Docs: https://api.seatable.com/reference/getuploadlink\n */\nlet url = `${SERVER_URL}/api/v2.1/dtable/app-upload-link/`;\n\nconsole.log(\"Generating upload link...\\n\");\n\nlet response = await fetch(url, {\n  method: \"GET\",\n  headers: { Authorization: `Token ${API_TOKEN}` },\n});\n\nconst uploadLink = await response.json();\n\nconsole.log(uploadLink, '\\n');\n\n/**\n * Upload file from the local filesystem\n * Docs: https://api.seatable.com/reference/uploadfile\n */\nconst file = readFileSync(FILE_PATH);\n\nconst formData = new FormData();\nformData.append(\"parent_dir\", uploadLink.parent_path);\nformData.append(\"file\", new Blob([file.buffer]), FILE_NAME);\nformData.append('relative_path', uploadLink.img_relative_path);\n\nconsole.log('Uploading file...\\n')\n\nresponse = await fetch(uploadLink.upload_link + \"?ret-json=1\", {\n  method: \"POST\",\n  body: formData,\n});\n\nconst files = await response.json();\n\nconsole.log(files, '\\n');\n\n/**\n * Generate base token by using an API token\n * Base operations such as inserting or updating rows require a base token\n * Docs: https://api.seatable.com/reference/getbasetokenwithapitoken\n */\nurl = `${SERVER_URL}/api/v2.1/dtable/app-access-token/`;\n\nconsole.log('Generating base token...\\n');\n\nresponse = await fetch(url, {\n    headers: { Authorization: `Token ${API_TOKEN}` }\n});\n\nconst baseToken = await response.json();\n\nconsole.log(baseToken, '\\n');\n\n/**\n * Append row to base\n * This attaches the image to an image column\n * This API call requires a valid base token\n * Docs: https://api.seatable.com/reference/appendrows\n */\nconst workspaceId = baseToken.workspace_id;\nconst baseUuid = baseToken.dtable_uuid;\nconst relativeImageURL = `/workspace/${workspaceId}${uploadLink.parent_path}/${uploadLink.img_relative_path}/${files[0].name}`;\n\nconst body = {\n    table_name: TABLE_NAME,\n    rows: [\n        {\n            // The values of image/file columns are arrays\n            [IMAGE_COLUMN_NAME]: [relativeImageURL],\n        },\n    ],\n};\n\nurl = `${SERVER_URL}/api-gateway/api/v2/dtables/${baseUuid}/rows/`;\n\nconsole.log('Appending row...\\n')\n\nresponse = await fetch(url, {\n    method: 'POST',\n    headers: {\n        accept: 'application/json',\n        authorization: `Bearer ${baseToken.access_token}`,\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n});\n\nconsole.log(await response.json())\n</code></pre>"},{"location":"clients/javascript/examples/file-upload/#executing-the-script","title":"Executing the Script","text":"<p>You can use the following command to execute the script on the commandline using Node.js:</p> <pre><code>node upload-file.js\n</code></pre>"},{"location":"introduction/coding_for_beginners/","title":"Coding for beginners","text":""},{"location":"introduction/coding_for_beginners/#what-to-learn","title":"What to learn?","text":"<p>The Developer Manual is divided into three major sections (scripts, plugins, or API client) depending on what you want to do with SeaTable. Your development requirements will naturally vary based on your intended project. Below is an outline of the skills you might need:</p> ScriptsPluginsClient API's <p>Scripts inside SeaTable can only be written with either JavaScript or Python. Therefore you will only require one of these programming languages.</p> <p>The development of a custom plugin for your own SeaTable Server requires profound knowledge of JavaScript and React.</p> <p>Even if the <code>SeaTable plugin templates</code> offers some reusable components, you will need some experience with React to build the interface of your plugin.</p> <p>Due to the publicly available and well documented API documentation, you can theoretically interact with SeaTable using any programming language.</p>"},{"location":"introduction/coding_for_beginners/#learn-the-fundamentals","title":"Learn the fundamentals","text":"<p>If you're relatively new to development, diving into general tutorials can lay a strong foundation for your SeaTable development journey.</p> <p>While numerous free online tutorials cover various programming languages, investing in a comprehensive online course or a well-structured book can be invaluable. While free resources are available, a structured course or book often offers a more cohesive and thorough learning experience.</p> <p>These paid resources, though requiring a small investment, often provide:</p> <ul> <li>Structured Learning: A step-by-step approach ensuring a coherent understanding.</li> <li>Comprehensive Content: In-depth coverage of essential concepts and practical applications.</li> <li>Consistency: Ensuring continuity and coherence in learning.</li> </ul> <p>Remember, while free tutorials are abundant, investing in a structured resource can significantly expedite your learning process and provide a solid understanding of programming fundamentals essential for SeaTable development.</p> <p>This are personal recommendations</p> <p>The following sources does not contain any affiliate links and we do not earn any money from these recommendations. These are just good sources that we have used ourselves in the past.</p> JavaScriptPythonReact Free online course <p>A solid and free online course is available from codecademy.com. The course Learn JavaScript requires a registration but is free and teaches you in approx. 20 hours all necessary skills.</p> Best online course <p>The best online course on javascript comes from Mosh Hamedani. Mosh manages to explain all the important basics for programming with JavaScript in his course The Ultimate JavaScript Series. Once you have completed this course, you should be able to write your first scripts with ease. A monthly subscription costs just $29.</p> Book for Beginners <p>If you prefer a book, then we can recommend JavaScript from Beginner to Professional. It gives you all the basics for your first steps with JavaScript.</p> Free online course <p>An easy to follow beginner guide comes from Google. At https://developers.google.com/edu/python you can find this well balanced course to learn how to do your first steps.</p> Best online course <p>The best online course on Python comes from Mosh Hamedani. Mosh manages to explain all the important basics for programming with Python in his course Complete Python Mastery. Once you have completed this course, you should be able to write your first scripts with ease. A monthly subscription costs just $29.</p> Book for Beginners <p>Our recommended book for beginners is called Learn Python in One Day and Learn It Well and as far as we can tell it keeps his promise. Most of our working students have read this book if they want to learn more about Python.</p> Free online course <p>This free online course comes to you from Scrimba. Scrimba is a coding bootcamp with mainly paid courses and a high amount of interactive screencasts. The React course Learn React is fortunately free of charge.</p> Best online course <p>The best online course on React comes from Mosh Hamedani. Mosh will guide and teach you React until and will build a complete Video Game Discovery App. The course is called React Course for Beginners.</p>"},{"location":"introduction/coding_for_beginners/#learning-by-doing","title":"Learning by doing","text":"<p>Some of us are more comfortable with learning by doing. The principle is simple: dissect a working example, understand it, and finally modify it so that it achieves what we want.</p> <p>Here are three examples, one for each approach described in this manual:</p>"},{"location":"introduction/coding_for_beginners/#python-script-to-get-the-structure-of-a-base","title":"Python script to get the structure of a base","text":"<p>You can take the following python code and copy&amp;paste it to SeaTable. It will return the complete metastructure of your base. Easy or not? If you need some more information about this script, please refer to this step-by-step presentation.</p> Python codeOutput example <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nmetadata = base.get_metadata()\n\nprint(\"--- COMPLETE BASE STRUCTURE WITH ALL BASES AND COLUMNS ---\")\nfor table in metadata['tables']:\n    print('.')\n    print(\"Table: \"+table['name']+\" (ID: \"+table['_id']+\")\")\nfor column in table['columns']:\n    link_target = \"\"\n    if column['type'] == \"link\":\n        link_target = \" --&gt; \"+column['data']['other_table_id']\n        if column['data']['other_table_id'] == table['_id']:\n            link_target = \" --&gt; \"+column['data']['table_id']\n    print(\"  --&gt; \"+column['name']+\" (\"+column['type']+link_target+\")\")\n</code></pre> <pre><code>--- COMPLETE BASE STRUCTURE WITH ALL BASES AND COLUMNS ---\n.\nTable: Opportunities (ID: 9g8f)\n--&gt; Name (text)\n--&gt; Status (single-select)\n--&gt; Prio (single-select)\n--&gt; Owner (collaborator)\n--&gt; Customer (link --&gt; deGa)\n--&gt; Estimated value (number)\n--&gt; Proposal deadline (date)\n--&gt; Contacts (link --&gt; lYb8)\n--&gt; Interactions (link --&gt; 0000)\n.\nTable: Interactions (ID: 0000)\n--&gt; Interaction ID (auto-number)\n--&gt; Opportunity (link --&gt; 9g8f)\n--&gt; Type (single-select)\n--&gt; Interaction (formula)\n--&gt; Opportunity status (formula)\n--&gt; Date and time (date)\n--&gt; Contact (link --&gt; lYb8)\n--&gt; Notes (long-text)#\n</code></pre> <p>Feel free to check the other JavaScript and Python examples.</p>"},{"location":"introduction/coding_for_beginners/#existing-plugins","title":"Existing plugins","text":"<p>SeaTable provides some plugins to visualize your data, for example the Gallery, Timeline, Kanban and so on, but it also offers everything you need to you build your own plugin. There are no limits to the imagination, it just requires some time and React skills. </p> <p>For each existing plugin, you can find a corresponding Github repository that will allow you to fork/clone the code and try by yourself (you will probably need some basic git skills too). Please note that this is probably the one of the three approaches (scripts, plugins, or API client) that requires the most skills.</p>"},{"location":"introduction/coding_for_beginners/#using-seatable-apis-the-seatable-ideas-custom-app-example","title":"Using SeaTable APIs: the SeaTable ideas custom app example","text":"<p>There are multiple API classes available for various programming languages. This enables you to build any app or website you want.</p> <p>Our feature request tool SeaTable Ideas is an example for such a website. It uses SeaTable as database and the frontend is build completely with PHP and the slim framework.</p> <p>.</p> <p>Do not hesitate to consult this pretty detailed article about the logic behind this app.</p> <p>Of course, the SeaTable API Reference is another good place to start as it allows you to experiment with most queries, see the responses, and get the corresponding source code for all supported languages.</p>"},{"location":"introduction/get_support/","title":"Get support","text":"<p>Next to this developer guide there are more documentations available. To learn more about the usage or SeaTable, the installation of your own server or the SeaTable API, please refer to their respective manuals:</p> <ul> <li>SeaTable User Manual detailing how to use SeaTable (with a special section about scripts)</li> <li>SeaTable Admin Manual covering all relevant admin topics, from installation, configuration, upgrade, and maintenance</li> <li>SeaTable API Reference containing everything you need to know to use SeaTable's API</li> </ul> <p>See the official SeaTable channel on YouTube for tutorials, guides and overviews. Visit our blog for latest news and to learn more about what is going on in and around SeaTable.</p> <p>At any time you could have a look at the SeaTable Community Forum to share your experience with other users or report issues or bugs.</p> <p>Enterprise support</p> <p>If you're using SeaTable in your organization and need assistance, e.g., to digitalization of processes, develop custom solutions or improve efficiency, get in touch to discuss our enterprise support offerings.</p> <p>We're happy to help!</p>"},{"location":"plugins/","title":"SeaTable plugin development process","text":"<p>In this guide, we will demonstrate step by step how to write a plugin to SeaTable. This plugin can display the basic information of the base, including</p> <ul> <li>Number of tables</li> <li>Number of records</li> <li>Number of collaborators</li> </ul> <p>The code of the plugin development example is very simple. You can click this github link to get the source code.</p> <p>The plugin development process is as follows.</p>"},{"location":"plugins/#the-basic-process-of-plugin-development","title":"The basic process of plugin development","text":""},{"location":"plugins/#1-install-development-tool","title":"1. Install development tool","text":"<p>Using npm:</p> <pre><code>$ npm install -g create-dtable-plugin\n</code></pre>"},{"location":"plugins/#2-create-plugin","title":"2. Create plugin","text":"<pre><code>$ create-dtable-plugin init seatable-plugin-table-info\n</code></pre> <p>Install dependencies</p> <pre><code>$ cd seatable-plugin-table-info\n$ npm install\n</code></pre>"},{"location":"plugins/#3-modify-the-plugin-configuration","title":"3. Modify the plugin configuration","text":"<p>Modify the info.json configuration file in the plugin-config folder.</p> <pre><code>\"name\": '',                   // The name can only contain letters, numbers and underscores\n\"version\": '',                // Plugin version number\n\"display_name\": '',           // The name displayed by the plugin\n\"description\": '',            // Description of plugin\n</code></pre> <p>There is no need to add other configuration parameters, other parameters are automatically generated by the packaging tool.</p> <p>Optional operation</p> <ul> <li>Add a custom icon.png to the plugin-config folder as the icon of the plugin (it may not be provided, the default icon is used. The icon.png requires 128x128 pixels)</li> <li>Add a custom card_image.png to the plugin-config folder as the background image of the plugin icon (it may not be provided, the default background is displayed. The card_image.png requires 560x240 pixels)</li> </ul>"},{"location":"plugins/#4-modify-the-plugin-registration-function-in-the-entryjs-file","title":"4. Modify the plugin registration function in the entry.js file","text":"<p>Modify</p> <pre><code>window.app.registerPluginItemCallback(\"test\", TaskList.execute);\n</code></pre> <p>to</p> <pre><code>window.app.registerPluginItemCallback(name, TaskList.execute);\n</code></pre> <p>The name value here is the \"name\" value in plugin-config/info.json.</p>"},{"location":"plugins/#5-add-plugin-development-configuration-file","title":"5. Add plugin development configuration file","text":"<p>There is a file setting.local.dist.js in the project src folder, copy it and name it setting.local.js</p> <p>The content of the file is as follows, and you can modify it according to the comments</p> <pre><code>const config = {\n  APIToken: \"**\", // The apiToken of the dtable\n  server: \"**\", // The deployment URL of the dtable\n  workspaceID: \"**\", // The workspaceID of the dtable\n  dtableName: \"**\", // The name of the dtable to which the plugin\n  lang: \"**\", // Plugin default language type, 'en' or 'zh-cn'\n};\n</code></pre>"},{"location":"plugins/#6-start-development","title":"6. Start development","text":"<p>Run local development environment</p> <pre><code>$ npm start\n</code></pre> <p>Open localhost:3000 on the browser, you can see that the plugin dialog has been opened, and the interface function provided by the dtable-sdk library is displayed by default in the dialog</p> <ol> <li>getTables: obtained table information of the dtable base</li> <li>getRelatedUsers: get detailed information of dtable collaborators</li> </ol> <p>Main code and purpose</p> <ul> <li>/src/index.js: entry file for local development plugin</li> <li>/src/entry.js: follow the entry file when SeaTable is run as a plugin</li> <li>/src/app.js: the main code of the plugin</li> </ul>"},{"location":"plugins/#7-display-basic-information-of-the-table","title":"7. Display basic information of the table","text":"<p>Write a TableInfo component, this component needs to pass in two props, tables and collaborators</p> <pre><code>class TableInfo extends React.Component {}\n\nconst propTypes = {\n  tables: PropTypes.array.isRequired,\n  collaborators: PropTypes.array.isRequired,\n};\n\nTableInfo.propTypes = propTypes;\n\nexport default TableInfo;\n</code></pre> <p>Get the number of tables</p> <pre><code>getTablesNumber = (tables) =&gt; {\n  return tables &amp;&amp; Array.isArray(tables) ? tables.length : 0;\n};\n</code></pre> <p>Get the number of records</p> <pre><code>getRecords = (tables) =&gt; {\n  let recordsNumber = 0;\n  if (!tables) return recordsNumber;\n  for (let i = 0; i &lt; tables.length; i++) {\n    const table = tables[i];\n    const rows = table.rows;\n    if (rows &amp;&amp; Array.isArray(rows)) {\n      recordsNumber += rows.length;\n    }\n  }\n  return recordsNumber;\n};\n</code></pre> <p>Get the number of collaborators</p> <pre><code>renderCollaborators = (collaborators) =&gt; {\n  if (!collaborators || !Array.isArray(collaborators)) {\n    return null;\n  }\n  return collaborators.map((collaborator, index) =&gt; {\n    return (\n      &lt;div key={index} className=\"collaborator\"&gt;\n        &lt;span className=\"collaborator-avatar-container\"&gt;\n          &lt;img\n            className=\"collaborator-avatar\"\n            alt=\"\"\n            src={collaborator.avatar_url}\n          /&gt;\n        &lt;/span&gt;\n        &lt;span className=\"collaborator-name\"&gt;{collaborator.name}&lt;/span&gt;\n      &lt;/div&gt;\n    );\n  });\n};\n</code></pre> <p>Interface rendering: the number of tables, the number of records and the number of collaborators</p> <pre><code>render() {\n  const { tables, collaborators } = this.props;\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{'Number of tables: '}{this.getTablesNumber(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Total number of records: '}{this.getRecords(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Number of collaborators: '}{collaborators ? collaborators.length : 0}&lt;/div&gt;&lt;br/&gt;\n      &lt;div className=\"plugin-collaborators\"&gt;{this.renderCollaborators(collaborators)}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>In the parent component app.js, use the <code>TableInfo</code> component , modify the render function in app.js, and pass in tables and collaborators.</p> <pre><code>import TableInfo from './table-info';\n\nclass App extends React.Component{\n  let tables = this.dtable.getTables();\n  let collaborators = this.dtable.getRelatedUsers();\n  render() {\n    return (\n      &lt;Modal isOpen={showDialog} toggle={this.onPluginToggle} contentClassName=\"dtable-plugin plugin-container\" size='lg'&gt;\n        &lt;ModalHeader className=\"test-plugin-header\" toggle={this.onPluginToggle}&gt;{'Plugin'}&lt;/ModalHeader&gt;\n        &lt;ModalBody className=\"test-plugin-content\"&gt;\n          &lt;TableInfo tables={tables} collaborators={collaborators}/&gt;\n        &lt;/ModalBody&gt;\n      &lt;/Modal&gt;\n    );\n  }\n}\n</code></pre> <p>Add the css/table-info.css file and modify the style of the plugin.</p> <p>Run <code>npm start</code> again, you can see the following information on the browser localhost: 3000.</p> <pre><code>Number of tables: X\nTotal number of records: XXX\nNumber of collaborators: X\n</code></pre>"},{"location":"plugins/#8-package-upload-plugin","title":"8. Package upload plugin","text":"<ol> <li> <p>Execute <code>npm run build-plugin</code> to package the plugin, and the path of the packaged plugin is /plugin/task.zip</p> </li> <li> <p>Upload the plugin task.zip to dtable</p> </li> </ol>"},{"location":"plugins/environments/","title":"dtable","text":""},{"location":"plugins/environments/#init","title":"Init","text":"<p>The plugin development environment is divided into two types, the development environment and the production environment. Because of the different environments, the initialization methods are also different:</p> <ul> <li> <p>In the development environment, you need to provide the configuration file required by the plugin, which is used to initialize the plugin and obtain the data required by the plugin.</p> </li> <li> <p>In the production environment, you need to install the plugin, then the plugin can directly read the data of the base in the current browser to initialize the plugin.</p> </li> </ul>"},{"location":"plugins/environments/#initialize-the-plugin","title":"Initialize the plugin","text":""},{"location":"plugins/environments/#development-environment","title":"Development environment","text":"<p>Initialize the plugin in the development environment</p> <pre><code>import DTable from \"dtable-sdk\";\n\nconst dtable = new DTable();\nconst settings = {\n  server: \"https://cloud.seatable.cn\",\n  APIToken: \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n};\nawait dtable.init(config);\n</code></pre>"},{"location":"plugins/environments/#production-environment","title":"Production environment","text":"<p>Initialize the plugin in the production environment</p> <pre><code>import DTable from \"dtable-sdk\";\n\nconst dtable = new Dtable();\nconst dtableStore = window.app.dtableStore; // Get initialization data from the production environment\nawait dtable.initBrowser(dtableStore);\n</code></pre>"},{"location":"plugins/environments/#monitoring-event-changes","title":"Monitoring event changes","text":""},{"location":"plugins/environments/#subscribe-events","title":"Subscribe events","text":"Event type description use dtable-connect Indicates that a link has been established with the server, and the data loading is complete Update state and UI display local-dtable-changed Indicates that some operations have been performed locally, and the data has changed Update state and UI display remote-dtable-changed Indicates that some operations sent by the server have been performed locally, and the data has changed Update state and UI display <pre><code>import DTable from 'dtable-sdk';\n\nconst dtable = new Dtable();\ndtable.subscribe('dtable-connect', () =&gt; {...});\ndtable.subscribe('local-dtable-changed', () =&gt; {...});\ndtable.subscribe('remote-dtable-changed', () =&gt; {...});\n</code></pre>"},{"location":"plugins/environments/#example","title":"Example","text":"<p>This is an initialization example in the development environment.</p> <p>Since two environments need to be compatible, the initialization operations for general plugin development are as follows:</p> <pre><code>import Dtable from 'dtable-sdk';\nimport PropTypes from 'prop-types';\n\nconst propsTypes = {\n  isDevelopment: PropTypes.bool\n};\n\nconst settings = {\n  \"server\": \"https://cloud.seatable.cn\",\n  \"APIToken\": \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n    this.dtable = new Dtable();\n  }\n\n  async componentDidMount() {\n    const { isDevelopment } = this.props;\n    if (isDevelopment) {\n      await dtable.init(settings);\n      await this.dtable.syncWithServer();\n      this.dtable.subscribe('dtable-connect', this.resetData);\n    } else {\n      const dtableStore = window.app.dtableStore;\n      dtable.initBrowser(dtableStore);\n    }\n\n    this.dtable.subscribe('local-dtable-changed', this.resetData);\n    this.dtable.subscribe('remote-dtable-changed', this.resetData);\n  }\n\n  resetData = () =&gt; {\n    // ...\n    this.setState({isLoading: false});\n  }\n\n  render() {\n    return (\n      ...\n    );\n  }\n\n}\n</code></pre>"},{"location":"plugins/methods/","title":"Methods","text":"<p>This is a list of all available objects and methods in SeaTable you can use in the plugin development.</p> <p>For a more detailed description of the used parameters, refer to the data model at the SeaTable API Reference.</p>"},{"location":"plugins/methods/#common","title":"Common","text":"<p>Base represents a table in SeaTable. The <code>base</code> object provide a way to read, manipulate and output data in/from your base. The following methods are available.</p>"},{"location":"plugins/methods/#users","title":"Users","text":"getRelatedUsers <p>Get other users associated with the current base (collaborators of the table, the shared person of the table, etc.)</p> <pre><code>dtable.getRelatedUsers()\n</code></pre> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\n</code></pre> getCollaboratorsName <p>Get a list of names of collaborators</p> <p><pre><code>dtable.getCollaboratorsName(collaborators, value)\n</code></pre> Arguments</p> <ul> <li>collaborators: collaborator list in this base</li> <li>value: email list of collaborators</li> </ul> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\nconst value = ['abc@seafile.com', 'shun@seafile.com'];\nconst name = dtable.getCollaboratorsName(collaborators, value); // 'abc, shun'\n</code></pre>"},{"location":"plugins/methods/#views","title":"Views","text":"getViewRowsColor <p>Get the color attributes of the row data in the view</p> <pre><code>dtable.getViewRowsColor(rows, view, table)\n</code></pre> <p>Arguments</p> <ul> <li>rows: the rows of the color attribute</li> <li>view: view object</li> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\nconst rowsColor = dtable.getViewRowsColor(rows, view, table);\n</code></pre>"},{"location":"plugins/methods/#output","title":"Output","text":"getTableFormulaResults <p>Get the data in the calculation formula column of the table</p> <pre><code>dtable.getTableFormulaResults(table, rows)\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rows: row data of the relevant data of the calculation formula column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\nconst formulaResult = dtable.getTableFormulaResults(table, rows);\n</code></pre> getLinkCellValue <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getLinkDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getLinkDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getNumberDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getGeolocationDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getDurationDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getDateDisplayString <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"plugins/methods/#tables","title":"Tables","text":"addTable <p>Get a list of names of collaborators</p> <p>Example</p> deleteTable <p>Get a list of names of collaborators</p> <p>Example</p> renameTable <p>Get a list of names of collaborators</p> <p>Example</p> getTables <p>Get a list of names of collaborators</p> <p>Example</p> getActiveTable <p>Get a list of names of collaborators</p> <p>Example</p> getTableByName <p>Get a list of names of collaborators</p> <p>Example</p> getTableById <p>Get a list of names of collaborators</p> <p>Example</p> importDataIntoNewTable <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#views_1","title":"Views","text":"addView <p>Get a list of names of collaborators</p> <p>Example</p> deleteView <p>Get a list of names of collaborators</p> <p>Example</p> renameView <p>Get a list of names of collaborators</p> <p>Example</p> getViews <p>Get a list of names of collaborators</p> <p>Example</p> getNonArchiveViews <p>Get a list of names of collaborators</p> <p>Example</p> getActiveView <p>Get a list of names of collaborators</p> <p>Example</p> getViewByName <p>Get a list of names of collaborators</p> <p>Example</p> getViewById <p>Get a list of names of collaborators</p> <p>Example</p> isDefaultView <p>Get a list of names of collaborators</p> <p>Example</p> isGroupView <p>Get a list of names of collaborators</p> <p>Example</p> isFilterView <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#columns","title":"Columns","text":"getColumns <p>Get a list of names of collaborators</p> <p>Example</p> getShownColumns <p>Get a list of names of collaborators</p> <p>Example</p> getColumnsByType <p>Get a list of names of collaborators</p> <p>Example</p> getColumnByName <p>Get a list of names of collaborators</p> <p>Example</p> getColumnByKey <p>Get a list of names of collaborators</p> <p>Example</p> modifyColumnData <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#rows","title":"Rows","text":"sqlQuery <p>Use sql statement to query a dtable</p> <pre><code>dtable.sqlQuery(sql)\n</code></pre> <p>Arguments</p> <ul> <li>sql: SQL statement to be executed</li> </ul> <p>Note: By default, up to 100 results are returned. If you need more results, please add the limit parameter in the sql statement</p> <p>Possible errors include</p> <ul> <li>ValueError: sql can not be empty</li> <li>ConnectionError: network error</li> <li>Exception: no such table</li> <li>Exception: no such column</li> <li>Exception: columns in group by should match columns in select</li> </ul> <p>Example</p> <pre><code>dtable.sqlQuery('select name, price, year from Bill')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>WHERE</p> <pre><code>dtable.sqlQuery('select name, price from Bill where year = 2021 ')\n</code></pre> <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre> <p>ORDER BY</p> <pre><code>dtable.sqlQuery('select name, price, year from Bill order by year')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre> <p>GROUP BY</p> <pre><code>dtable.sqlQuery('select name, sum(price) from Bill group by name')\n</code></pre> <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre> <p>DISTINCT</p> <pre><code>dtable.sqlQuery('select distinct name from Bill')\n</code></pre> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre> appendRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> deleteRowById <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> deleteRowsByIds <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> modifyRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> forEachRow <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getTableLinkRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getViewRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getGroupRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getInsertedRowInitData <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getRowsByID <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> getRowById <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> moveGroupRows <p>Get a list of names of collaborators</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"plugins/methods/#plugins","title":"Plugins","text":"getPluginSettings <p>Get a list of names of collaborators</p> <p>Example</p> updatePluginSettings <p>Get a list of names of collaborators</p> <p>Example</p> deletePluginSettings <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"plugins/methods/#constants","title":"Constants","text":"ColumnTypes <p>Get a list of names of collaborators</p> <p>Example</p> Column icon configs <p>Get a list of names of collaborators</p> <p>Example</p> Column options <p>Get a list of names of collaborators</p> <p>Example</p> Formula result type <p>Get a list of names of collaborators</p> <p>Example</p> Select option colors <p>Get a list of names of collaborators</p> <p>Example</p> Table permission type <p>Get a list of names of collaborators</p> <p>Example</p>"},{"location":"scripts/","title":"Scripting in SeaTable","text":""},{"location":"scripts/#supported-scripting-languages-and-requirements","title":"Supported scripting languages and requirements","text":"<p>Scripts are used to interact with the data in a base. SeaTable supports scripts written in JavaScript and Python. Both languages have different requirements and abilities. Let's try to summarize these to help you make the right choice depending on your needs.</p> JavaScript Python Requirements None Eventually <code>seatable-api</code> library or Python Pipeline (see Execution environment) Data operations Simple (mainly tailored for single-line operations) More complex (more available operations, possibility of using external libraries) Execution environment In SeaTable - In SeaTable (self-hosted with the Python Pipeline installed, or Cloud)- Locally or on a server (need to install <code>seatable-api</code> library) Authentication Not needed Needed Main advantage - Ready to use (no requirement, no authentication)- Rather simple (both advantage and disadvantage) - Local execution convenient for development and debugging purposes- Easily integrated into larger projects"},{"location":"scripts/#how-to-start","title":"How to start?","text":"<p>Both JavaScript and Python scripts can be composed and executed directly in a SeaTable base.</p> <p></p> <p>Here are some additional help articles from the User Manual's scripts section explaining how to create, execute and monitor a script in SeaTable:</p> <ul> <li>Creating and deleting a script</li> <li>Run script manually, by button or by automation</li> <li>The execution log of scripts</li> </ul> <p>You'll find in this manual a JavaScript and a Python section. For both of them, each chapter provides you with explanations about the available objects and methods (description with the eventual arguments and one or more simple use cases). </p> <p>Multiple JavaScript and Python examples should help you to start immediately and get a feeling about the possibilities.</p>"},{"location":"scripts/javascript/common_questions/","title":"Common questions (JavaScript)","text":"How to output the content of a variable? <p>To output the content of a variable you should use either no punctuation mark at all (for variable only) or dollar/brackets inside backticks <code>`${}`</code>.</p> <pre><code>const myVariable = 462;\n// variable-only output\noutput.text(myVariable); /* (1)! */\n\n// prettier output formatting\noutput.text(`the content of my variable is ${myVariable}`); /* (2)! */\n\n// Simple/Double quotes won't work as they are used to encapsulate strings\noutput.text(\"myVariable\"); /* (3)! */\noutput.text('myVariable'); /* (4)! */\n</code></pre> <ol> <li> <p>Returns <code>462</code></p> </li> <li> <p>Returns <code>the content of my variable is 462</code></p> </li> <li> <p>Returns <code>myVariable</code></p> </li> <li> <p>Returns <code>myVariable</code></p> </li> </ol> The display of complex elements (tables, arrays of rows) is sometimes difficult to read <p>Do not hesitate to use <code>console.log</code> and to check your browser console. Otherwise, you could try to use this function (or to create your own) at the beginning of your scripts:</p> <pre><code>function jsonPrettyFormat(json, indent=0) {\n    const indenterChar = \"\u2003\"; /* (1)! */\n    if (json instanceof Array) {\n        output.text(indenterChar.repeat(indent) + \"[\");\n        indent += 1;\n        json.forEach((elem)=&gt;jsonPrettyFormat(elem,indent));\n        indent -= 1;\n        output.text(indenterChar.repeat(indent) + \"]\");\n    }\n    else {\n        if (!(typeof(json)==\"object\")) {\n            output.text(indenterChar.repeat(indent) + json);\n        } else {\n            output.text(indenterChar.repeat(indent) + \"{\");\n            indent += 1;\n            for (const [key, value] of Object.entries(json)) {\n                if (!(typeof(value)==\"object\")) {\n                    output.text(indenterChar.repeat(indent) + key + \": \" + value)\n                } else {\n                    output.text(indenterChar.repeat(indent) + key + \": \");\n                    indent += 1;\n                    jsonPrettyFormat(value,indent);\n                }\n            }\n            indent -= 1;\n            output.text(indenterChar.repeat(indent) + \"}\");\n        }\n    }\n}\n</code></pre> <ol> <li>Please note that the indent character is not a classic space character as the output window of SeaTable's script editor actually trims indent spaces.</li> </ol> <p>Just call it on an object to see the result</p> <pre><code>let rows = base.getRows('Daily expenses', 'Default View');\njsonPrettyFormat(rows);\n</code></pre>"},{"location":"scripts/javascript/examples/","title":"Examples","text":"<p>This documentation currently contains three easy-to-follow examples of JavaScript scripts. </p> <p>For each example, you'll need a special base structure so that you can just copy&amp;paste the scripts into SeaTable and run them.</p> <p>If you don't want to recreate the tables, here are two bases containing the tables required for each example, depending on whether you want to recreate the scripts yourself or you prefer them to already be present:</p> <ul> <li>Examples material (without scripts)</li> <li>Examples material (scripts included)</li> </ul> <p>Once downloaded, you can easily create a base from the DTABLE file.</p>"},{"location":"scripts/javascript/examples/#add-rows","title":"Add rows","text":"<p>This script demonstrates how to add rows to record monthly repetitive expenses in a ledger.</p> <p>read more </p>"},{"location":"scripts/javascript/examples/#calculate-accumulated-value","title":"Calculate accumulated value","text":"<p>This script computes an accumulated value (adds the value of the current row and the previous rows), similar to the Calculate accumulated value operation from the data processing menu.</p> <p>read more </p>"},{"location":"scripts/javascript/examples/#statistics","title":"Statistics","text":"<p>This script computes, from a list of clocking times, daily clock in (earliest clocking) and clock out (latest clocking) times for each day and staff member.</p> <p>read more </p>"},{"location":"scripts/javascript/examples/auto-add-rows/","title":"Add rows","text":"<p>This script adds two expenses rows in a ledger. Before adding them, it checks if they have already been added for the current month.</p> <p>Here is the structure of the table named <code>Daily expenses</code> you need so that this script could run:</p> Column name Name Date Type Type (single select) Fee Column type text date text single select number <p>With JavaScript scripts, you have to ensure before running the script that the options you want to add (in this case <code>Cloud service</code> and <code>Daily office</code>) already exist in your \"single select\"-type column.</p> <pre><code>// Record monthly repetitive expenses in a ledger\n\nconst table = base.getTableByName('Daily expenses');\n\n// Get date objects on the 10th and 20th of the current month\nvar date = new Date();\nvar date10 = new Date(date.setDate(10));\nvar date20 = new Date(date.setDate(20));\n\n// Check if the monthly expense items have already been created and eventually create them\nconst AWSCondition = \"Name='Amazon Cloud Service' and Date='\" + base.utils.formatDate(date10) + \"'\";\nconst feeAWSCurrentMonth = base.filter('Daily expenses', 'Default View', AWSCondition);\nif (feeAWSCurrentMonth.count() == 0) {\n  var feeAWS = { 'Name': 'Amazon Cloud Service', \n                 'Date': base.utils.formatDate(date10),\n                 'Type': 'Cloud service',\n                 'Type (single select)': 'Cloud service',\n               };\n}\nconst CleanCondition = \"Name='Clean' and Date='\" + base.utils.formatDate(date20) + \"'\";\nconst feeCleanCurrentMonth = base.filter('Daily expenses', 'Default View', CleanCondition);\nif (feeCleanCurrentMonth.count() == 0) {\n  var feeClean = { 'Name': 'Clean', \n                   'Date': base.utils.formatDate(date20),\n                   'Type': 'Daily office',\n                   'Type (single select)': 'Daily office',\n                   'Fee': 260\n                 };\n}\n\n// Auto add data (if needed)\nif (feeAWS) {\n  base.appendRow(table, feeAWS);\n}\nif (feeClean) {\n  base.appendRow(table, feeClean);\n}\n</code></pre>"},{"location":"scripts/javascript/examples/calculate-accumulated-value/","title":"Calculate accumulated value","text":"<p>This script accumulates the values of the current row and the previous rows, and records the result to the current row. It does the same than the Calculate accumulated value operation from the data processing menu. If there's a grouping rule active on the view, accumulated values will be calculated for each group.Otherwise, values are accumulated for all rows. Please not that this script only supports grouping by a single column.</p> <p>Here is the structure of the table named <code>Accumulated value</code> you need so that this script could run:</p> Column name Value to add Incremental total Grouping column Column type number number single select <pre><code>// Accumulates the values of the current row and the previous rows, and records the result to the current row\nconst tableName = 'Accumulated value';\nconst viewName = 'Default View';\n\n// Name of the column that records total number at a specific time\nconst valueColumnName = 'Value to add';\n// Name of the column that need to calculate incremental value\nconst incrementalColumnName = 'Incremental total';\n\nconst table = base.getTableByName(tableName);\nconst view = base.getViewByName(table, viewName);\n\n// If current view is a grouped view\nif (view.groupbys &amp;&amp; view.groupbys.length &gt; 0) {\n  // Get group view rows\n  const groupViewRows = base.getGroupedRows(table, view);\n\n  groupViewRows.map((group) =&gt; {\n    let incrementalTotal = 0;\n    group.rows.map((row, rowIndex, rows) =&gt; {\n        // Get current row value\n        const currentNumber = row[valueColumnName];\n        if (!currentNumber) return;\n        // Calculate increment\n        const previousRow = rows[rowIndex - 1];\n        // If there is no previousRow, set increaseCount to 0\n        const previousNumber = rowIndex&gt;0 ? incrementalTotal : 0;\n        const increaseCount = currentNumber + previousNumber;\n        incrementalTotal = increaseCount;\n        // Set calculated increment to row\n        base.updateRow(table, row, {[incrementalColumnName]: increaseCount});\n    });\n  });\n} else {\n    // Get current view rows\n    let incrementalTotal = 0;\n    const rows = base.getRows(table, view);\n    rows.forEach((row, rowIndex, rows) =&gt; {\n    // Calculate increment\n    const currentNumber = row[valueColumnName];\n    if (!currentNumber) return;\n    const previousRow = rows[rowIndex - 1];\n    // If there is no previousRow, set increaseCount to 0\n    const previousNumber = rowIndex&gt;0 ? incrementalTotal : 0;\n    const increaseCount = currentNumber + previousNumber;\n    incrementalTotal = increaseCount;\n    // Set calculated increment to row\n    base.updateRow(table, row, {[incrementalColumnName]: increaseCount});\n  });\n}\n</code></pre>"},{"location":"scripts/javascript/examples/compute-attendance-statistics/","title":"Compute attendance statistics","text":"<p>This script computes, from a list of clocking times, daily clock in (earliest clocking) and clock out (latest clocking) times for each day and staff member.</p> <p>Here is the structure of the table named <code>Clocking table</code> that contains the input data:</p> Column name Name Department Date Clocking time Column type text single select date duration <p>And the structure of the table <code>Attendance statistics</code> where the daily summarized values will be stored:</p> Column name Name Department Date Clock-in Clock-out Column type text single select date duration duration <pre><code>// Computes, from a list of clocking times, daily clock in (earliest clocking) \n// and clock out (latest clocking) times for each day and staff member\nconst originTableName = 'Clocking table';\nconst originViewName = 'Default View';\nconst originNameColumnName = 'Name';\nconst originDepartmentColumnName = 'Department';\nconst originDateColumnName = 'Date';\nconst originTimeColumnName = 'Clocking time';\n\nconst targetTableName = 'Attendance statistics';\nconst targetNameColumnName = 'Name';\nconst targetDepartmentColumnName = 'Department';\nconst targetDateColumnName = 'Date';\nconst targetStartTimeColumnName = 'Clock-in';\nconst targetEndTimeColumnName = 'Clock-out';\nconst targetTable = base.getTableByName(targetTableName);\n\nconst table = base.getTableByName(originTableName);\nconst view = base.getViewByName(table, originViewName);\nconst rows = base.getRows(table, view);\n\n// Sort the rows in the table according to the date column;\nrows.sort((row1, row2) =&gt; {\n    if (row1[originDateColumnName] &lt; row2[originDateColumnName]) {\n      return -1;\n    } else if (row1[originDateColumnName] &gt; row2[originDateColumnName]) {\n      return 1; \n    } else {\n      return 0;\n    }\n});\n\n/*\n Group all rows via date and save them to groupedRows, the format\n of the object is {'2020-09-01': [row, ...], '2020-09-02': [row, ...]}\n*/\nconst groupedRows = {};\nrows.forEach((row) =&gt; {\n  const date = row[originDateColumnName]; \n  if (!groupedRows[date]) {\n    groupedRows[date] = [];\n  }\n  groupedRows[date].push(row);\n});\n\nconst dateKeys = Object.keys(groupedRows);\n\n// Traverse all the groups in groupedRows\ndateKeys.forEach((dateKey) =&gt; { \n  // Get all clocking data of all members for the current date\n  const dateRows = groupedRows[dateKey];\n  const staffDateStatItem = {};\n  // Traverse these rows and group by the name of the employee, get the clock-in and clock-out time of each employee that day, and save it to staffDateStatItem\n  // the format is { EmployeeName: {Name: 'EmployeeName', Date: '2020-09-01', Clock-in: '08:00', Clock-out: '18:00'},... }\n  dateRows.forEach((row)=&gt; {\n    const name = row[originNameColumnName];\n    if (!staffDateStatItem[name]) {\n      // Generate a new row based on the original row data, and add Clock-in and Clock-out columns in the newly generated row\n      staffDateStatItem[name] = { [targetNameColumnName]: name, [targetDateColumnName]: row[originDateColumnName], [targetDepartmentColumnName]: row[originDepartmentColumnName], [targetEndTimeColumnName]: row[originTimeColumnName], [targetStartTimeColumnName]: row[originTimeColumnName]};\n    } else {\n      // When another record (same employee and same date) is found, compare the time, choose the latest one as the Clock-out time, and the earliest one as the Clock-in time\n      const time = row[originTimeColumnName];\n      const staffItem = staffDateStatItem[name];\n      if (staffItem[targetStartTimeColumnName] &gt; time) {\n          staffItem[targetStartTimeColumnName] = time;\n      } else if (staffItem[targetEndTimeColumnName] &lt; time) {\n          staffItem[targetEndTimeColumnName] = time;\n      }\n    }\n  });\n  // Write the attendance data of all employees on the current date into the table\n  Object.keys(staffDateStatItem).forEach((name) =&gt; {\n    base.appendRow(targetTable, staffDateStatItem[name]);\n  });  \n});\n</code></pre>"},{"location":"scripts/javascript/objects/","title":"Predefined objects in SeaTable (JavaScript)","text":"<p>The JavaScript scripts run directly in the current browser and are suitable for simple data processing. JavaScript does not require any authentication.</p> <p>This manual list all available objects and methods (also called functions) that are available within JavaScript scripts in SeaTable. On top, normal JavaScript operations like <code>console.log</code> or calculations are working as usual. By running directly in SeaTable, JavaScript scripts have the ability to access the base context. Base utilities and specific output methods are also available. Unless otherwise stated, all method arguments are required.</p> <p>Two JavaScript APIs in SeaTable</p> <p>SeaTable offers two different ways to use JavaScript with SeaTable. You can executing a JavaScript script directly in SeaTable and there is a JavaScript Client API. The functions are similar but not identical. If you want to use a JavaScript script in SeaTable, stay at this section, otherwise switch to the Client APIs.</p>"},{"location":"scripts/javascript/objects/#data-model","title":"Data model","text":"<p>As a developer you typically interact with a single base. In SeaTable, a base can contain multiple tables, each one containing multiple rows and columns (or fields) and eventually multiple views used to filter, sort and/or group these rows and columns. The logic is like this:</p> <pre><code>SeaTable Base\n\u251c\u2500 Table 1 (Column A | Column B | Column C)\n\u2502  \u2514\u2500 View A (Column A | Column B | Column C)\n|     \u2514\u2500 Row 1\n|     \u2514\u2500 Row 2\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 ...\n\u2502  \u2514\u2500 View B (Column A | Column C)\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 Row 4\n\u2514\u2500 Table 2\n|  \u2514\u2500 ...\n</code></pre> <p>Every objects and methods will help you interact with this architecture. For details about the different objects (tables, view, rows &amp; columns and links) you can look at the global structure presented in each object page or at the SeaTable API Reference for even more information.</p> <p>Need a specific function?</p> <p>The JavaScript class does not yet cover all available functions of the SeaTable API. If you are missing a special function, please contact us at support@seatable.io and we will try to add the missing functions.</p>"},{"location":"scripts/javascript/objects/#getting-started","title":"Getting started","text":"<p>Let's have a look at some basic examples. You will learn that it is quite easy to read, output and even manipulate the data of a base inside SeaTable with the predefined objects and the corresponding methods. Here is how to run these examples in your environment:</p> <ol> <li>Jump to your SeaTable web interface</li> <li>Create a new Script of the type <code>JavaScript</code></li> <li>Copy the following code (you might have to change tables' or columns' names)</li> <li>Run the script</li> </ol> Get number of tablesGet column namesGet row contentWrite new rowUpdate one specific row <pre><code>const tables = base.getTables(); // (1)!\noutput.text(tables.length); // (2)!\n</code></pre> <ol> <li> <ol> <li><code>base</code> is the predefined-object provided by SeaTable containing all tables of a base.</li> <li><code>getTables()</code> is the function to get all bases from the object <code>base</code>.</li> </ol> </li> <li> <ol> <li><code>output</code> is also a predefined-object provided by SeaTable.</li> <li><code>length</code> is just a pure JavaScript property.</li> </ol> </li> </ol> <p>As you can see, the script will output the number of tables in your base. Read the comments at the end of both lines to get more information about the difference between a predefined object, a function of this object and a pure JavaScript property.</p> <pre><code>const table = base.getTableByName('Table1'); // (1)!\nconst columns = base.getColumns(table); // (2)!\n\nfor (var i=0; i&lt;columns.length; i++) {  // (3)!\n    output.text(columns[i].name + \" (\" + columns[i].type + \")\")\n}\n</code></pre> <ol> <li>get the content of the table <code>Table1</code> (replace <code>Table1</code> with your actual table name).</li> <li>get the columns of the table <code>Table1</code> in an array.</li> <li>iterate over all columns of the array <code>columns</code>.</li> </ol> <p>This will return all column names and the column types.</p> <pre><code>const table = base.getTableByName('Table1'); // (1)!\nconst view = base.getViewByName(table, 'Default View'); // (2)!\nconst rows = base.getRows(table, view); // (3)!\n\nfor (var i=0; i&lt;rows.length; i++) { // (4)!\n    const row = rows[i];\n    output.text('&gt;&gt;&gt; new row &lt;&lt;&lt;')\n    output.text(row);\n    output.text(row['Name']);\n}\n</code></pre> <ol> <li>get the content of the table <code>Table1</code> (replace <code>Table1</code> with your actual table name).</li> <li>get the content of the view <code>Default View</code>.</li> <li>get the rows displayed in the view <code>Default View</code> of the table <code>Table1</code>.</li> <li>iterate over all rows and print them</li> </ol> <p>This time, we will get content of the <code>Name</code> column for each row displayed in the view <code>Default View</code> of the table <code>Table1</code>.</p> <pre><code>const table = base.getTableByName('Table1'); // (1)!\n\nconst newRow = { // (2)!\n    'Name': 'Hugo',\n    'Age': 3,\n};\n\ntry {\n    const row = base.addRow(table, newRow);\n    output.text(`New row added with _id: ${row._id}`);\n} catch (error) {\n    output.text(`Error adding row: ${error}`);\n}\n</code></pre> <ol> <li>get the content of the table <code>Table1</code> (replace <code>Table1</code> with your actual table name).</li> <li>create an object containing column names <code>Name</code> and <code>Age</code> and the values you would like to set.</li> </ol> <pre><code>// Get the table\nconst table = base.getTableByName('Table1');\n\n// Specify the row_id you want to update\nconst rowId = 'KDW9PZMkTOuwtx71pmAMxA'; // (1)!\n\n// Define the updates you want to make\n// Replace 'Name' with the actual column name you want to update\n// and 'NewValue' with the new value you want to set\n// You can define more key:value pairs if you want to update\n// several values of the row at the same time\nconst updates = {\n    'Name': 'NewValue'\n};\n\nbase.updateRow(table, rowId, updates); // (2)!\n</code></pre> <ol> <li>define the id of the row you want to modify. You can also use <code>base.context.currentRow;</code> to access the current (selected) row.</li> <li>update each values contained in the object <code>updates</code> of the row whose id is <code>rowId</code> in the table <code>Table1</code>.</li> </ol> <p>Do not hesitate to write comments in your code. It will help you (or others) to understand it more easily afterwards.</p>"},{"location":"scripts/javascript/objects/columns/","title":"Columns","text":"<p>You'll find below all the available methods to interact with the columns of a SeaTable table.</p>"},{"location":"scripts/javascript/objects/columns/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a column object:</p> <pre><code>{\n    \"key\":\"bjcM\",\n    \"type\":\"number\",\n    \"name\":\"Val\",\n    \"editable\":true,\n    \"width\":200,\n    \"resizable\":true,\n    \"draggable\":true,\n    \"data\": // (1)!\n        {\n            \"format\":\"number\",\n            \"precision\":2,\n            \"enable_precision\":false,\n            \"enable_fill_default_value\":false,\n            \"enable_check_format\":false,\n            \"decimal\":\"comma\",\n            \"thousands\":\"no\",\n            \"format_min_value\":0,\n            \"format_max_value\":1000\n        },\n    \"permission_type\":\"\",\n    \"permitted_users\":[],\n    \"permitted_group\":[],\n    \"edit_metadata_permission_type\":\"\",\n    \"edit_metadata_permitted_users\":[],\n    \"edit_metadata_permitted_group\":[],\n    \"description\":null,\n    \"colorbys\":{},\n    \"editor\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        },\n    \"formatter\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        }\n}\n</code></pre> <ol> <li>See below for a presentation of <code>data</code> object keys depending on the column <code>type</code></li> </ol> <p>Columns particularities</p> <ul> <li>Unless other elements, columns don't have an <code>_id</code>, but a <code>key</code></li> <li>Link-type columns also have a link id that should not be mistaken with the column <code>key</code>. This value is present in the <code>data</code> object (see below)</li> </ul>"},{"location":"scripts/javascript/objects/columns/#column-data","title":"Column data","text":"<p>The <code>data</code> object keys will depend on the column <code>type</code> and will allow you to define the specific column parameters. Here is a list of the different <code>data</code> keys depending on the column <code>type</code>:</p> <p><code>text</code>, <code>email</code>, <code>long-text</code>, <code>image</code>, <code>file</code>, <code>url</code>, <code>creator</code>, <code>ctime</code>, <code>last-modifier</code>, <code>mtime</code></p> <p>empty</p> <code>link</code> <pre><code>{\n    \"display_column_key\":\"qqXZ\",\n    \"table_id\":\"0000\",\n    \"other_table_id\":\"XE5U\",\n    \"is_internal_link\":true,\n    \"is_multiple\":true,\n    \"only_adding_new_record\":false,\n    \"is_row_from_view\":false,\n    \"other_view_id\":\"\",\n    \"link_id\":\"OSD1\",\n    \"array_type\":\"text\",\n    \"array_data\":null,\n    \"result_type\":\"array\"\n}\n</code></pre> <code>number</code> <pre><code>{\n    \"format\":\"custom_currency\",\n    \"precision\":2,\n    \"enable_precision\":true,\n    \"enable_fill_default_value\":false,\n    \"decimal\":\"comma\",\n    \"thousands\":\"no\",\n    \"currency_symbol_position\":\"after\",\n    \"currency_symbol\":\"p\"\n}\n</code></pre> <code>date</code> <pre><code>{\n    \"format\":\"M/D/YYYY HH:mm\"\n}\n</code></pre> <code>duration</code> <pre><code>{\n    \"format\":\"duration\",\n    \"duration_format\":\"h:mm\"\n}\n</code></pre> <code>single select, multiple select</code> <pre><code>{\n    \"options\":\n        [\n            {\n                \"name\":\"Male\",\n                \"id\":\"783482\",\n                \"color\":\"#46A1FD\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#3C8FE4\"\n            },\n            {\n                \"name\":\"Female\",\n                \"id\":\"330935\",\n                \"color\":\"#DC82D2\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#D166C5\"\n            },\n            {\n                \"name\":\"Non-binary\",\n                \"id\":\"147140\",\n                \"color\":\"#ADDF84\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#9CCF72\"\n            }\n        ],\n        \"cascade_column_key\":\"Qvkt\",\n        \"cascade_settings\":\n            {\n                \"147140\":[\"783482\"],\n                \"330935\":[\"330935\"],\n                \"783482\":[\"783482\"]\n            }\n}\n</code></pre> <code>checkbox</code> <pre><code>{\n    \"default_value\":false,\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>rate</code> <pre><code>{\n    \"rate_max_number\":5,\n    \"rate_style_color\":\"#FF8000\",\n    \"default_value\":\"\",\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>formula</code> <pre><code>{\n    \"formula\":\"left({Email},search(\\\"@\\\",{Email},1)-1)\",\n    \"operated_columns\":[\"JfP2\"],\n    \"result_type\":\"string\",\n    \"enable_precision\":true,\n    \"precision\":1,\n    \"thousands\":\"no\"\n}\n</code></pre> <code>link-formula</code> <pre><code>{\n    \"formula\":\"findmax\",\n    \"result_type\":\"array\",\n    \"operated_columns\":[\"TaXD\"],\n    \"conditions\":[],\n    \"link_column_key\":\"TaXD\",\n    \"include_condition\":false,\n    \"condition_conjunction\":\"And\",\n    \"column_key_in_linked_record\":\"0000\",\n    \"column_key_for_comparison\":\"RSjx\",\n    \"level2_linked_table_column_key\":null,\n    \"array_type\":\"auto-number\",\n    \"array_data\":null\n}\n</code></pre> <code>geolocation</code> <pre><code>{\n    \"geo_format\":\"lng_lat\"\n}\n</code></pre> <code>auto-number</code> <pre><code>{\n    \"format\":\"YYYYMMDD-00\",\n    \"max_used_auto_number\":33,\n    \"digits\":2,\n    \"prefix_type\":\"date\",\n    \"prefix\":\"20250909\"\n}\n</code></pre> <code>button</code> <pre><code>{\n    \"button_type\":\"copy_row_to_another_table\",\n    \"button_name\":\"Copy to Table2\",\n    \"button_color\":\"#FFFCB5\",\n    \"table_id\":\"0000\"\n}\n</code></pre> <p>Accessing a particular data object value</p> <p>This rather long list is not exhaustive, however. If you need to access a specific <code>data</code> value, consult the SeaTable API Reference or create the corresponding column to display the content of its <code>data</code> object.</p>"},{"location":"scripts/javascript/objects/columns/#get-columns","title":"Get Column(s)","text":"<p>getColumnByName</p> <p>Get the column object of a particular <code>table</code>, specified by the column <code>name</code>.</p> <pre><code>base.getColumnByName(table: Object/String/* (1)! */, name: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Single column object (<code>undefined</code> if column <code>name</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst column = base.getColumnByName(table, 'Column name');\noutput.text(column.name);\n</code></pre></p> <pre><code>const column = base.getColumnByName('Table1', 'Column name');\n</code></pre> <p>getColumns</p> <p>Get all the columns of a specific <code>table</code>.</p> <pre><code>base.getColumns(table: Object/String/* (1)! */);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Array of column objects (throws an error if <code>table</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumns(table);\n\ncolumns.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre></p> <pre><code>const columns = base.getColumns('Table1');\n</code></pre> <p>listColumns</p> <p>Get the columns of a table (specified by its name <code>tableName</code>), optionally from a specific view (specified by its name <code>viewName</code>). If <code>viewName</code> is not set, all columns of the table will be returned (equivalent, in this case, to <code>base.getColumns</code>).</p> <pre><code>base.listColumns(tableName: String, viewName: String);\n</code></pre> <p>Output Array of column objects (throws an error if <code>table</code> doesn't exist)</p> <p>Example <pre><code>const tableName  = 'Table1'\nconst viewName = 'Default View'\nconst columns = base.listColumns(tableName, viewName);\n\ncolumns.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre></p> <pre><code>const columns = base.listColumns('Table1');\n</code></pre> <p>getShownColumns</p> <p>Get all the columns of a <code>table</code> displayed in a specific <code>view</code> (hidden columns are not returned).</p> <pre><code>base.getShownColumns(table: Object/String, view: Object/String/* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>view</code> (required): either a view object or the view name</p> </li> </ol> <p>Output Array of column objects (throws an error if <code>table</code> or <code>view</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'Default View');\nconst columns = base.getShownColumns(table, view);\ncolumns.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre></p> <pre><code>const columns = base.getShownColumns('Table1', 'Default View');\n</code></pre> <p>getColumnsByType</p> <p>Get all the columns of a specific <code>type</code> in a <code>table</code>.</p> <pre><code>base.getColumnsByType(table: Object/String, type: String /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>type</code> (required): the type of the column (see the API Reference for supported types)</p> </li> </ol> <p>Output Array of column objects (empty array if no corresponding columns or wrong <code>type</code>)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumnsByType(table, 'text');\noutput.text(columns.length);\n</code></pre></p> <pre><code>const columns = base.getColumnsByType('Table1', 'text');\noutput.text(columns.length);\n</code></pre>"},{"location":"scripts/javascript/objects/context/","title":"Context","text":"<p>When the script runs, the <code>context</code> object context-related elements. The usage is as follows.</p> <p>currentTable</p> <p>Currently selected table.</p> <pre><code>base.context.currentTable;\n</code></pre> <p>Output The name of the currently selected table</p> <p>Example</p> <pre><code>const name = base.context.currentTable;\noutput.text(`The name of the current table is: ${name}`);\n</code></pre> <p>currentRow</p> <p>Currently selected row. If the script is launched from a button click, this is the row on which the button was clicked.</p> <pre><code>base.context.currentRow;\n</code></pre> <p>Output Complete row object, including <code>_id</code>, <code>_mtime</code>, <code>_ctime</code>. If no row is selected, this function returns <code>undefined</code>.</p> <p>Example</p> <pre><code>const row = base.context.currentRow;\noutput.text(row);\n</code></pre>"},{"location":"scripts/javascript/objects/links/","title":"Links","text":"<p>link id and column key</p> <p><code>linkId</code> should not be mistaken with the column <code>key</code>! The <code>key</code> value is unique (like an id) whereas the link id will be shared between the two linked columns. Please note that <code>linkId</code> is used as argument to add/update/remove links, whereas you'll have to provide <code>linkColumnKey</code> (the link column <code>key</code>) to get linked records. Both information are available in the column object:</p> <pre><code>{\n\u2003\"key\": \"Cp51\", /* (1)! */\n\u2003\"type\": \"link\",\n\u2003\"name\": \"Link column\",\n\u2003\"editable\": true,\n\u2003\"width\": 200,\n\u2003\"resizable\": true,\n\u2003\"draggable\": true,\n\u2003\"data\": {\n\u2003\u2003\"display_column_key\": \"0000\",\n\u2003\u2003\"is_internal\": true,\n\u2003\u2003\"link_id\": \"UAmR\", /* (2)! */\n\u2003\u2003\"table_id\": \"FJkA\",  /* (3)! */\n\u2003\u2003\"other_table_id\": \"nw8k\",  /* (4)! */\n\u2003\u2003\"is_multiple\": true,\n\u2003\u2003\"is_row_form_view\": false,\n\u2003\u2003\"view_id\": \"\",\n\u2003\u2003\"array_type\": \"text\",\n\u2003\u2003\"array_data\": null,\n\u2003\u2003\"result_type\": \"array\"\n\u2003},\n\u2003\"permission_type\": \"\",\n\u2003\"permitted_users\": [],\n\u2003\"permitted_group\": [],\n\u2003\"edit_metadata_permission_type\": \"\",\n\u2003\"edit_metadata_permitted_users\": [],\n\u2003\"edit_metadata_permitted_group\": [],\n\u2003\"description\": null,\n\u2003\"colorbys\": {}\n}\n</code></pre> <ol> <li> <p>The column <code>key</code> (referred as <code>linkColumnKey</code> in <code>base.getLinkedRecords</code> arguments)</p> </li> <li> <p>The link id of the column (referred as <code>linkId</code> in the add/update/remove link(s) methods arguments)</p> </li> <li> <p>The table whose id is <code>table_id</code> is referred later in this section as the source table (the table containing this column)</p> </li> <li> <p>The table whose id is <code>other_table_id</code> is referred later in this section as the target table</p> </li> </ol>"},{"location":"scripts/javascript/objects/links/#get-linkid","title":"Get linkId","text":"<p>getColumnLinkId</p> <p>Get the link id of the column <code>columnName</code> from the table <code>tableName</code>.</p> <pre><code>base.getColumnLinkId(tableName: String, columnName: String);\n</code></pre> <p>Output String (throws an error if table <code>tableName</code> or column <code>columnName</code> doesn't exist)</p> <p>Example</p> <pre><code>base.getColumnLinkId('Table1', 'Table2 link');\n</code></pre>"},{"location":"scripts/javascript/objects/links/#get-linked-records","title":"Get linked records","text":"<p>Rows and records, source and target</p> <p>Rows and records are basically the same things. However, to make the following description easier to understand, we will differentiate them:</p> <ul> <li> <p>Rows are from the source table (the table whose id is <code>tableId</code>)</p> </li> <li> <p>Records are the rows from the target table (the table linked to the source table in the column whose <code>key</code> is <code>linkColumnKey</code> or whose link id is <code>linkId</code>)</p> </li> </ul> <p>getLinkedRecords</p> <p>List the records linked (in the column whose <code>key</code> is <code>linkColumnKey</code>) to one or more rows of the source table. The row(s) you want to get the linked records from are defined in the <code>linkedRows</code> object (see below).</p> <pre><code>await/* (1)! */ base.getLinkedRecords(tableId: String, linkColumnKey: String, linkedRows: Object) /* (2)! */;\n</code></pre> <ol> <li> <p><code>await</code> is used for asynchronous functions. This is required to ensure that the following operations (or the variable where you store the results) wait for the query's response to arrive before continuing to execute the script</p> </li> <li> <p><code>tableId</code>: the id of source table</p> <p><code>linkColumnKey</code>: the column key of the link-type column of source table (not the link id from <code>base.getColumnLinkId</code>)</p> <p><code>linkedRows</code>: an array of objects, each of them containing:</p> <ul> <li> <p><code>row_id</code>: the id of the row we want to get the linked records from</p> </li> <li> <p><code>limit</code>: the maximum number of linked records to get (default is 10)</p> </li> <li> <p><code>offset</code>: the number of first linked records not to retrieve (default is 0)</p> </li> </ul> </li> </ol> <p>Output A <code>key</code>:<code>value</code> data structure where each <code>key</code> is the id of a row of the source table and the corresponding value is an array of link objects (see Output structure example below)</p> <p>Example</p> Function runOutput structure example <pre><code>await base.getLinkedRecords('0000', '89o4', [\n{'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n{'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n]);\n</code></pre> <pre><code>{\n'FzNqJxVUT8KrRjewBkPp8Q' /* (1)! */: [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'} /* (2)! */,\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n],\n'Jmnrkn6TQdyRg1KmOM4zZg': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},\n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n]\n}\n</code></pre> <ol> <li> <p>id of a row of the source table</p> </li> <li> <p>link object: </p> <ul> <li><code>row_id</code> is the id of the linked record (row from the target table)</li> <li><code>display_value</code> is the displayed in the column whose <code>key</code> is <code>linkColumnKey</code> (from a column of the target table)</li> </ul> </li> </ol> <p>Output Object containing the linked records for each row (see Output structure example above)</p> <p>Example: Get linked records from current row</p> <pre><code>    const table = base.getTableByName('Table1');\n    const linkColumn = base.getColumnByName(table,'Table2 link');\n    const currentRowLinks = await base.getLinkedRecords(table._id, linkColumn.key, [{'row_id': base.context.currentRow._id, 'limit':100  /* (1)! */}]);\n    currentRowLinks[base.context.currentRow._id].forEach((link) =&gt; {output.text(link)});\n</code></pre> <ol> <li><code>limit</code>:100 =&gt; the response will return maximum 100 rows</li> </ol>"},{"location":"scripts/javascript/objects/links/#add-link","title":"Add link","text":"<p>addLink</p> <p>Add link in a link-type column. You'll need the source target's name <code>tableName</code>, the target table's name <code>linkedTableName</code>, the <code>linkId</code> from the link-type column and both the ids of the rows you want to link: <code>rowId</code> for the row from the source table and <code>linkedRowId</code> for the record from the target table.</p> <pre><code>base.addLink(linkId: String, tableName: String, linkedTableName: String, rowId: String, \n             linkedRowId: String);\n</code></pre> <p>Output Nothing</p> <p>Example</p> <pre><code>base.addLink('5WeC', 'Team Members', 'Contacts', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ');\n</code></pre> <p>Example: Add link to current row</p> <pre><code>// Do not hesitate to store the tables' and columns' names at the beginning of your script,\n// it will make it really easier to update if names change\nconst table1Name = \"Table1\";\nconst table1LinkColumnName = \"Table2 link\";\nconst table2Name = \"Table2\";\n\nconst linId = base.getColumnLinkId(table1Name,table1LinkColumnName); /* (1)! */\nconst currentRowId = base.context.currentRow._id;\nbase.addLink(linId, table1Name, table2Name, currentRowId, 'J5St2clyTMu_OFf9WD8PbA');\n</code></pre> <ol> <li>Remember you can use <code>base.getColumnLinkId</code> to get the link id of a specific link-type column.</li> </ol>"},{"location":"scripts/javascript/objects/links/#update-links","title":"Update link(s)","text":"<p>updateLinks</p> <p>Update the content of the link-type column whose link id is <code>linkId</code> for the row with id <code>rowId</code> in the table <code>tableName</code>. It will remove all existing row links and add new links to records of table <code>linkedTableName</code> with ids listed in the <code>updatedlinkedRowIds</code> array.</p> <pre><code>base.updateLinks(linkId, tableName, linkedTableName, rowId, updatedlinkedRowIds: Array of String);\n</code></pre> <p>Output Nothing</p> <p>Example</p> <pre><code>const records = base.getRows('Contacts', 'Default_view');\n// Update links for row from \"Team Members\" with _id CGtoJB1oQM60RiKT-c5J-g to [records[0]._id, records[1]._id, records[2]._id, records[3]._id]\n// Real-life tip: ensure that the array \"records\" actually contains at least 4 elements!\nbase.updateLinks('5WeC', 'Team Members', 'Contacts', 'CGtoJB1oQM60RiKT-c5J-g', [records[0]._id, records[1]._id, records[2]._id, records[3]._id]);\n</code></pre>"},{"location":"scripts/javascript/objects/links/#remove-link","title":"Remove link","text":"<p>removeLink</p> <p>Delete the link to the record from table <code>linkedTableName</code> whose id is <code>linkedRowId</code> in the row from table <code>tableName</code> whose id is <code>rowId</code>. Every arguments are <code>String</code>.</p> <pre><code>base.removeLink(linkId, tableName, linkedTableName, rowId, linkedRowId);\n</code></pre> <p>Output Nothing</p> <p>Example</p> <pre><code>base.removeLink('5WeC', 'Team Members', 'Contacts', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ');\n</code></pre>"},{"location":"scripts/javascript/objects/output/","title":"Output","text":"<p>Two functions are available to display results in the text editor window, allowing you to output strings in text or Markdown format.</p> <p>text</p> <p>Prints the content of <code>anything</code> as normal text. Code Syntax is ignored and just printed.</p> <pre><code>output.text(anything: String/Object/Array)\n</code></pre> <p>Output String</p> <p>Example</p> <pre><code>const table = base.getActiveTable();\noutput.text(table.name);\n</code></pre> <p>markdown</p> <p>Prints the content of <code>anything</code>, while using Markdown formatting to style the output.</p> <pre><code>output.markdown(anything: String/Object/Array)\n</code></pre> <p>Output String</p> <p>Example</p> <pre><code>const table = base.getActiveTable();\noutput.markdown(`# This is a headline and prints the name of the table: ${table.name}`);\n</code></pre>"},{"location":"scripts/javascript/objects/rows/","title":"Rows","text":"<p>You'll find below all the available methods to interact with the rows of a SeaTable table. In this section, you'll have to deal with the id of the rows. You can find few tips on how to get it in the user manual.</p>"},{"location":"scripts/javascript/objects/rows/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a row object: <pre><code>{\n  \"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n  \"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n  \"Name\": \"NewName\",\n  \"Date\": \"2020-08-01\",\n  \"Content\": \"111\",\n  \"link\": [\n            {\n              \"display_value\": \"1\",\n              \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n          ]\n}\n</code></pre></p> <p>Please note the specific format for link-type columns (structure of the array objects for key <code>link</code>):</p> <ul> <li> <p><code>display_value</code>: Value displayed in the cell</p> </li> <li> <p><code>row_id</code>: id of the linked row in the other table</p> </li> </ul>"},{"location":"scripts/javascript/objects/rows/#get-rows","title":"Get row(s)","text":"<p>getRow / getRowById (deprecated)</p> <p>Get a <code>table</code>'s row via its id <code>rowId</code>.</p> <pre><code>base.getRow(table: Object/String /* (1)! */, rowId: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Single row object (throws an error if <code>table</code> doesn't exist or if no row with the specified id <code>rowId</code> exists)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRow(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre> <pre><code>const row = base.getRow('Table1', \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre> <p>getRows</p> <p>Get all the rows displayed in the <code>view</code> of a <code>table</code>.</p> <pre><code>base.getRows(table: Object/String, view: Object/String /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>view</code> (required): either a view object or the view name</p> </li> </ol> <p>Output Array of row objects (throws an error if <code>table</code> or <code>view</code> doesn't exist)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'Default View');\nconst rows = base.getRows(table, view);\n\nrows.forEach((row) =&gt; {\n    output.text(row._id);\n})\n</code></pre> <pre><code>const rows = base.getRows('Table1', 'Default View');\n</code></pre> <p>query</p> <p>Use SQL to query a base. SQL queries are the most powerful way access data stored in a base. If your not familiar with SQL syntax, we recommend using first the SQL query plugin. Most SQL syntax is supported, you can check the SQL Reference section of this manual for more information.</p> <pre><code>await/* (1)! */ base.query(sqlStatement: String);\n</code></pre> <ol> <li><code>await</code> is used for asynchronous functions. This is required to ensure that the following operations (or the variable where you store the results) wait for the query's response to arrive before continuing to execute the script</li> </ol> <p>Backticks for table or column names containing or special characters or using reserved words</p> <p>For SQL queries, you can use numbers, special characters or spaces in the names of your tables and columns. However, you'll have to escape these names with backticks in order for your query to be correctly interpreted, for example <code>SELECT * FROM `My Table`</code>. </p> <p>Similarly, if some of your of table or column names are the same as SQL function names (for example a date-type column named <code>date</code>), you'll also have to escape them in order for the query interpreter to understand that it's not a function call missing parameters, but rather a table or column name.</p> <p>Output Array of row objects (single empty object if no row match the request's conditions)</p> <p>All the examples below are related to a table Bill with the following structure/data:</p> name price year Bob 300 2021 Bob 300 2019 Tom 100 2019 Tom 100 2020 Tom 200 2021 Jane 200 2020 Jane 200 2021 <p>Example: Get everything with a wildcard</p> Function callOutput <pre><code>const data = await base.query('select *  from Bill');/* (1)! */\noutput.text(data);\n</code></pre> <ol> <li><code>*</code> means that you want to get the whole rows data (columns's values and specific row data such as id, etc.)</li> </ol> <pre><code>[\n    {\n        \"name\": \"Bob\",\n        \"price\": 300,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:19.106+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"W77uzH1cSXu2v2UtqA3xSw\"\n    },\n    {\n        \"name\": \"Bob\",\n        \"price\": 300,\n        \"year\": 2019,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:22.112+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"IxONgyDFQxmcDKpZWlQ9XA\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 100,\n        \"year\": 2019,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:23.4+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"K4LBuQ7aSjK9JwN14ITqvA\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 100,\n        \"year\": 2020,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"EHcQEaxiRzm3Zvq8B33bwQ\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 200,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"CjaCdBlNRXKkYkm231shqg\"\n    },\n    {\n        \"name\": \"Jane\",\n        \"price\": 200,\n        \"year\": 2020,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"YzmUexIAR7iDWmhKGHgpMw\"\n    },\n    {\n        \"name\": \"Jane\",\n        \"price\": 200,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"HJi7wbUMQIOuIlPaoO9Fbg\"\n    }\n]\n</code></pre> <p>Example with WHERE</p> Function call 1 (filter by year)Output #1Function call 2 (filter by name)Output #2 <pre><code>const data = await base.query('select name, price from Bill where year = 2021');\noutput.text(data);\n</code></pre> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\"},\n    {\"name\":\"Tom\",\"price\":\"200\"},\n    {\"name\":\"Jane\",\"price\":\"200\"}\n]\n</code></pre> <pre><code>const data = await base.query('select name, price, year from Bill where name = \"Bob\"');\noutput.text(data);\n</code></pre> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2021\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2019\"}\n]\n</code></pre> <p>Example with GROUP BY</p> Function callOutput <pre><code>const data = await base.query('select name, sum(price) from Bill group by name');\noutput.text(data);\n</code></pre> <pre><code>[\n    {'name': 'Bob', 'SUM(price)': 600},\n    {'name': 'Tom', 'SUM(price)': 400},\n    {'name': 'Jane', 'SUM(price)': 400}\n]\n</code></pre> <p>Example with DISTINCT</p> Function callOutput <pre><code>const data = await base.query('select distinct name from Bill');\noutput.text(data);\n</code></pre> <pre><code>[\n    {'name': 'Bob'},\n    {'name': 'Tom'},\n    {'name': 'Jane'}\n]\n</code></pre> <p>getGroupedRows</p> <p>Get rows in the grouped <code>view</code> of a <code>table</code>.</p> <pre><code>base.getGroupedRows(table: Object/String, view: Object/String /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>view</code> (required): either a view object or the view name</p> </li> </ol> <p>Output Array of grouped rows object (see Output example below)</p> <p>Example</p> Function callOutput example <pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'GroupedView');\nconst groupViewRows = base.getGroupedRows(table, view);\n</code></pre> <pre><code>[\n    { /* (1)! */\n        \"column_name\": \"date\",\n        \"column_key\": \"tc2B\",\n        \"cell_value\": \"2025-09\",\n        \"rows\": [], /* (2)! */\n        \"subgroups\": [\n        {\n            \"column_name\": \"Val2\",\n            \"column_key\": \"7Q0G\",\n            \"cell_value\": 462,\n            \"rows\": [\n            {\n                \"bjcM\": 12,\n                \"0000\": \"John\",\n                \"7Q0G\": 462,\n                \"tc2B\": \"2025-09-11\",\n                \"Tm99\": \"520035\",\n                \"_creator\": \"aa\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_id\": \"AGO_2SiiTY61uMr-tTVGvQ\",\n                \"_ctime\": \"2025-09-11T07:38:23.082+00:00\",\n                \"_mtime\": \"2025-09-11T09:28:32.204+00:00\",\n                \"mpxK\": 0\n            },\n            {\n                \"bjcM\": 12,\n                \"0000\": \"John\",\n                \"7Q0G\": 462,\n                \"tc2B\": \"2025-09-11\",\n                \"Tm99\": \"520035\",\n                \"_creator\": \"aa\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_id\": \"WTu6o6lxS-ChnamkU1wjuA\",\n                \"_ctime\": \"2025-09-11T07:39:10.297+00:00\",\n                \"_mtime\": \"2025-09-11T09:28:32.204+00:00\",\n                \"mpxK\": 0\n            }\n            ],\n            \"subgroups\": [] /* (3)! */\n        }\n        ]\n    },\n    {\n        \"column_name\": \"date\",\n        \"column_key\": \"tc2B\",\n        \"cell_value\": null,\n        \"rows\": [],\n        \"subgroups\": [\n        {\n            \"column_name\": \"Val2\",\n            \"column_key\": \"7Q0G\",\n            \"cell_value\": 4,\n            \"rows\": [\n            {\n                \"_id\": \"GIgxrz8VSzm-aHSbJ6_i4w\",\n                \"_participants\": [],\n                \"_creator\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_ctime\": \"2025-09-03T07:03:57.838+00:00\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_mtime\": \"2025-09-17T15:31:04.150+00:00\",\n                \"bjcM\": 1,\n                \"0000\": \"name\",\n                \"7Q0G\": 4,\n                \"plxx\": 5676,\n                \"Tm99\": \"207110\",\n                \"mpxK\": \"\"\n            },\n            {\n                \"_id\": \"PSfpr9dzRPaKUeIn-3va0w\",\n                \"_participants\": [],\n                \"_creator\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_ctime\": \"2025-09-03T07:03:57.838+00:00\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_mtime\": \"2025-09-11T09:28:32.204+00:00\",\n                \"bjcM\": 0,\n                \"0000\": \"zu\",\n                \"7Q0G\": 4,\n                \"plxx\": 3872,\n                \"Tm99\": \"375528\",\n                \"mpxK\": 0\n            }\n            ],\n            \"subgroups\": []\n        },\n        {\n            \"column_name\": \"Val2\",\n            \"column_key\": \"7Q0G\",\n            \"cell_value\": 9,\n            \"rows\": [\n            {\n                \"_id\": \"H3djeRnkQdWhKBhEG2cGUw\",\n                \"_participants\": [],\n                \"_creator\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_ctime\": \"2025-09-03T07:03:57.838+00:00\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_mtime\": \"2025-09-11T09:28:32.204+00:00\",\n                \"bjcM\": 3,\n                \"0000\": \"a\",\n                \"7Q0G\": 9,\n                \"plxx\": 1668,\n                \"Tm99\": \"520035\",\n                \"mpxK\": 0\n            },\n            {\n                \"_id\": \"ARedNyn8R7CZFmRushZmvQ\",\n                \"_participants\": [],\n                \"_creator\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_ctime\": \"2025-09-03T08:23:03.776+00:00\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_mtime\": \"2025-09-17T15:31:09.842+00:00\",\n                \"0000\": \"b\",\n                \"bjcM\": \"\",\n                \"7Q0G\": 9,\n                \"plxx\": 610,\n                \"Tm99\": \"211464\",\n                \"mpxK\": 0\n            },\n            {\n                \"_id\": \"L4IWGz4hT3qb1_u9bBbvFg\",\n                \"_participants\": [],\n                \"_creator\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_ctime\": \"2025-09-03T14:03:51.524+00:00\",\n                \"_last_modifier\": \"cc7a1d0fce...b65b99@auth.local\",\n                \"_mtime\": \"2025-09-17T15:31:08.429+00:00\",\n                \"0000\": \"name\",\n                \"bjcM\": 15,\n                \"7Q0G\": 9,\n                \"plxx\": 565,\n                \"Tm99\": \"745764\",\n                \"mpxK\": 0\n            }\n            ],\n            \"subgroups\": []\n        }\n        ]\n    }\n]\n</code></pre> <ol> <li> <p>Grouped rows object containing either <code>rows</code> or <code>subgroups</code> (array of grouped rows objects) in the case of multiple grouping rules</p> </li> <li> <p>No <code>rows</code>: this grouped rows object only contains <code>subgroups</code> (member of the first grouping rule)</p> </li> <li> <p>No <code>subgroups</code>: this grouped rows object only contains <code>rows</code> (member of the last grouping rule)</p> </li> </ol> <pre><code>const groupViewRows = base.getGroupedRows('Table1', 'GroupedView');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#add-row","title":"Add row","text":"<p>appendRow / addRow (deprecated)</p> <p>Add a row to a <code>table</code>. This row contains the data specified in the object <code>rowData</code>. The row will be empty if <code>rowData</code> is empty or if it contains only keys that don't exist in the <code>table</code>.</p> <pre><code>base.appendRow(table: Object/String, rowData: Object, viewName: String /* (1)! */)\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>rowData</code>: object (pairs of <code>key</code>:<code>value</code>, each <code>key</code> being the name of a column), for example:</p> <pre><code>{\n    'First Name': 'John',\n    'Last Name': 'Doe',\n    'Invoice amount': 100,\n    'Products': ['Office Supplies', 'Computer']\n}\n</code></pre> </li> </ol> <p>Output Single row object (throws an error if <code>table</code> doesn't exist)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nbase.appendRow(table, {'Name': 'Alex', 'Age': '18'});\nbase.appendRow(table, {'Name': 'Alex', 'Age': '18'}, 'Default View');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#update-rows","title":"Update row(s)","text":"<p>updateRow / modifyRow(deprecated)</p> <p>Modify a <code>row</code> in the <code>table</code>. The <code>updateRowData</code> object (pairs of <code>key</code>:<code>value</code>, each <code>key</code> being the name of a column) need to contain only the data you want to update. To reset a value, specify the <code>key</code>:<code>value</code> pair with an empty string <code>''</code>.</p> <pre><code>base.updateRow(table: Object/String, row: Object/String, updateRowData: Object /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>row</code>: either a row object or the row id</p> </li> </ol> <p>Output Nothing (throws an error if <code>table</code> doesn't exist or if no row with the specified id exists)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRow(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\nbase.updateRow(table, row, {'Name': 'new name', 'number': 100});\n</code></pre> <pre><code>base.updateRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw', {'Name': 'new name', 'number': 100})\n</code></pre> <p>modifyRows</p> <p>Modify multiple <code>rows</code> in the <code>table</code> at once. <code>updatedRows</code> is an array of <code>updateRowData</code> objects (see above). Please note that <code>rows</code> only accepts an array of row objects (and not of ids).</p> <pre><code>base.modifyRows(table: Object/String, rows: Array of Object, updatedRows: Array of Object /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>rows</code>: array of row objects only (not row ids)</p> </li> </ol> <p>Output Nothing (throws an error if <code>table</code> doesn't exist or if one row in <code>rows</code> doesn't exists)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nconst rows = base.getRows(table, 'Default View');\nconst selectedColumnName = 'Name';\nconst selectedRows = [], updatedRows = [];\n\nrows.forEach((row) =&gt; {\nif (row[selectedColumnName] === 'name') {\n    selectedRows.push(row);\n    updatedRows.push({[selectedColumnName]: 'name1'});\n}\n});\nbase.modifyRows(table, selectedRows, updatedRows);\n</code></pre> <pre><code>base.modifyRows('Table1', [base.getRow('Table1','GIgxrz8VSzm-aHSbJ6_i4w'),base.getRow('Table1','PSfpr9dzRPaKUeIn-3va0w')], [{'Name': 'name'},{'Name': 'name'}]);\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#delete-row","title":"Delete row","text":"<p>deleteRow / deleteRowById (deprecated)</p> <p>Delete a row in a <code>table</code> by its id <code>rowId</code>.</p> <pre><code>base.deleteRow(table: Object/String, rowId: String /* (1)! */);\n</code></pre> <ol> <li> <p><code>table</code>: either a table object or the table name</p> <p><code>rowId</code>: the id of the row to delete</p> </li> </ol> <p>Output Nothing (no error if no row with id <code>rowId</code> exists)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\nbase.deleteRow(table, 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre> <pre><code>base.deleteRow('Table1', 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre>"},{"location":"scripts/javascript/objects/rows/#filter","title":"Filter","text":"<p>filter</p> <p>Filters the rows displayed in the view <code>viewName</code> of the <code>table</code> that meet the conditions of the <code>filterExpression</code> (conditional statement), and returns a querySet object. See the <code>filterExpression</code> reference below for more details.</p> <pre><code>base.filter(tableName: String, viewName: String, filterExpression: String);\n</code></pre> <p>Output Single querySet object (see below), the <code>rows</code> array being empty if no row meet the <code>filterExpression</code> conditions</p> <p>Example</p> Function callOutput structure <pre><code>// Filter out rows whose number column is equal to 5, and return a querySet object\nconst querySet = base.filter('Table1', 'Default View', 'number = 5');\n</code></pre> <pre><code>{\n    \"rows\": [ /* (1)! */\n        ...\n    ],\n    \"table\": { /* (2)! */\n        ...\n    },\n    \"parser\": {\n        ...\n    }\n}\n</code></pre> <ol> <li> <p><code>rows</code>: array of the rows in the view <code>viewName</code> meeting the <code>filterExpression</code> conditions</p> </li> <li> <p><code>table</code>: the whole <code>table</code> object</p> </li> </ol> <pre><code>const querySet = base.filter(\"Table1\", \"Default View\", \"age&gt;18\"/* (1)! */)\n</code></pre> <ol> <li> <p><code>age</code>: column name</p> <p><code>&gt;</code>: operator</p> <p><code>18</code>: parameter</p> </li> </ol>"},{"location":"scripts/javascript/objects/rows/#filterexpression-reference","title":"filterExpression reference","text":"<p>filterExpression</p> <p>The most common operators are available to define the conditional statement of the <code>filterExpression</code>:</p> Type of operators Available operators Greater-Less comparisons &gt;=\uff0c &gt;\uff0c &lt;\uff0c &lt;= Equal-Not equal comparisons =,  &lt;&gt; (not equal to) Arithmetic operators +, -, *, /, ^ (power), % (modulo) Logical operators and, or <p>Depending on the data type, there are slight differences in the query method and the format of input statement. Here is a list of the possible operations for each type:</p> Data structure Column type Format for Greater-Less comparisons Format for Equal-Not equal comparisons Arithmetic operators String Text, Long Text, URL,Email, Single Select Unsupported String Unsupported List Multiple Select Unsupported String Unsupported Number Number Number Number and empty String <code>\"\"</code>\"\" Supported Date Date, Created time,  Last modified time Patterns: YYYY-MM-DD, YYYY-MM-DD hh:mm, YYYY-MM-DD hh:mm:ss Same patterns as greater-less query Unsupported Boolean Checkbox Unsupported true, false and empty String <code>\"\"</code>, (case-insensitive) Unsupported <p>Mind the quotes!</p> <p>For queries involving string-based or date-based columns, you'll have to use double quotes <code>\" \"</code> to define the <code>filterExpression</code> as you'll need simple quotes <code>' '</code> for the strings/dates... Or the opposite: use either <code>\"column_name='hello world'\"</code> or <code>'column_name=\"hello world\"'</code></p> <p>Here are more examples of the different filter expressions pending of the column type.</p> <p>String-based Column (Text, Long Text, URL, Email, Single Select columns)</p> <pre><code>// Equal-unequal query\nbase.filter('Table1', 'Default View', \"column_name='hello world'\")\nbase.filter('Table1', 'Default View', \"column_name!=''\")\n</code></pre> <p> List-based Column (Multiple Select columns)</p> <pre><code>// Equal-unequal query\nbase.filter('Table1','Default View', \"column_name='A' and column_name='B'\") /* (1)! */\n</code></pre> <ol> <li>Find the rows which contains both 'A' and 'B'</li> </ol> <p> Number-based Column (Number columns)</p> Greater-less queryEqual-unequal queryArithmetic query <pre><code>base.filter('Table1', 'Default View', \"column_name&gt;18\")\nbase.filter('Table1', 'Default View', \"column_name&gt;-10 and column_name&lt;=0\")\n</code></pre> <pre><code>base.filter('Table1', 'Default View',\"column_name&lt;&gt;20\")\nbase.filter('Table1', 'Default View', \"column_name=0\")\nbase.filter('Table1', 'Default View',\"column_name=''\")\n</code></pre> <pre><code>base.filter('Table1', 'Default View', \"column_name+3&gt;18\")\nbase.filter('Table1', 'Default View', \"column_name*2=18\")\nbase.filter('Table1', 'Default View', \"column_name-2=18\")\nbase.filter('Table1', 'Default View', \"column_name/2=18\")\nbase.filter('Table1', 'Default View', \"column_name^2=18\")\nbase.filter('Table1', 'Default View', \"column_name%2=1\")\n</code></pre> <p> Date-based Column (Date, Created time, Last modified time columns)</p> Greater-less queryEqual-unequal query <pre><code>base.filter('Table1', 'Default View', \"column_name&gt;'2020-1-30'\")\nbase.filter('Table1', 'Default View', \"column_name&gt;='2019-1-1 5:30' and column_name&lt;='2019-5-1 6:00'\")\n</code></pre> <pre><code>base.filter('Table1', 'Default View', \"column_name='2020-1-1 10:59:59'\")\nbase.filter('Table1', 'Default View', \"column_name!=''\")\n</code></pre> <p> Boolean-based Column (Checkbox columns)</p> Equal-unequal query <pre><code>base.filter('Table1', 'Default View','column_name=False')/* (1)! */\nbase.filter('Table1', 'Default View', \"column_name=True\")\n</code></pre> <ol> <li>same as <code>base.filter('Table1', \"column_name=''\")</code></li> </ol>"},{"location":"scripts/javascript/objects/rows/#queryset-handling","title":"querySet handling","text":"<p>The output of the <code>base.filter</code> function is a <code>querySet</code> object. Here are the methods of this object provided to simplify the operations on the filtered data.</p> <p>all</p> <p>Returns all filtered rows of the <code>querySet</code> in the form of a list.</p> <pre><code>querySet.all();\n</code></pre> <p>Output Array of row objects</p> <p>Example</p> <pre><code>const querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst list = querySet.all();\noutput.text(list);\n</code></pre> <p>count</p> <p>Returns the number of filtered rows of the <code>querySet</code>.</p> <pre><code>querySet.count();\n</code></pre> <p>Output Number</p> <p>Example</p> <pre><code>const querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst count = querySet.count();\noutput.text(`The querySet contains ${count} rows`);\n</code></pre> <p>first</p> <p>Return the first filtered row of the <code>querySet</code>.</p> <pre><code>querySet.first();\n</code></pre> <p>Output Single row object (<code>undefined</code> if the <code>querySet</code> contains no row)</p> <p>Example</p> <pre><code>const querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst row = querySet.first();\n</code></pre> <p>last</p> <p>Return the last filtered row of the <code>querySet</code>.</p> <pre><code>querySet.last();\n</code></pre> <p>Output Single row object (<code>undefined</code> if the <code>querySet</code> contains no row)</p> <p>Example</p> <pre><code>const querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst row = querySet.last();\n</code></pre> <p>delete</p> <p>Delete all filtered rows of the <code>querySet</code> and return the number of rows successfully deleted.</p> <pre><code>querySet.delete();\n</code></pre> <p>Output Number</p> <p>Example</p> <pre><code>const querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst count = querySet.delete();\noutput.text(`${count} rows successfully deleted!`);\n</code></pre> <p>update</p> <p>Modify the row data according to the<code>rowData</code> Object and return the updated rows.</p> <pre><code>querySet.update(rowData: Object/* (1)! */);\n</code></pre> <ol> <li><code>rowData</code>: object (pairs of <code>key</code>:<code>value</code>, each <code>key</code> being the name of a column)</li> </ol> <p>Output Array of row objects (empty Array if no filtered row)</p> <p>Example</p> <pre><code>// Modify the content of the Name column of all filtered rows to xxxx\nconst querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst rows = querySet.update({Name: 'xxxx'});\n</code></pre> <p>filter</p> <p>Further filtering using the <code>filterExpression</code> conditional statement.</p> <pre><code>querySet.filter(filterExpression: String);\n</code></pre> <p>Output Single querySet object</p> <p>Example</p> <pre><code>// Filter out the rows with the value of Tom in the Name column of querySet1\nconst querySet1 = base.filter('Table1', 'Default View', 'number = 5');\nconst querySet2 = querySet1.filter(\"Name = 'Tom'\");\n</code></pre> <p>get</p> <p>Return the first row of the querySet that meets the conditions of the new <code>filterExpression</code>. This is equivalent to <code>querySet.filter(filterExpression).first()</code></p> <pre><code>querySet.get(filterExpression: String);\n</code></pre> <p>Output Single row object (<code>undefined</code> if no row meets the conditions of the <code>filterExpression</code>, <code>#ERROR!</code> if the <code>filterExpression</code> is wrong)</p> <p>Example</p> <pre><code>// Get the first data of Tom in the Name column of the querySet\nconst querySet = base.filter('Table1', 'Default View', 'number = 5');\nconst row = querySet.get(\"Name = 'Tom'\");\n</code></pre>"},{"location":"scripts/javascript/objects/tables/","title":"Tables","text":"<p>You'll find below all the available methods to interact with the tables of a SeaTable base.</p>"},{"location":"scripts/javascript/objects/tables/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a table object: <pre><code>{\n    \"_id\": \"IfcB\",\n    \"name\": \"New table\",\n    \"is_header_locked\": false,\n    \"summary_configs\": {},\n    \"columns\": [ // (1)!\n        {\n        \"key\": \"0000\",\n        \"type\": \"number\",\n        \"name\": \"First column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"2w6F\",\n        \"type\": \"text\",\n        \"name\": \"second column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"3aAf\",\n        \"type\": \"date\",\n        \"name\": \"third column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        }\n    ],\n    \"rows\": [], // (2)!\n    \"views\": [ // (3)!\n        {\n        \"_id\": \"0000\",\n        \"name\": \"Default View\",\n        \"type\": \"table\",\n        \"is_locked\": false,\n        \"filter_conjunction\": \"And\",\n        \"filters\": [],\n        \"sorts\": [],\n        \"groupbys\": [],\n        \"group_rows\": [],\n        \"groups\": [],\n        \"colorbys\": {},\n        \"hidden_columns\": [],\n        \"rows\": [],\n        \"formula_rows\": {},\n        \"link_rows\": {},\n        \"summaries\": {},\n        \"colors\": {}\n        }\n    ],\n    \"id_row_map\": {}\n}\n</code></pre></p> <ol> <li> <p>Array of existing columns     <pre><code>{\n  \"key\": \"g4s1\",\n  \"type\": \"number\",\n  \"name\": \"api3\",\n  \"editable\": true,\n  \"width\": 200,\n  \"resizable\": true,\n  \"draggable\": true,\n  \"data\": null,\n  \"permission_type\": \"\",\n  \"permitted_users\": []\n}\n</code></pre></p> </li> <li> <p>Array of existing rows     <pre><code>{\n\"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n\"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n\"Name\": \"NewName\",\n\"Date\": \"2020-08-01\",\n\"Content\": \"111\",\n\"link\": [\n            {\n            \"display_value\": \"1\",\n            \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n        ]\n}\n</code></pre></p> </li> <li> <p>Array of existing views     <pre><code>{\n  \"_id\": \"0000\",\n  \"name\": \"Default View\",\n  \"type\": \"table\",\n  \"is_locked\": false,\n  \"rows\": [],\n  \"formula_rows\": {},\n  \"summaries\": [],\n  \"filter_conjunction\": \"And\",\n  \"sorts\": [],\n  \"filters\": [],\n  \"hidden_columns\": [],\n  \"groupbys\": [],\n  \"group_rows\": [],\n  \"groups\": []\n}\n</code></pre> Please refer to the SeaTable API Reference for a more detailed presentation.</p> </li> </ol> <p>You can have a look at the specific view, column or row structure on the corresponding pages.</p>"},{"location":"scripts/javascript/objects/tables/#get-tables","title":"Get Table(s)","text":"<p>getActiveTable</p> <p>Get the currently selected table.</p> <p><pre><code>base.getActiveTable();\n</code></pre> Output Single table object</p> <p>Example <pre><code>const table = base.getActiveTable();\noutput.text(`The name of the active table is: ${table.name}`);\n</code></pre></p> <p>getTables</p> <p>Get all tables of the current base.</p> <p><pre><code>base.getTables();\n</code></pre> Output Array of table objects</p> <p>Example <pre><code>const tables = base.getTables();\noutput.text(tables);\n</code></pre></p> <p>getTableByName</p> <p>Get a table object by its name.</p> <pre><code>base.getTableByName(tableName: String);\n</code></pre> <p>Output Single table object (<code>undefined</code> if table doesn't exist)</p> <p>Example</p> <pre><code>const table = base.getTableByName('Table1');\n// Display only table _id\noutput.text(`The id of the table is: ${table._id}`);\n// Display whole table structure\noutput.text(table);\n</code></pre>"},{"location":"scripts/javascript/objects/tables/#add-table","title":"Add Table","text":"<p>addTable</p> <p>Add a new table to this base, given the new table name <code>tableName</code>. Please ensure that you choose a <code>tableName</code> that doesn't already exists in your base.</p> <p><pre><code>base.addTable(tableName: String);\n</code></pre> Output Nothing</p> <p>Example <pre><code>base.addTable('New table');\noutput.text(\"Wow, I just added a new table to this base.\")\n</code></pre></p>"},{"location":"scripts/javascript/objects/tables/#rename-table","title":"Rename Table","text":"<p>renameTable</p> <p>Rename an existing table named <code>oldName</code> to <code>newName</code>. Please ensure that you choose a <code>newName</code> that doesn't already exists in your base.</p> <pre><code>base.renameTable(oldName: String, newName: String);\n</code></pre> <p>Output Nothing (throws an error if no table named <code>oldName</code> exists)</p> <p>Example <pre><code>const old_name = \"Table1\";\nconst new_name = \"Projects 2023\";\nbase.renameTable(old_name, new_name);\noutput.text(`This base ${old_name} got a new name: ${new_name}`);\n</code></pre></p>"},{"location":"scripts/javascript/objects/tables/#delete-table","title":"Delete Table","text":"<p>deleteTable</p> <p>Delete a table named <code>tableName</code> from the base. By the way, the table can be restored from the logs. Deleting the last table is not possible.</p> <p><pre><code>base.deleteTable(tableName: String);\n</code></pre> Output Nothing (throws an error if no table named <code>tableName</code> exists)</p> <p>Example <pre><code>base.deleteTable('Old table');\n</code></pre></p>"},{"location":"scripts/javascript/objects/utilities/","title":"Utility functions","text":"<p>Utility functions help you to work with data in SeaTable.</p>"},{"location":"scripts/javascript/objects/utilities/#date-and-time","title":"Date and Time","text":"<p>formatDate</p> <p>Format <code>date</code> to 'YYYY-MM-DD' to be used in a date-type column.</p> <pre><code>base.utils.formatDate(date: Date Object)\n</code></pre> <p>Output String</p> <p>Example <pre><code>let date = new Date();\nlet formatDate = base.utils.formatDate(date);\noutput.text(formatDate);\n</code></pre></p> <p>formatDateWithMinutes</p> <p>Format <code>date</code> to 'YYYY-MM-DD HH:mm' to be used in a date-type column.</p> <pre><code>base.utils.formatDateWithMinutes(date: date object)\n</code></pre> <p>Output String</p> <p>Example <pre><code>let date = new Date();\nlet formatDate = base.utils.formatDateWithMinutes(date);\noutput.text(formatDate);\n</code></pre></p>"},{"location":"scripts/javascript/objects/utilities/#lookup-and-query","title":"Lookup and Query","text":"<p>lookupAndCopy</p> <p>Similar to the Microsoft Excel VLOOKUP function. Find a matching row in the source table for each row of the target table, and then copy the data of the specified cell of the matching row to the specified cell of the target row. Every arguments are <code>String</code>.</p> <pre><code>base.utils.lookupAndCopy(targetTable, targetColumn, targetColumnToCompare, sourceTableName, \n                         sourceColumnName, sourceColumnToCompare = null /* (1)! */);\n</code></pre> <ol> <li> <p><code>targetTable</code>: the name of the target table - i.e. the table you want to copy data into</p> <p><code>targetColumn</code>: the column of <code>targetTable</code> you want to copy data into</p> <p><code>targetColumnToCompare</code>: the column of <code>targetTable</code> you want to compare to a column of table <code>sourceTableName</code></p> <p><code>sourceTableName</code>: the source table - i.e. the table you want to copy data from</p> <p><code>sourceColumnName</code>: the column of <code>sourceTableName</code> you want to copy data from</p> <p><code>sourceColumnToCompare</code>: If specified, the column of <code>sourceTableName</code> you want to compare with <code>targetColumnToCompare</code> to find matching rows. If not specified, the system will look for a column with the name <code>targetColumn</code> in the table <code>sourceTableName</code></p> </li> </ol> <p>Output Nothing (throws an error if some tables or columns do not exist)</p> <p>Principle example</p> <p>Here are two tables, the source table containing both names and emails for few Avengers whereas the target table only has the user names.</p> <p>Source table</p> Name SourceEmail Hulk greenbigboy@stark-industries.movie Tony ironman <p>Target table</p> Name TargetEmail Hulk Tony <p>To copy the email addresses from the source table to the target table, this function can be used with the following syntax:</p> <pre><code>base.utils.lookupAndCopy('Target table', 'TargetEmail', 'Name', 'Source table', 'SourceEmail');\n</code></pre> <p>Example</p> <pre><code>// Match the rows with the same content in the Name column of Table1 and Table2, \n// copy the contents of the Email column of the row in Table1 to the Email column \n// of the corresponding row in Table2\nbase.utils.lookupAndCopy('Table2', 'Email', 'Name', 'Table1', 'Email');\n\n// Match the rows with the same content in the Name column in Table1 and the Name1 column\n//  in Table2, and copy the contents of the Email column of the row in Table1 to the \n// Email1 column of the corresponding row in Table2\nbase.utils.lookupAndCopy('Table2', 'Email1', 'Name1', 'Table1', 'Email', 'Name');\n</code></pre> <p>query</p> <p>Filter and summarize the table <code>tableName</code> data of the view <code>viewName</code> by SQL like <code>query</code> statements.</p> <pre><code>base.utils.query(tableName: String, viewName: String, query: String);\n</code></pre> <p>Example</p> <pre><code>// Filter out the rows where the sum of the three columns 'number', 'number1', \n// and 'number2' is greater than 5 then sum the number and number2 columns in these rows, \n// return {number: 12, number2: 23}\nbase.utils.query('Table1', 'Default View', 'select sum(number), sum(number2) where number + number1 + number2 &gt; 5');\n</code></pre>"},{"location":"scripts/javascript/objects/views/","title":"Views","text":"<p>You'll find below all the available methods to interact with the views of a SeaTable table.</p>"},{"location":"scripts/javascript/objects/views/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a view object:</p> <pre><code>{\n    \"_id\": \"0000\",\n    \"name\": \"Default View\",\n    \"type\": \"table\",\n    \"is_locked\": false,\n    \"rows\": [],\n    \"formula_rows\": {},\n    \"summaries\": [],\n    \"filter_conjunction\": \"And\",\n    \"sorts\": [],\n    \"filters\": [],\n    \"hidden_columns\": [],\n    \"groupbys\": [],\n    \"group_rows\": [],\n    \"groups\": []\n}\n</code></pre> <p>Please refer to the SeaTable API Reference for a more detailed presentation.</p>"},{"location":"scripts/javascript/objects/views/#get-views","title":"Get View(s)","text":"<p>getActiveView</p> <p>Get the current view of the active table.</p> <pre><code>base.getActiveView();\n</code></pre> <p>Output Single view object</p> <p>Example <pre><code>const view  = base.getActiveView();\noutput.text(view._id);\noutput.text(view);\n</code></pre></p> <p>getViewByName</p> <p>Get a view of a particular <code>table</code>, specified by its name <code>viewName</code>.</p> <pre><code>base.getViewByName(table: Object/String/* (1)! */, viewName: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Single view object (<code>undefined</code> if no view called <code>viewName</code> exists, throws an error if <code>table</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'Default View');\noutput.text(view.name);\n</code></pre></p> <pre><code>const view = base.getViewByName('Table1', 'Default View');\noutput.text(view.name);\n</code></pre> <p>listViews / getViews (deprecated)</p> <p>Get all the views of the <code>table</code>.</p> <pre><code>base.listViews(table: Object/String/* (1)! */);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Array of view objects (throws an error if <code>table</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nconst views = base.listViews(table);\noutput.text(views.length);\n</code></pre></p>"},{"location":"scripts/javascript/objects/views/#add-view","title":"Add View","text":"<p>addView</p> <p>Add a view named <code>viewName</code> to a <code>table</code>.</p> <pre><code>base.addView(table: Object/String/* (1)! */, viewName: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Nothing (throws an error if <code>table</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nbase.addView(table, 'view 2');\n</code></pre></p> <pre><code>base.addView('Table1', 'view 2');\n</code></pre>"},{"location":"scripts/javascript/objects/views/#rename-view","title":"Rename View","text":"<p>renameView</p> <p>Rename a view in the <code>table</code> specified by its current name <code>currentViewName</code> and its new name <code>nextViewName</code>. Please ensure that you choose a <code>nextViewName</code> that doesn't already exists in your <code>table</code>.</p> <pre><code>base.renameView(table: Object/String/* (1)! */, currentViewName: String, nextViewName: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Nothing (throws an error if <code>table</code> or <code>currentViewName</code> doesn't exist)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nbase.renameView(table, 'Default View', 'view2');\n</code></pre></p> <pre><code>base.renameView('Table1', 'Default View', 'view2');\n</code></pre>"},{"location":"scripts/javascript/objects/views/#delete-view","title":"Delete View","text":"<p>deleteView</p> <p>Delete a view in a particular <code>table</code>, specified by its name <code>viewName</code>. Deleting the last view is not possible.</p> <pre><code>base.deleteView(table: Object/String/* (1)! */, viewName: String);\n</code></pre> <ol> <li><code>table</code>: either a table object or the table name</li> </ol> <p>Output Nothing (throws an error if <code>table</code>  doesn't exist or no view called <code>viewName</code> exists)</p> <p>Example <pre><code>const table  = base.getTableByName('Table1');\nbase.deleteView(table, 'view2');\n</code></pre></p> <pre><code>base.deleteView('Table1', 'view2');\n</code></pre>"},{"location":"scripts/python/common_questions/","title":"Common questions (Python)","text":"How to make the script support both local and cloud run List of libraries supported in the cloud environment Install and use custom python libraries Printing complex elements (dicts, tables, arrays of rows) is sometimes difficult to read How to deal with more than 1000 rows at once with batch operations?"},{"location":"scripts/python/common_questions/#how-to-make-the-script-support-both-local-and-cloud-run","title":"How to make the script support both local and cloud run","text":"<p>Flexible authorization</p> <p>When the script runs in the cloud, it will provide a context object, which contains the server URL auto generated by the system and the API token of base. If you run the script in local, you need to manually specify these two variables; the API token can be generated in the drop-down menu \"Advanced -&gt; API Token\" of the table.</p> <p>Use the following method to make the script support both local and cloud run</p> <pre><code>from seatable_api import Base, context\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369848455a39f4436147639cf02b2d'\n\n\nbase = Base(api_token, server_url)\nbase.auth()\n</code></pre> <p>Dependencies that need to be installed to run the script local</p> <p>The script need to install <code>seatable-api</code> when run in local.</p> <pre><code>pip3 install seatable-api\n</code></pre> <p>Additional requirements are:</p> <ul> <li>Python &gt;= 3.5</li> <li>requests</li> <li>socketIO-client-nexus</li> </ul>"},{"location":"scripts/python/common_questions/#list-of-libraries-supported-in-the-cloud-environment","title":"List of libraries supported in the cloud environment","text":"<p>In the cloud environment, Python scripts run within a Docker container. This container comes pre-configured with a set of Python libraries that can be imported and used in your scripts. If you require libraries not included in this set, please contact our support team. Otherwise, scripts using unsupported libraries can only be executed locally.</p> <p>Python Standard Library</p> <p>The cloud environment currently utilizes Python 3.12. This version supports all modules in the Python 3.12 standard library. Common built-in libraries such as <code>os</code>, <code>sys</code>, <code>datetime</code>, and others are readily available for use in your scripts.</p> <p>Third-Party Libraries</p> <p>In addition to the standard library, we've included several popular third-party packages to enhance your scripting capabilities:</p> <ul> <li>seatable-api: Official SeaTable Python API</li> <li>dateutils: Extensions to Python's datetime module</li> <li>requests: HTTP library for Python</li> <li>pyOpenSSL: Python wrapper for OpenSSL</li> <li>Pillow: Python Imaging Library (Fork) with support for HEIF images</li> <li>python-barcode: Barcode generator</li> <li>qrcode: QR Code generator</li> <li>pandas: Data manipulation and analysis library</li> <li>numpy: Fundamental package for scientific computing</li> <li>openai: OpenAI API client library</li> <li>ldap3: LDAP v3 client library</li> <li>pydantic: Data validation and settings management using Python type annotations</li> <li>httpx: A next-generation HTTP client for Python</li> <li>PyJWT: JSON Web Token implementation in Python</li> <li>python-socketio: Python implementation of the Socket.IO realtime server</li> <li>scipy: Fundamental algorithms for scientific computing in Python</li> <li>PyPDF: PDF toolkit for Python</li> <li>pdfmerge: Merge PDF files</li> </ul> <p>This list is not exhaustive. For a complete, up-to-date list of available third-party packages, you can run the following Python script in your SeaTable environment:</p> <pre><code>import importlib.metadata\n\n# List all installed packages\ninstalled_packages = importlib.metadata.distributions()\n\n# Print package names\nfor package in installed_packages:\n  print(package.metadata['Name'])\n</code></pre>"},{"location":"scripts/python/common_questions/#install-and-use-custom-python-libraries","title":"Install and use custom python libraries","text":"<ul> <li>The python libraries in SeaTable Cloud can not be changed.</li> <li>If you run your own SeaTable Server it is possible to install your own libraries.</li> </ul>"},{"location":"scripts/python/common_questions/#printing-complex-elements-is-sometimes-difficult-to-read","title":"Printing complex elements is sometimes difficult to read","text":"<p>Do not hesitate to run your code in a Python IDE which could have specific features for data visualization (don't forget you won't be able to rely on context to provide <code>api_token</code> and <code>server_url</code>, see first question for dual run syntax). You could also use the <code>json</code> library to make the output of complex objects easier to read:</p> <pre><code>import json # (1)!\nfrom seatable_api import Base,context\nbase = Base(context.api_token,context.server_url)\nbase.auth()\n\nprint(json.dumps(base.get_metadata(), indent='\u2003')) # (2)!\n</code></pre> <ol> <li> <p>Import the json library</p> </li> <li> <p>Print <code>json.dumps(object, indent='\u2003\u2003')</code> instead of just printing object. You have to explicitly specify the indent character (which is not a classic space character) as the output window of SeaTable's script editor actually trims indent spaces.</p> </li> </ol>"},{"location":"scripts/python/common_questions/#dealing-with-more-than-1000-rows-at-once-with-batch-operations","title":"Dealing with more than 1000 rows at once with batch operations","text":"<p>As presented in the API Reference, batch operations such as <code>base.batch_append_rows</code>, <code>base.batch_update_rows</code>, <code>base.batch_delete_rows</code> or <code>base.batch_update_links</code> have a maximum number of 1000 rows. To deal with a higher number of rows, you could:</p> <ul> <li> <p>Use an <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code> SQL query that can operate on an unlimited number of rows</p> </li> <li> <p>Use a <code>while</code> loop to split you operation into 1000-rows chunks for example (however this won't exactly be a single operation anymore):</p> </li> </ul> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n# You want to batch append new_rows which is more than 1000-rows long\nwhile len(new_rows)&gt;0 :\n    end = min(1000,len(new_rows))\n    rows_chunk = new_rows[:end]\n    print(f\"{rows_chunk[0]['Name']} &gt; {rows_chunk[-1]['Name']}\")\n    base.batch_append_rows(\"Table1\", rows_chunk)\n    new_rows = new_rows[end:len(new_rows)]\n</code></pre> <p>To batch update links, the loop will be slightly more complex as you'll have to deal with <code>other_rows_ids_map</code> as well</p>"},{"location":"scripts/python/introduction/","title":"Introduction","text":"<p>Python scripts connects to SeaTable databases with the python library seatable-api. You can find the source code on GitHub. Python scripts can be and executed directly in a base using a SeaTable component called Python Pipeline. You can also choose to run scripts locally. Where you run your Python script has consequences on the available libraries and authentication.</p> <p>Indents are important</p> <p>Please take care of indentations! Indentation is mandatory in Python to define the blocks of statements. The number of spaces must be uniform in a block of code. It is preferred to use whitespaces instead of tabs to indent in Python. If the indentations are wrong, the scripts will throw errors or not work as expected!</p>"},{"location":"scripts/python/introduction/#libraries","title":"Libraries","text":"<p>The current Python Pipeline ships with Python 3.12 and a bundle of third party libraries. One of the bundled library and the main library to interact with SeaTable bases is seatable-api.</p> <p>At a minimum, the Base and context function from the seatable-api library must be imported. Additionally, you can import functions from the bundled libraries.</p> <pre><code>from seatable_api import Base, context\nfrom datetime import datetime\n</code></pre> <p>When running Python scripts locally, you can take advantages of the uncountable number of Python libraries. </p>"},{"location":"scripts/python/introduction/#authentication","title":"Authentication","text":"<p>Python (in comparison to JavaScript) scripts need an authentication. SeaTable provides multiple tokens to obtain authorization to read and write a base. But let's keep things simple! If you develop Python scripts in SeaTable, just use the context object <code>context.api_token</code> or provide a so called <code>API token</code> of a base (see Authorization with API token below). If you want to learn more about authentication, all details can be found in the SeaTable API Reference.</p> <p>Protect your credentials</p> <p>Please be aware that a python script is readable for all users, who have access to this base. Therefore try to avoid exposing your credentials directly in the code! Use environment variables or <code>.venv</code> files instead.</p>"},{"location":"scripts/python/introduction/#authorization-with-api-token","title":"Authorization with API token","text":"<p>Using this method, you will use the API token of the base. Within SeaTable's integrated Python editor, authentication can be done very simply thanks to the context object. In local environment, the context object is not available. You'll have to provide directly the <code>api_token</code> and the <code>server_url</code> variables. The API token can be directly generated in the web interface.</p> SeaTable's integrated Python editorLocal execution <pre><code>from seatable_api import Base, context  # (1)!\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n</code></pre> <ol> <li>Don't forget to import <code>context</code>. Thanks to this, you won't have to manually provide any credential.</li> </ol> <pre><code>from seatable_api import Base # (1)!\n\nAPI_TOKEN = 'c3c75dca2c369848455a39f4436147639cf02b2d' # (2)!\nSERVER_URL = 'https://cloud.seatable.io'\n\nbase = Base(API_TOKEN, SERVER_URL)\nbase.auth()\n</code></pre> <ol> <li> <p>No need to import <code>context</code> here as it won't actually be available.</p> </li> <li> <p>This is for demonstration purpose only: try to avoid exposing your credentials directly in the code! Use environment variables or <code>.venv</code> files instead.</p> </li> </ol> <p>It is even possible to develop a Python script in the way that it could be executed both in the cloud and locally without changing the code.</p>"},{"location":"scripts/python/introduction/#authorization-with-account-object","title":"Authorization with account object","text":"<p>Instead of using an API token, you can also authenticate using the <code>account</code> object. Doing so, you'll have to provide both your <code>username</code> and <code>password</code> (in addition to the <code>server_url</code> variable). </p> <p>Whereas the API token is specific to a base, the <code>account</code> object is general and gives you access to all your bases (as when you log on SeaTable). To get a specific base, you'll have to use the <code>get_base</code> function, given the workspace ID <code>workspace_id</code> and the name of the base <code>base_name</code>. To get the workspace ID:</p> <ol> <li> <p>Go to the SeaTable home page.</p> </li> <li> <p>Click the base whose workspace ID you want to determine.</p> </li> <li> <p>When the selected base has opened, you can read the Workspace ID at the top of the page URL, which actually looks like https://cloud.seatable.io/workspace/<code>84254</code>/dtable/MyBase (or any <code>server_url</code> instead of https://cloud.seatable.io).</p> </li> </ol> <pre><code>from seatable_api import Account\naccount = Account(username, password, server_url)\naccount.auth()\nbase = account.get_base(workspace_id, base_name)\n</code></pre>"},{"location":"scripts/python/introduction/#authorization-expiration-handling","title":"Authorization expiration handling","text":"<p>This feature works with SeaTable version 3.1+</p> <p>In some cases, the program needs to run for a (very) long time, the code of base operations usually being located in a <code>while</code> or <code>for</code> loop. . In this case, authorization may expire during execution and cause the program to break. We provide an exception called <code>AuthExpiredError</code> that can be caught for reauthorization.</p> <pre><code>from seatable_api import Base, context\nfrom seatable_api.exception import AuthExpiredError\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth()\n\nwhile True: # (1)!\n    try:\n        base.append_row('Table1', {\"xxx\":\"xxx\"})\n        ...\n    except AuthExpiredError:\n       base.auth()\n</code></pre> <ol> <li>Always be careful with infinite loops!</li> </ol>"},{"location":"scripts/python/introduction/#base-operations-limits","title":"Base operations limits","text":"<p>As Python scripts are tailored for huge base manipulations and because they actually rely on the SeaTable API, you might encounter Rate or Size limits if you are not vigilant. Here are few tips to avoid reaching the limits:</p> <ul> <li> <p>Be always careful with operations in <code>for</code> or <code>while</code> loops (ensure the ending conditions will be reached)</p> </li> <li> <p>Use batch operations as often as possible. Replace for example several <code>base.append_row</code> calls with a single <code>base.batch_append_rows</code> call. Here are the main batch function:</p> <ul> <li><code>base.batch_append_rows</code></li> <li><code>base.batch_update_rows</code></li> <li><code>base.batch_delete_rows</code></li> <li><code>base.batch_update_links</code></li> </ul> </li> <li> <p>Learn more about lower your calls</p> </li> </ul>"},{"location":"scripts/python/examples/","title":"Examples","text":"<p>This section contains some examples of Python Scripts. The first three scripts are the same than in the JavaScript section. </p> <p>Even if Python scripts are capable of checking if the base structure (tables and columns) needed exist and of creating it if necessary, we didn't implement this feature in the scripts so you can focus on the actual goal of each script. </p> <p>For each example, you'll need a special base structure so that you can just copy&amp;paste the scripts into SeaTable and run them.</p> <p>If you don't want to recreate the tables, here are two bases containing the tables required for each example, depending on whether you want to recreate the scripts yourself or you prefer them to already be present:</p> <ul> <li>Examples material (without scripts)</li> <li>Examples material (scripts included)</li> </ul> <p>Once downloaded, you can easily create a base from the DTABLE file.</p>"},{"location":"scripts/python/examples/#add-rows","title":"Add rows","text":"<p>This script demonstrates how to add rows to record monthly repetitive expenses in a ledger.</p> <p>read more </p>"},{"location":"scripts/python/examples/#calculate-accumulated-value","title":"Calculate accumulated value","text":"<p>This script computes an accumulated value (adds the value of the current row and the previous rows), similar to the Calculate accumulated value operation from the data processing menu.</p> <p>read more </p>"},{"location":"scripts/python/examples/#statistics","title":"Statistics","text":"<p>This script computes, from a list of clocking times, daily clock in (earliest clocking) and clock out (latest clocking) times for each day and staff member.</p> <p>read more </p>"},{"location":"scripts/python/examples/#email-sender","title":"Email sender","text":"<p>This Python script demonstrates sending emails via SMTP using the smtplib module and constructing MIME objects to compose rich content emails within SeaTable.</p> <p>read more </p>"},{"location":"scripts/python/examples/#barcode-generator","title":"Barcode generator","text":"<p>This Python script demonstrates the process of converting text slices into barcode images and storing them in an image column within SeaTable.</p> <p>read more </p>"},{"location":"scripts/python/examples/#qr-code-generator","title":"QR code generator","text":"<p>This Python script is designed to generate QR codes and associate them with corresponding records in a SeaTable base. It uses the seatable_api library and qrcode library to accomplish this task.</p> <p>read more </p>"},{"location":"scripts/python/examples/#mysql-synchronization","title":"MySQL synchronization","text":"<p>This Python script facilitates the synchronization of data from a MySQL database to a SeaTable table.</p> <p>read more </p>"},{"location":"scripts/python/examples/#watch-stock-price","title":"Watch stock price","text":"<p>Integrating data from the Twelve Data API with SeaTable facilitates the updating and maintenance of current stock prices within a designated table in the SeaTable environment.</p> <p>read more </p>"},{"location":"scripts/python/examples/#merge-pdf","title":"Merge PDF","text":"<p>Merge PDF files and save the merged file into a new row in a SeaTable base.</p> <p>read more: </p>"},{"location":"scripts/python/examples/#convert-heic-to-png","title":"Convert HEIC to PNG","text":"<p>Convert HEIC image files to PNG format and save the converted file into a new row in a SeaTable base.</p> <p>read more: </p>"},{"location":"scripts/python/examples/auto-add-rows/","title":"Add rows","text":"<p>This script adds two expenses rows in a ledger. Before adding them, it checks if they have already been added for the current month.</p> <p>Here is the structure of the table named <code>Daily expenses</code> you need so that this script could run:</p> Column name Name Date Type Type (single select) Fee Column type text date text single select number <p>Unlike JavaScript, Python scripts allow you to handle single- or multiple-select options, which make you capable of checking if the needed options exist and of creating them if necessary directly inside the script.</p> <pre><code>from seatable_api import Base, context\nfrom seatable_api.date_utils import dateutils\n\"\"\"\nThis script add two expenses rows in a ledger. Before adding them, \nit checks if they have already been added for the current month.\n\"\"\"\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n# Get date objects on the 10th and 20th of the current month\ndate = dateutils.today()\ndate10 = dateutils.date(dateutils.year(date), dateutils.month(date), 10)\ndate20 = dateutils.date(dateutils.year(date), dateutils.month(date), 20)\n\n# Check if the options you will need already exist, and create them if necessary\noptions_to_add = []\ncurrent_options = base.get_column_by_name('Daily expenses', 'Type (single select)')['data']['options']\ncloud_service_option = [o for o in current_options if o['name'] == 'Cloud service']\nif not cloud_service_option :\n    options_to_add.append({\"name\": \"Cloud service\", \"color\": \"#aaa\", \"textColor\": \"#000000\"})\ndaily_office_option = [o for o in current_options if o['name'] == 'Daily office']\nif not daily_office_option :\n    options_to_add.append({\"name\": \"daily office\", \"color\": \"#aaa\", \"textColor\": \"#000000\"})\nif options_to_add :\n    base.add_column_options('Daily expenses', 'Type (single select)', options_to_add)\n\n# Check if the monthly expense items have already been created and eventually create them\nfeeAWS = {}\nfeeAWSCurrentMonth = base.query('select * from `Daily expenses` where Name=\"Amazon Cloud Service\" and Date=\"' + date10 + '\"')\nif not feeAWSCurrentMonth :\n    feeAWS = {'Name': 'Amazon Cloud Service', \n              'Date': date10,\n              'Type': 'Cloud service',\n              'Type (single select)': 'Cloud service',\n             }\n\nfeeClean = {}\nfeeCleanCurrentMonth = base.query('select * from `Daily expenses` where Name=\"Clean\" and Date =\"' + date20 + '\"')\nif not feeCleanCurrentMonth :\n    feeClean = {'Name': 'Clean', \n                'Date': date20,\n                'Type': 'Daily office',\n                'Type (single select)': 'Daily office',\n                'Fee': 260\n               }\n\n# Create the monthly expense items (if needed)\nif (feeAWS) :\n    base.append_row('Daily expenses', feeAWS);\nif (feeClean) :\n    base.append_row('Daily expenses', feeClean);\n</code></pre>"},{"location":"scripts/python/examples/calculate-accumulated-value/","title":"Calculate accumulated value","text":"<p>This script accumulates the values of the current row and the previous rows, and records the result to the current row. It does the same than the Calculate accumulated value operation from the data processing menu. If there's a grouping rule active on the view, accumulated values will be calculated for each group.Otherwise, values are accumulated for all rows. Please not that this script only supports grouping by a single column.</p> <p>Here is the structure of the table named <code>Accumulated value</code> you need so that this script could run:</p> Column name Value to add Incremental total Grouping column Column type number number single select <pre><code>from seatable_api import Base, context\nfrom seatable_api.date_utils import dateutils\n\"\"\"\nThis script accumulates the values of the current row and the previous rows, \nand records the result to the current row (as the *Calculate accumulated value*\noperation from the data processing menu).\n\"\"\"\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\ntable_name = 'Accumulated value'\nview_name = 'Default View'\n\n# Name of the column that records total number at a specific time\nvalue_column_name = 'Value to add'\n# Name of the column that need to calculate incremental value\nincremental_column_name = 'Incremental total'\n\nview = base.get_view_by_name(table_name, view_name)\nrows = base.list_rows(table_name, view_name)\n\n# If current view is a grouped view\nif 'groupbys' in view and len(view['groupbys']) &gt; 0 :\n#    # Get group view rows\n    grouping_column = [c for c in base.list_columns(table_name) if 'column_key' in view['groupbys'][0] and c['key'] == view['groupbys'][0]['column_key']]\n    if grouping_column and len(grouping_column) == 1 :\n            grouping_column_name = grouping_column[0]['name']\n    group_values = []\n    for row in rows :\n        if row[grouping_column_name] not in group_values :\n            group_values.append(row[grouping_column_name])\n    for value in group_values :\n        group_rows = [r for r in rows if r[grouping_column_name] == value]\n        incremental_total = 0\n        for row_index,row in enumerate(group_rows) :\n            current_number = row[value_column_name];\n            if current_number :\n                # Calculate increment\n                # If there is no previous row, set increase_count to 0\n                previous_number = 0 if row_index == 0 else incremental_total\n                increase_count = current_number + previous_number\n                incremental_total = increase_count\n                # Set calculated increment to row\n                base.update_row(table_name, row['_id'], {incremental_column_name: increase_count})\nelse :\n    incremental_total = 0\n    for row_index,row in enumerate(rows) :\n        current_number = row[value_column_name];\n        if current_number :\n            # Calculate increment\n            # If there is no previous row, set increase_count to 0\n            previous_number = 0 if row_index == 0 else incremental_total\n            increase_count = current_number + previous_number\n            incremental_total = increase_count\n            # Set calculated increment to row\n            base.update_row(table_name, row['_id'], {incremental_column_name: increase_count})\n</code></pre>"},{"location":"scripts/python/examples/compute-attendance-statistics/","title":"Compute attendance statistics","text":"<p>This script computes, from a list of clocking times, daily clock in (earliest clocking) and clock out (latest clocking) times for each day and staff member.</p> <p>Here is the structure of the table named <code>Clocking table</code> that contains the input data:</p> Column name Name Department Date Clocking time Column type text single select date duration <p>And the structure of the table <code>Attendance statistics</code> where the daily summarized values will be stored:</p> Column name Name Department Date Clock-in Clock-out Column type text single select date duration duration <pre><code>from seatable_api import Base, context\n\"\"\"\nThis script computes, from a list of clocking times, \ndaily clock in  (earliest clocking) and clock out \n(latest clocking) times for each day and staff member.\n\"\"\"\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\norigin_table_name = 'Clocking table'\norigin_view_name = 'Default View'\norigin_name_column_name = 'Name'\norigin_department_column_name = 'Department'\norigin_date_column_name = 'Date'\norigin_time_column_name = 'Clocking time'\n\ntarget_table_name = 'Attendance statistics'\ntarget_name_column_name = 'Name'\ntarget_department_column_name = 'Department'\ntarget_date_column_name = 'Date'\ntarget_start_time_column_name = 'Clock-in'\ntarget_end_time_column_name = 'Clock-out'\n\ndef get_date(e):\n  return e[origin_date_column_name]\n\n#table = base.getTableByName(origin_table_name)\n#view = base.getViewByName(table, origin_view_name)\nrows = base.list_rows(origin_table_name, origin_view_name)\n\n# Sort the rows in the Clocking table according to the date column\nrows.sort(key=get_date)\n\n# Group all rows via date and save them to groupedRows, the format\n# of the object is {'2020-09-01': [row, ...], '2020-09-02': [row, ...]}\ngrouped_rows = {}\ndate_stat_items = []\nfor row in rows :\n    date = row[origin_date_column_name]\n    if date not in grouped_rows :\n        grouped_rows[date] = []\n    grouped_rows[date].append(row)\n\n# Traverse all the groups in grouped_rows\nfor date_key in grouped_rows :\n    # Get all clocking data of all members for the current date\n    date_rows = grouped_rows[date_key]\n    staff_date_stat_item = {}\n    # Traverse these rows and group by the name of the employee, get the clock-in and clock-out time of each employee that day, and save it to staffDateStatItem\n    # the format is { EmployeeName: {Name: 'EmployeeName', Date: '2020-09-01', Clock-in: '08:00', Clock-out: '18:00'},... }\n    for row in date_rows :\n        name = row[origin_name_column_name]\n        if name not in staff_date_stat_item :\n            # Generate a new row based on the original row data, and add Clock-in and Clock-out columns in the newly generated row\n            staff_date_stat_item[name] = { \n                target_name_column_name: name, \n                target_date_column_name: row[origin_date_column_name],\n                target_department_column_name: row[origin_department_column_name],\n                target_end_time_column_name: row[origin_time_column_name],\n                target_start_time_column_name: row[origin_time_column_name]\n            }\n        else :\n            # When another record (same employee and same date) is found, compare the time, choose the latest one as the Clock-out time, and the earliest one as the Clock-in time\n            time = row[origin_time_column_name]\n            staff_item = staff_date_stat_item[name]\n            if staff_item[target_start_time_column_name] &gt; time :\n                staff_item[target_start_time_column_name] = time\n            elif staff_item[target_end_time_column_name] &lt; time :\n                staff_item[target_end_time_column_name] = time\n    for staff in staff_date_stat_item :\n        date_stat_items.append(staff_date_stat_item[staff])\n\n# Write the attendance data of all employees on the current date into the table\nbase.batch_append_rows(target_table_name,date_stat_items)\n</code></pre>"},{"location":"scripts/python/examples/generate_barcode/","title":"Generate Barcode","text":"<p>This Python script demonstrates the process of converting text slices into barcode images using the <code>barcode</code> module and storing them in an image column within SeaTable. It offers an automated way to generate barcode images from text data in a SeaTable table, enhancing data visualization and association within the SeaTable platform.</p> <p>Here is the structure of the table named <code>Generate 1 or 2D barcodes</code> you need so that this script could run (variables are present at the beginning of the script to easily adapt the names):</p> Column name Message Barcode image Column type text image <p>This table can be shared with the Generate QR code example by adding it an extra QRcode image image-type column.</p>"},{"location":"scripts/python/examples/generate_barcode/#process-overview","title":"Process Overview","text":"<ol> <li>Iterates through rows in a SeaTable table whose name is specified in the <code>TABLE_NAME</code> variable and check if a barcode already exists for each row (operates only on rows without barcode). Includes exception handling to manage errors encountered during the barcode image generation process.</li> <li>Converts text data from a designated column (<code>TEXT_COL</code>) into barcode images using the specified barcode type (<code>BARCODE_TYPE</code>).</li> <li>Saves the generated barcode images temporarily.</li> <li>Uploads the generated barcode images to SeaTable and associates them with corresponding records (in the <code>BARCODE_IMAGE_COL</code> column).</li> <li>Removes temporary barcode image files after successful upload.</li> </ol>"},{"location":"scripts/python/examples/generate_barcode/#code","title":"Code","text":"<pre><code>import os\nimport time\nimport barcode\nfrom barcode.writer import ImageWriter\nfrom seatable_api import Base, context\n\"\"\"\nThe python script shows how to transfer a slice of text into a barcode image and save it into\nthe image column\n\"\"\"\n\napi_token = context.api_token or \"859ad340d9a2b...8992e14853af5\"\nserver_url = context.server_url or \"https://cloud.seatable.io\"\n\nTABLE_NAME = 'Generate 1 or 2D barcodes'\nTEXT_COL = \"Message\"  # column which is expected to be transferred into barcode\nBARCODE_IMAGE_COL = \"Barcode image\"\nBARCODE_TYPE = 'code128'\n\nCUSTOM_OPTIONS = {\n    \"module_width\": 0.2,       # width of single stripe of barcode, mm\n    \"module_height\": 30.0,     # height of barcode, mm\n    \"quiet_zone\": 6.5,         # padding size of first and last stripe to the image, mm\n    \"font_size\": 10,           # font size of the text below the barcode,pt\n    \"text_distance\": 5.0,      # distance between the text and the barcode, mm\n}\n\n\nCODE = barcode.get_barcode_class(BARCODE_TYPE)\nbase = Base(api_token, server_url)\nbase.auth()\n\ndef get_time_stamp():\n    return str(int(time.time()*100000))\n\nupdated_rows = 0\n# 1. Iterate through rows\nfor row in base.list_rows(TABLE_NAME):\n    # 1.b Continue if the image is already shown up here\n    if row.get(BARCODE_IMAGE_COL):\n        continue\n    # 1.c Error handling\n    try:\n        row_id = row.get('_id')\n        msg = str(row.get(TEXT_COL))\n\n        # 2. Create a barcode object\n        code_img = CODE(msg, writer=ImageWriter())\n\n        # 3. Temporarily save the image\n        save_name = \"%s_%s\" % (row_id, get_time_stamp())\n        file_name = code_img.save(\"/tmp/%s\" % save_name, options=CUSTOM_OPTIONS)\n\n        # 4. Upload the barcode image to the base and associate it to the row\n        info_dict = base.upload_local_file(file_name, name=None, file_type='image', replace=True)\n        img_url = info_dict.get('url')\n        base.update_row(TABLE_NAME, row_id, {BARCODE_IMAGE_COL: [img_url]})\n\n        # 5. Remove the image file which was saved temporarily\n        os.remove(file_name)\n        updated_rows += 1\n    except Exception as error:\n        print(\"error occured during barcode generate\", error)\n        continue\n\n# Summary\nprint(\"I created %s barcodes\" % updated_rows)\n</code></pre>"},{"location":"scripts/python/examples/generate_qrcode/","title":"Generate QR code","text":"<p>This Python script is designed to generate QR codes and associate them with corresponding records in a SeaTable base. In addition to <code>seatable_api</code> library, it uses the <code>qrcode</code> module to accomplish this task. In comparison to the [Generate barcode example], this example adds an <code>OVERWRITE</code> parameter to choose if existing QRcodes should be recreated or not.</p> <p>Here is the structure of the table named <code>Generate 1 or 2D barcodes</code> you need so that this script could run (variables are present at the beginning of the script to easily adapt the names):</p> Column name Message QRcode image Column type text image <p>This table can be shared with the Generate barcode example by adding it an extra Barcode image image-type column.</p>"},{"location":"scripts/python/examples/generate_qrcode/#process-overview","title":"Process Overview","text":"<ol> <li>Iterates through rows in a SeaTable table whose name is specified in the <code>TABLE_NAME</code> variable and check if a QRcode already exists for each row (operates either on all rows or only on rows without QRcodes depending on the <code>OVERWRITE</code> parameter). Includes exception handling to manage errors encountered during the barcode image generation process.</li> <li>Generates QR codes based on the text content in the designated column (<code>TEXT_COL</code>).</li> <li>Saves the QR code images temporarily.</li> <li>Uploads the generated images to SeaTable and associates them with corresponding records (in the <code>QRCODE_IMAGE_COL</code> column).</li> <li>Removes temporary image files after successful upload.</li> </ol>"},{"location":"scripts/python/examples/generate_qrcode/#code","title":"Code","text":"<pre><code>import os\nimport time\nimport qrcode\nfrom seatable_api import Base, context\n\"\"\"\nThe python script shows how to transfer a slice of text into a QR code image and save it into\nthe image column\n\"\"\"\n\napi_token = context.api_token or \"859ad340d9a2b...8992e14853af5\"\nserver_url = context.server_url or \"https://cloud.seatable.io\"\n\nTABLE_NAME = \"Generate 1 or 2D barcodes\"\nTEXT_COL = \"Message\"  # text column which is expected to be transferred into QR code\nQRCODE_IMAGE_COL = \"QR code image column\"\n\nOVERWRITE = True  # set to True to overwrite existing barcode images\n\nbase = Base(api_token, server_url)\nbase.auth()\n\nqr = qrcode.QRCode(\n    version=2,\n    error_correction=qrcode.constants.ERROR_CORRECT_L,\n    box_size=40,\n    border=8\n)\n\ndef get_time_stamp():\n    return str(int(time.time() * 100000))\n\ndef main():\n  # 1. Iterate through rows\n  for row in base.list_rows(TABLE_NAME):\n    # 1.b Continue if the image is already shown up here \n    # and OVERWRITE parameter is not True\n    if not OVERWRITE and row.get(QRCODE_IMAGE_COL):\n      print(\"Skipping row. Image already exists.\")\n      continue\n    # 1.c Error handling\n    try:\n      row_id = row.get('_id')\n      message = row.get(TEXT_COL)\n\n      # Check if message isn't empty before processing\n      if not message:\n        print(\"Skipping row. Empty message.\")\n        continue\n\n      # 2. Clear, add data and make a QRCode object\n      qr.clear()\n      qr.add_data(str(message))\n      qr.make()\n\n      img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n      # 3. Temporarily save the image\n      save_name = f\"{row_id}_{get_time_stamp()}\"\n      img.save(f\"/tmp/{save_name}.png\")\n\n      # 4. Upload the QR code image to the base and associate it to the row\n      info_dict = base.upload_local_file(f\"/tmp/{save_name}.png\", name=None, file_type='image', replace=True)\n      img_url = info_dict.get('url')\n      base.update_row(TABLE_NAME, row_id, {QRCODE_IMAGE_COL: [img_url]})\n\n      # 4. Remove the image file which was saved temporarily\n      os.remove(f\"/tmp/{save_name}.png\")\n    except Exception as exception:\n      print(\"Error occurred during Image generation:\", exception)\n      continue\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"scripts/python/examples/heic_to_png/","title":"Convert HEIC to PNG","text":"<p>Requires Python Runner v4.1.1</p> <p>The library <code>pillow_heif</code> was added with the Python Runner version 4.1.1. If you're using SeaTable Cloud, this was added with v5.1.</p> <p>This Python script demonstrates how to convert HEIC image files to PNG format and save the converted file into a new row in a SeaTable base. It uses the <code>pillow_heif</code> library to handle HEIC files, <code>Pillow</code> for image processing, and the <code>seatable_api</code> library to interact with SeaTable. The script processes one HEIC file per row; if you need to handle multiple HEIC files per row, you'll need to modify the script accordingly.</p> <p>Here is the structure of the table named <code>Convert images</code> you need so that this script could run (variables are present at the beginning of the script to easily adapt the names):</p> Column name HEIC PNG Column type image image"},{"location":"scripts/python/examples/heic_to_png/#script-overview","title":"Script Overview","text":"<p>The script performs the following steps:</p> <ol> <li>Authenticate with SeaTable: Uses the API token and server URL to authenticate.</li> <li>Download HEIC Files: Retrieves HEIC files from the <code>HEIC</code> column in SeaTable.</li> <li>Convert HEIC to PNG: Transforms the downloaded HEIC file to PNG format with 90% quality using <code>Pillow</code>.</li> <li>Upload Converted PNG: (a) Uploads the PNG file back to SeaTable and (b) updates the row with the new file URL in the <code>PNG</code> column.</li> </ol>"},{"location":"scripts/python/examples/heic_to_png/#example-script","title":"Example Script","text":"<pre><code>import requests\nfrom PIL import Image\nfrom pillow_heif import register_heif_opener\nfrom seatable_api import Base, context\n\"\"\"\nThis Python script demonstrates how to convert HEIC image files\n to PNG format and save the converted file into a new row in a SeaTable base.\n\"\"\"\n\n# Activate heif/heic support\nregister_heif_opener() # (1)!\n\nTABLE_NAME = \"Convert images\"\nFILE_COLUMN = \"HEIC\"\nRESULT_COLUMN = \"PNG\"\n\n# 1. Authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nfor row in base.list_rows(TABLE_NAME):\n    if row.get(FILE_COLUMN) is None:\n        continue\n\n    # 2. Download heic image\n    url = row.get(FILE_COLUMN)[0]\n    filename_heic = url.split('/')[-1]\n    base.download_file(url, filename_heic)\n\n    # 3. Transform image to png\n    im = Image.open(filename_heic)\n    filename_png = f'image-{row[\"_id\"]}.png'\n    im.save(filename_png, quality=90)\n    print('Saved image')\n\n    # 4.a) Upload\n    info_dict = base.upload_local_file(filename_png, name=None, file_type='image', replace=True)\n    print('Uploaded file')\n\n    # 4.b) Save back to SeaTable Base\n    img_url = info_dict.get('url')\n    base.update_row(TABLE_NAME, row['_id'], {RESULT_COLUMN: [img_url]})\n    print('Stored image info in base')\n</code></pre> <ol> <li>Note the <code>register_heif_opener()</code> call to enable HEIC file support.</li> </ol>"},{"location":"scripts/python/examples/merge_pdf/","title":"Merge PDF","text":"<p>Requires Python Runner v4.1.1</p> <p>The library <code>pdfmerge</code> was added with the Python Runner version 4.1.1. If you're using SeaTable Cloud, this was added with v5.1.</p> <p>This Python script demonstrates how to merge several PDF files and save the merged file into a new column in a SeaTable base. It utilizes the <code>pdfmerge</code> library to handle the PDF merging process and the <code>seatable_api</code> library to interact with SeaTable.</p> <p>Here is the structure of the table named <code>Merge PDF</code> you need so that this script could run (variables are present at the beginning of the script to easily adapt the names):</p> Column name PDF files Merged file Column type file file"},{"location":"scripts/python/examples/merge_pdf/#script-overview","title":"Script Overview","text":"<p>The script performs the following steps:</p> <ol> <li>Authenticate with SeaTable: Uses the API token and server URL to authenticate.</li> <li>Retrieve the files: For each row, the script gets the name and URL of every file in the <code>PDF files</code> column.</li> <li>Download PDF Files</li> <li>Merge PDFs: Combines the downloaded PDF files using <code>pdfmerge</code> into a single PDF named with the pattern <code>output-{row_id}.pdf</code>.</li> <li>Upload Merged PDF: Uploads the merged PDF back to SeaTable and updates the row with the new file in the <code>Merged file</code> column.</li> </ol>"},{"location":"scripts/python/examples/merge_pdf/#example-script","title":"Example Script","text":"<pre><code>import os\nimport requests\nimport sys\nimport shutil\nfrom pdfmerge import pdfmerge\nfrom seatable_api import Base, context\n\"\"\"\nThis Python script demonstrates how to merge PDF \nfiles and save the merged file into a new column.\n\"\"\"\n\nTABLE_NAME = \"Merge PDF\"\nFILE_COLUMN = \"PDF files\"\nRESULT_COLUMN = \"Merged file\"\n\n# 1. Authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n# Get rows\nfor row in base.list_rows(TABLE_NAME):\n    if row.get(FILE_COLUMN) is None:\n        continue\n\n    # 2. Retrieve all files from the row\n    files = [{'name': file['name'], 'URL': file['url']} for file in row[FILE_COLUMN]]\n    file_names = []\n\n    # 3. Download PDFs\n    for f in files :\n        base.download_file(f['URL'],f['name'])\n        file_names.append(f['name'])\n    assert len(file_names) == len(files)\n    print(f\"Downloaded {len(files)} files\")\n\n    # 4. Merge\n    output_filename = f'output-{row[\"_id\"]}.pdf'\n    pdfmerge(file_names, output_filename)\n    print('Merged PDF files')\n\n    # 5. Upload file + store URL in the base\n    info_dict = base.upload_local_file(output_filename, name=None, file_type='file', replace=True)\n    print(info_dict)\n    base.update_row(TABLE_NAME, row['_id'], {RESULT_COLUMN: [info_dict]})\n    print('Uploaded PDF file')\n</code></pre>"},{"location":"scripts/python/examples/send_email/","title":"Send emails","text":"<p>This Python script demonstrates sending emails via SMTP using the smtplib module and constructing MIME objects to compose rich content emails within SeaTable. It also retrieves configuration parameters from the database. This example uses two tables:</p> <ul> <li>The <code>Contacts</code> table storing the contacts you want to send email to:</li> </ul> Column name Name Email Column type text email <ul> <li>The <code>Send email config</code> table storing the email sending parameters:</li> </ul> Column name Subject Recipient email Subject source Email format Attach file File Column type text single select single select single select checkbox file <ul> <li>Recipient email can be <code>hard-coded</code> (recipients are defined l.39 of the script as a list of email addresses) or <code>database</code> (recipients are retrieved from the <code>Email</code> column of the <code>Contacts</code> table).</li> <li><code>Subject source</code> can be <code>hard-coded</code> (define manually the subject of the mail l.48 of the script) or <code>database</code> (the subject is retrieved from the <code>Subject</code> column of the <code>Send email config</code> table).</li> <li>Email format can be <code>text</code> (plain text defined l.61) or <code>html</code> (HTML-formatted message, defined l.67). Of course, you can imagine a third <code>database</code> option allowing you to retrieve the email body from your <code>Send email config</code> table.</li> <li>If <code>Attach file</code> is checked, the first file from the <code>File</code> column will be enclosed (don't forget to adapt the <code>_subtype</code> l.98 of the script if your file is not a pdf).</li> <li>You can eventually add a <code>Send email</code> column, configured to launch the script. The script itself is written to use either the <code>context.current_row</code> data, or the first row of the table if no <code>context</code> is defined (script launched from outside SeaTable).</li> </ul>"},{"location":"scripts/python/examples/send_email/#process-overview","title":"Process overview","text":"<ol> <li>Retrieves email configuration from the <code>Send email config</code> table.</li> <li>Eventually retrieves recipient email addresses from a designated SeaTable table column (<code>Email</code> column in <code>Contact</code> table).</li> <li>Eventually retrieves email subject.</li> <li>Composes an email using plain text or HTML content to create a rich-text message body.</li> <li>Attaches a file from SeaTable to the email by fetching its download link using the SeaTable API and attaching it to the email.</li> <li>Sends the email after authenticating using SMTP parameters.</li> </ol>"},{"location":"scripts/python/examples/send_email/#code","title":"Code","text":"<pre><code>import smtplib, ssl\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.header import Header\nfrom urllib import parse\nimport requests\nfrom seatable_api import Base, context\n\"\"\"\nThis Python script demonstrates sending emails via SMTP \nusing the smtplib module and constructing MIME objects \nto compose rich content emails within SeaTable.\n\"\"\"\n\n# SeaTable API authentication\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nCONFIG_TABLE = 'Send email config'\nCONTACTS_TABLE = 'Contacts'\n\n# SMTP server configurations for sending emails\nsmtp_server = 'my.smtpserver.com'\nsmtp_port = 465\nusername = 'my.em@il.com'\npassword = 'topsecret'\nsender = 'My name'\n\n# 1. Get email configuration from the 'Send email config' table\ncurrent_row = context.current_row or base.list_rows(CONFIG_TABLE)[0]\n# Choose RECIPIENT_EMAIL between \"hard-coded\" (subject l.39 of this script)\n# or \"database\" (get emails from 'Email' column in the 'Contacts' table)\nRECIPIENT_EMAIL = current_row.get('Recipient email')\n# Choose SUBJECT between \"hard-coded\" (address l.48 of this script)\n# or \"database\" (get subject from 'Subject' column in the 'Send email config' table)\nSUBJECT_SOURCE = current_row.get('Subject source')\n# Choose EMAIL_FORMAT between \"text\" (hard-coded plain text, defined l.61)\n# or \"html\" (hard-coded HTML, defined l.67)\n# and \"database\" (content of the 'Message' column in the 'Send email config' table)\nEMAIL_FORMAT = current_row.get('Email format')\n# If Attach file, the script retrieves the first file from the 'File' column of the 'Sending email config'\nATTACH_FILE = current_row.get('Attach file')\n\n# 2. Set recipient email addresses\nif RECIPIENT_EMAIL == \"hard-coded\" :\n  # Option a) Define the recipient email address in this script\n  receivers = ['johndoe@email.com']\nelif RECIPIENT_EMAIL == \"database\" :\n  # Option b) Retrieve recipient email addresses from the 'Contacts' table in SeaTable\n  receiver_rows = base.list_rows(CONTACTS_TABLE)\n  receivers = [row['Email'] for row in receiver_rows if row.get('Email')]\n\n# 3. Set email subject\nif SUBJECT_SOURCE == \"hard-coded\" :\n  # Option a) Define the subject in this script\n  subject = 'SeaTable Send email'\nelif SUBJECT_SOURCE == \"database\" :\n  # Option b) Retrieve the subject from the 'Send email config' table\n  current_row = context.current_row or base.list_rows(CONFIG_TABLE)[0]\n  subject = current_row.get('Subject')\n\n# 4. Construct the email message\nmsg = MIMEMultipart()\nmsg['Subject'] = subject\nmsg['From'] = sender + '&lt;' + username + '&gt;'\nmsg['To'] = \", \".join(receivers)\n\nif EMAIL_FORMAT == \"text\" :\n  # Option a) plain text message\n  text = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.seatable.com.com\"\n  text_plain = MIMEText(text,'plain', 'utf-8')\n  msg.attach(text_plain)\n\nelif EMAIL_FORMAT == \"html\" :\n  # Option b) HTML content for the email body\n  html = \"\"\"\n  &lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n      &lt;p&gt;Hi!&lt;br&gt;\n         This is a sample message from SeaTable\n      &lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n  \"\"\"\n  text_html = MIMEText(html,'html', 'utf-8')\n  msg.attach(text_html)\n\n# 5. Attach a file from SeaTable to the email\nif ATTACH_FILE :\n  # Get the file from the 'send email config' table\n  current_row = context.current_row or base.list_rows(CONFIG_TABLE)[0]\n  file_name = current_row['File'][0]['name']\n  file_url = current_row['File'][0]['url']\n  path = file_url[file_url.find('/files/'):]\n  download_link = base.get_file_download_link(parse.unquote(path))\n\n  try:\n      response = requests.get(download_link)\n      if response.status_code != 200:\n          print('Failed to download file, status code: ', response.status_code)\n          exit(1)\n  except Exception as e:\n      print(e)\n      exit(1)\n\n  # Attach the file to the email (adapt _subtype to the type of your file)\n  attached_file = MIMEApplication(response.content, _subtype = \"pdf\")\n  attached_file.add_header('content-disposition', 'attachment', filename = file_name)\n  msg.attach(attached_file)\n\n# 6. Send the email\n\n# option a) Sending the email using SMTP\ntry:\n    with smtplib.SMTP() as email_server:\n        email_server.connect(smtp_server)\n        email_server.login(username, password)\n        email_server.send_message(msg)\n        email_server.quit()\nexcept smtplib.SMTPAuthenticationError:\n    print(\"SMTP User authentication error, Email not sent!\")\nexcept Exception as e:\n    print(f\"SMTP exception {e}\")\n\n'''\n# option b) Sending the email using SMTP / SSL\nssl_context = ssl.create_default_context()\ntry:\n    with smtplib.SMTP_SSL(smtp_server, smtp_port, \n                          context=ssl_context) as email_server:\n        email_server.login(username, password)\n        email_server.send_message(msg)\n        email_server.quit()\nexcept smtplib.SMTPAuthenticationError:\n    print(\"SMTP User authentication error, Email not sent!\")\nexcept Exception as e:\n    print(f\"SMTP exception {e}\")\n\n# option c) Sending the email using SMTP with STARTTLS\ntry:\n    with smtplib.SMTP(smtp_server, smtp_port) as email_server:\n        email_server.starttls()\n        email_server.login(username, password)\n        email_server.send_message(msg)\n        email_server.quit()\nexcept smtplib.SMTPAuthenticationError:\n    print(\"SMTP User authentication error, Email not sent!\")\nexcept Exception as e:\n    print(f\"SMTP exception {e}\")\n'''\n</code></pre>"},{"location":"scripts/python/examples/sync_mysql/","title":"SeaTable MySQL Synchronization","text":"<p>This Python script facilitates the synchronization of data from a MySQL database to a SeaTable table, ensuring consistency and updating records seamlessly. Variables are present at the beginning of the script to easily adapt the names of both Seatable and MySQL tables and columns. The <code>Sync MySQL</code> table requires a single <code>Name</code> text-type column for the script to be able to run.</p>"},{"location":"scripts/python/examples/sync_mysql/#process-overview","title":"Process Overview","text":"<ol> <li>Initializes connections to both (a) SeaTable and (b) MySQL databases.</li> <li>Fetches existing data from the <code>Name</code> column of the <code>Sync MySQL</code> SeaTable table.</li> <li>Retrieves data from the MySQL <code>order</code> table.</li> <li>Compares MySQL data with SeaTable data to identify new records by matching the <code>name</code> field.</li> <li>Adds new records from MySQL to SeaTable (<code>Sync MySQL</code>) for synchronization.</li> </ol>"},{"location":"scripts/python/examples/sync_mysql/#code","title":"Code","text":"<pre><code>import pymysql\nfrom seatable_api import Base, context\n\"\"\"\nThis Python script facilitates the synchronization of data \nfrom a MySQL database to a SeaTable table, ensuring consistency \nand updating records seamlessly.\n\"\"\"\n\n# SeaTable base config\nSERVER_URL = context.server_url or 'http://127.0.0.1:8000'\nAPI_TOKEN = context.api_token or '...'\n\n# SeaTable table config\nST_TABLE_NAME = 'Sync MySQL'\nST_NAME_COLUMN = 'Name'\n\n# MySQL config\nHOST = 'localhost'\nUSER = 'username'\nPASSWORD = 'topsecret'\nMYSQL_DB = 'seatable'\nMYSQL_TABLE = 'order'\nMYSQL_NAME_COLUMN = 'name'\n\ndef sync_mysql():\n    # 1. Initialize connection\n    # 1. a) SeaTable authentication\n    base = Base(API_TOKEN, SERVER_URL)\n    base.auth()\n\n    # 1. b) MySQL connection\n    connection = pymysql.connect(host=HOST, user=USER, password=PASSWORD, db=MYSQL_DB)\n\n    # 2. Fetch existing rows from seaTable\n    rows = base.list_rows(ST_TABLE_NAME)\n    row_keys = [row.get(ST_NAME_COLUMN) for row in rows]\n\n    # 3. Retrieving data from MySQL\n    with connection.cursor(pymysql.cursors.DictCursor) as cursor:\n        sql = \"SELECT * FROM \" + MYSQL_TABLE\n        cursor.execute(sql)\n        mysql_data = cursor.fetchall()\n\n    # Synchronization\n    rows_data = []\n    for item in mysql_data:\n        # 4. Look for data from MySQL not present in SeaTable\n        if item.get(MYSQL_NAME_COLUMN) not in row_keys:\n            row_data = {\n                ST_NAME_COLUMN: item.get(MYSQL_NAME_COLUMN),\n            }\n    # 5. Eventually add missing records\n    if rows_data :\n        base.batch_append_rows(TABLE_NAME, rows_data)\n\n\nif __name__ == '__main__':\n    sync_mysql()\n</code></pre>"},{"location":"scripts/python/examples/update_stock_price/","title":"Watch stock price by querying an API","text":"<p>This Python script demonstrates how to retrieve data from an external source by making a <code>GET</code> request to an external API. The Twelve Data API is indeed used to update and maintain current stock prices within a designated SeaTable table. </p> <p>Free subscription and fake/mock APIs</p> <p>A free subscription is available for Twelve Data if you just want to test the script (up to 800 calls per days are free). </p> <p>If you're interested in querying external APIs, you can find free playground APIs for such purpose such as the very specific cat API, JSONPlaceholder or more complex mock API such as MockFast.io allowing you to define the structure of the response for more complex and heavy testing.</p> <p>Here is the structure of the table named <code>Watch stock</code> you need so that this script could run (variables are present at the beginning of the script to easily adapt the names):</p> Column name Symbol Current stock price Column type text number (dollar) <p>You can create several lines to watch current stock price, for example by specifying AAPL or AMZN for the <code>Symbol</code> column.</p>"},{"location":"scripts/python/examples/update_stock_price/#process-overview","title":"Process Overview","text":"<ol> <li>Initializes configurations for the Twelve Data API and SeaTable server.</li> <li>Fetches current stock prices using the Twelve Data API based on stock symbols from a SeaTable table (from the <code>Symbol</code> column in the <code>Watch stock</code> table).</li> <li>Updates the SeaTable table with the fetched current stock prices in the designated column (<code>Current stock price</code>).</li> <li>Displays the updated stock prices for each symbol in the console.</li> </ol> <p>This script enables the automated update of current stock prices within a SeaTable table by leveraging data from the Twelve Data API, ensuring that stock information remains up-to-date within the SeaTable environment.</p>"},{"location":"scripts/python/examples/update_stock_price/#code","title":"Code","text":"<pre><code>from seatable_api import Base, context\nimport requests\n\"\"\"\nThis Python script integrates data from the Twelve Data API with SeaTable\nto update and maintain current stock prices.\n\"\"\"\n\n# 1. Configuration variables for both SeaTable and Twelve Data\nTWELVE_DATA_API_KEY = \"dfb122bbca6a4...\"  # Replace this with your actual API key from Twelve Data\n\nSERVER_URL = context.server_url or \"https://cloud.seatable.io/\"\nAPI_TOKEN = context.api_token or \"...\"\n\nTABLE_WITH_STOCK_SYMBOLS = \"Stock watch\"\nCOLUMN_WITH_STOCK_SYMBOLS = \"Symbol\"\nCOLUMN_WITH_STOCK_PRICE = \"Current stock price\"\n\ndef get_stock_price(SYMBOL):\n    # Endpoint to fetch current stock price\n    url = f\"https://api.twelvedata.com/price?symbol={SYMBOL}&amp;apikey={TWELVE_DATA_API_KEY}\"\n\n    # Make the GET request to fetch the data\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        output = response.json()\n        return output['price']\n    else:\n        return false\n\n# Get symbols from SeaTable base and update the current stock prices\ndef update_stock_price():\n    for row in base.list_rows(TABLE_WITH_STOCK_SYMBOLS):\n        # 2. Fetches the current stock price from Twelve Data API\n        current_price = get_stock_price(row['Symbol'])\n        # 3. Update the stock price in the table\n        base.update_row(TABLE_WITH_STOCK_SYMBOLS, row.get('_id'), {COLUMN_WITH_STOCK_PRICE: current_price})\n        # 4. Display the fetched value in the console\n        print(f\"The current price of {row['Symbol']} is: {current_price}\")\n\nif __name__ == '__main__':\n    base = Base(API_TOKEN, SERVER_URL)\n    base.auth()\n    update_stock_price()\n    print(\"Update complete.\")\n</code></pre>"},{"location":"scripts/python/objects/","title":"Predefined objects and methods (Python)","text":"<p>This manual list all available objects and methods (also called functions) that are available within Python scripts in SeaTable. When running directly in SeaTable, Python scripts have the ability to access the base context. Date utilities are also available.</p> <p>If you compare JavaScript and Python, you will notice that Python has no specific output methods. This is not necessary, because the output is either written into the base or directly returned by the methods. Besides, you'll see that Python methods never accepts objects for table, view or row selection arguments, but only their names/<code>_ids</code> as strings.  Unless otherwise stated, all method arguments are required.</p>"},{"location":"scripts/python/objects/#data-model","title":"Data model","text":"<p>As a developer you typically interact with a single base. In SeaTable, a base can contain multiple tables, each one containing multiple rows and columns (or fields) and eventually multiple views used to filter, sort and/or group these rows and columns. The logic is like this:</p> <pre><code>SeaTable Base\n\u251c\u2500 Table 1 (Column A | Column B | Column C)\n\u2502  \u2514\u2500 View A (Column A | Column B | Column C)\n|     \u2514\u2500 Row 1\n|     \u2514\u2500 Row 2\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 ...\n\u2502  \u2514\u2500 View B (Column A | Column C)\n|     \u2514\u2500 Row 3\n|     \u2514\u2500 Row 4\n\u2514\u2500 Table 2\n|  \u2514\u2500 ...\n</code></pre> <p>Every objects and methods will help you interact with this architecture. For details about the different objects (tables, view, rows &amp; columns and links) you can look at the global structure presented in each object page or at the SeaTable API Reference for even more information.</p> <p>Need a specific function?</p> <p>The Python library <code>seatable_api</code> does not yet cover all available functions of the SeaTable API. If you are missing a special function, please contact us at support@seatable.io and we will try to add the missing functions.</p>"},{"location":"scripts/python/objects/#getting-started","title":"Getting started","text":"<p>Let's make this concrete and let us look at some basic examples.</p> <ol> <li>Jump to your SeaTable web interface</li> <li>Create a new Python script</li> <li>Copy the following code</li> <li>Run the script</li> </ol> <p>You will learn from these examples, that it is quite easy to read, output and even manipulate the data of a base inside SeaTable with the predefined objects and the corresponding methods.</p> 1. Add a table to a base2. Add a row to this new table <p>This examples shows how to add a table to an existing bases.</p> <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth() # (1)!\n\ncolumns=[\n  {\n    \"column_type\" : \"text\", \n    \"column_name\": \"name\"\n  }, \n  {\n  \"column_type\": \"number\",\n  \"column_name\": \"age\"\n  }\n]\n\nbase.add_table(\"ScriptTest\", lang='en', columns=columns)\n</code></pre> <ol> <li>These three lines are always required to authorize against the base in SeaTable.</li> </ol> <p>This examples shows how to add a a record to a table. The example script assumes that a table \"ScriptTest\" table with two columns \"name\" and \"age\" exists in the base.</p> <pre><code>from seatable_api import Base, context\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nrow_data = {\n  'name': 'Tom',\n  'age': 18\n  } \n\nbase.append_row('ScriptTest', row_data)\n</code></pre>"},{"location":"scripts/python/objects/accounts/","title":"Accounts","text":"<p>The account object provides an interface to list workspaces, add/copy/delete bases, and obtain access rights to a base.</p> <p>Specific authentication required</p> <p>Accessing the account object requires a specific authentication.</p> <pre><code>from seatable_api import Account # (1)!\nusername = 'xxx@email.com' # (2)!\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.io/'\naccount = Account(username, password, server_url)\naccount.auth()\n</code></pre> <ol> <li> <p>Don't forget to import <code>Account</code> from <code>seatable_api</code></p> </li> <li> <p>Always be vigilant when exposing your credentials in a script! Prefer as often as possible more secure solutions such as environment variables or .venv\\ files</p> </li> </ol>"},{"location":"scripts/python/objects/accounts/#manage-workspaces","title":"Manage workspaces","text":"<p>list_workspaces</p> <p>Get all your workspaces and its Bases.</p> <p><pre><code>account.list_workspaces()\n</code></pre> Output Dict with a single <code>workspace_list</code> key containing a list of every workspaces and for each a list of tables or shared tables of views</p> <p>Example</p> Function callOutput example <pre><code>import json\nfrom seatable_api import Account\nusername = 'xxx@email.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.io/'\naccount = Account(username, password, server_url)\naccount.auth()\nworkspaces = account.list_workspaces()\nprint(json.dumps(workspaces, indent='\u2003'))\n</code></pre> <pre><code>{\n    \"workspace_list\": [\n        {\n            \"id\": \"\",\n            \"name\": \"starred\", /* (1)! */\n            \"type\": \"starred\",\n            \"table_list\": []\n        },\n        {\n            \"id\": \"\",\n            \"name\": \"shared\",  /* (2)! */\n            \"type\": \"shared\",\n            \"shared_table_list\": [],\n            \"shared_view_list\": [\n                {\n                    \"id\": 1416,\n                    \"dtable_name\": \"MBase\",\n                    \"from_user\": \"b4980649.....b1311ab4ba2@auth.local\",\n                    \"to_user\": \"cc7a1d0fcec......df5dcf5b65b99@auth.local\",\n                    \"permission\": \"rw\",\n                    \"table_id\": \"ji9k\",\n                    \"view_id\": \"0000\",\n                    \"shared_name\": \"Shared MBase\",\n                    \"from_user_name\": \"Tony Stark\",\n                    \"to_user_name\": \"Hulk\",\n                    \"from_user_avatar\": \"\",\n                    \"workspace_id\": 34996,\n                    \"color\": null,\n                    \"text_color\": null,\n                    \"icon\": null,\n                    \"share_id\": 1416,\n                    \"share_type\": \"view-share\"\n                }\n            ],\n            \"share_folders\": []\n        },\n        {\n            \"id\": 84254,\n            \"name\": \"personal\",  /* (3)! */\n            \"type\": \"personal\",\n            \"table_list\": [\n                {\n                    \"id\": 198299,\n                    \"workspace_id\": 84254,\n                    \"uuid\": \"0959ee9c-6b....8c-a751-c798431ab3ad\",\n                    \"name\": \"AllColumnsBase\",\n                    \"created_at\": \"2025-09-04T12:39:08+02:00\",\n                    \"updated_at\": \"2025-09-25T11:31:48+02:00\",\n                    \"color\": null,\n                    \"text_color\": null,\n                    \"icon\": null,\n                    \"is_encrypted\": false,\n                    \"in_storage\": true,\n                    \"starred\": false\n                },\n                {\n                    \"id\": 200036,\n                    \"workspace_id\": 84254,\n                    \"uuid\": \"30fd2a69-07.....e-85ee-be3230a87ea2\",\n                    \"name\": \"Big Data\",\n                    \"created_at\": \"2025-09-11T12:11:58+02:00\",\n                    \"updated_at\": \"2025-09-23T11:09:09+02:00\",\n                    \"color\": null,\n                    \"text_color\": null,\n                    \"icon\": null,\n                    \"is_encrypted\": false,\n                    \"in_storage\": true,\n                    \"starred\": false\n                },\n                {\n                    \"id\": 202730,\n                    \"workspace_id\": 84254,\n                    \"uuid\": \"98e53b22-80....d5-92ca-c44d783d9561\",\n                    \"name\": \"Ledger\",\n                    \"created_at\": \"2025-09-23T15:19:30+02:00\",\n                    \"updated_at\": \"2025-09-23T17:06:48+02:00\",\n                    \"color\": \"#E91E63\",\n                    \"text_color\": null,\n                    \"icon\": \"icon-dollar\",\n                    \"is_encrypted\": false,\n                    \"in_storage\": true,\n                    \"starred\": false\n                },\n                {\n                    \"id\": 197691,\n                    \"workspace_id\": 84254,\n                    \"uuid\": \"4b5ef925-c178-4000-89e2-941aa65cc747\",\n                    \"name\": \"Test\",\n                    \"created_at\": \"2025-09-03T09:03:57+02:00\",\n                    \"updated_at\": \"2025-09-25T10:37:13+02:00\",\n                    \"color\": \"#656463\",\n                    \"text_color\": null,\n                    \"icon\": \"icon-research\",\n                    \"is_encrypted\": false,\n                    \"in_storage\": true,\n                    \"starred\": false\n                }\n            ],\n            \"folders\": []\n        },\n        {\n            \"id\": 86760,\n            \"name\": \"My group\",\n            \"type\": \"group\",\n            \"group_id\": 10339,\n            \"group_owner\": \"cc7a1d0fcec......df5dcf5b65b99@auth.local\",\n            \"is_admin\": true,\n            \"table_list\": [\n                {\n                    \"id\": 197108,\n                    \"workspace_id\": 86760,\n                    \"uuid\": \"eec7ff7b-638......4cb-315489bca05e\",\n                    \"name\": \"My grouped table\",\n                    \"created_at\": \"2025-09-01T11:44:49+02:00\",\n                    \"updated_at\": \"2025-09-01T11:44:49+02:00\",\n                    \"color\": null,\n                    \"text_color\": null,\n                    \"icon\": null,\n                    \"is_encrypted\": false,\n                    \"in_storage\": true,\n                    \"starred\": false\n                }\n            ],\n            \"group_shared_dtables\": [],\n            \"group_shared_views\": [],\n            \"folders\": []\n        }\n    ]\n}\n</code></pre> <ol> <li> <p>\"Favorites\" section</p> </li> <li> <p>\"Shared with me\" section</p> </li> <li> <p>\"My bases\" section</p> </li> </ol>"},{"location":"scripts/python/objects/accounts/#manage-bases","title":"Manage bases","text":"<p>get_base</p> <p>Get the base named <code>base_name</code> in the workspace whose id is <code>workspace_id</code>. You'll be able to interact with this base using all the <code>base</code> methods presented in this manual. Please note that the base is authorized.</p> <pre><code>account.get_base(workspace_id, base_name)\n</code></pre> <p>Output base object (throws an error if no workspace with id <code>workspace_id</code> or no base <code>base_name</code> exists, or if you encounter permission issue)</p> <p>Example</p> <pre><code>from seatable_api import Account\nusername = 'xxx@email.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.io/'\naccount = Account(username, password, server_url)\naccount.auth()\nbase = account.get_base(35, 'new-base')\nprint(base.get_metadata())\n</code></pre> <p>add_base</p> <p>Add a base named <code>base_name</code> to a Workspace. If no <code>workspace_id</code> is provided, the base will be created in the \"My bases\" section (workspace named \"personal\").</p> <pre><code>account.add_base(base_name, workspace_id=None)\n</code></pre> <p>Output Dict containing the same base metadata as members of the <code>table_list</code> of the workspace metadata (throws an error if no workspace with id <code>workspace_id</code> exists or if a base named <code>base_name</code> already exists in the workspace)</p> <p>Example</p> <pre><code>from seatable_api import Account\nusername = 'xxx@email.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.io/'\naccount = Account(username, password, server_url)\naccount.auth()\nbase_metadata = account.add_base('My New Base', 35)\nprint(base_metadata)\n</code></pre> <p>copy_base</p> <p>Copy the base base_name from the workspace whose id is <code>src_workspace_id</code> to the workspace whose id is <code>dst_workspace_id</code>.</p> <pre><code>account.copy_base(src_workspace_id, base_name, dst_workspace_id)\n</code></pre> <p>Output Dict containing the same base metadata as members of the <code>table_list</code> of the workspace metadata (throws an error if no workspace with id <code>workspace_id</code> exists or if a base named <code>base_name</code> already exists in the workspace) for the newly created base</p> <p>Example</p> <pre><code>from seatable_api import Account\nusername = 'xxx@email.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.io/'\naccount = Account(username, password, server_url)\naccount.auth()\nbase_metadata = account.copy_base(35, 'My Base', 74)\nprint(base_metadata)\n</code></pre>"},{"location":"scripts/python/objects/big_data/","title":"Big data storage","text":""},{"location":"scripts/python/objects/big_data/#insert-rows-into-big-data-storage","title":"Insert rows into big data storage","text":"<p>big_data_insert_rows</p> <p>Batch insert rows into big data storage.</p> <pre><code>base.big_data_insert_rows(table_name, rows_data)\n</code></pre> <p>Output Dict containing a single <code>inserted_row_count</code> key with the number of rows actually inserted in the big data storage.</p> <p>Example</p> <pre><code>rows = [\n        {'Name': \"A\"},\n        {'Name': \"B\"}\n    ]\nbase.big_data_insert_rows('Table1', rows_data=rows)\n</code></pre>"},{"location":"scripts/python/objects/columns/","title":"Columns","text":"<p>You'll find below all the available methods to interact with the columns of a SeaTable table.</p>"},{"location":"scripts/python/objects/columns/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a column object:</p> <pre><code>{\n    \"key\":\"bjcM\",\n    \"type\":\"number\",\n    \"name\":\"Val\",\n    \"editable\":true,\n    \"width\":200,\n    \"resizable\":true,\n    \"draggable\":true,\n    \"data\": // (1)!\n        {\n            \"format\":\"number\",\n            \"precision\":2,\n            \"enable_precision\":false,\n            \"enable_fill_default_value\":false,\n            \"enable_check_format\":false,\n            \"decimal\":\"comma\",\n            \"thousands\":\"no\",\n            \"format_min_value\":0,\n            \"format_max_value\":1000\n        },\n    \"permission_type\":\"\",\n    \"permitted_users\":[],\n    \"permitted_group\":[],\n    \"edit_metadata_permission_type\":\"\",\n    \"edit_metadata_permitted_users\":[],\n    \"edit_metadata_permitted_group\":[],\n    \"description\":null,\n    \"colorbys\":{},\n    \"editor\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        },\n    \"formatter\":\n        {\n            \"key\":null,\n            \"ref\":null,\n            \"props\":{},\n            \"_owner\":null\n        }\n}\n</code></pre> <ol> <li>See below for a presentation of <code>data</code> object keys depending on the column <code>type</code></li> </ol> <p>Columns particularities</p> <ul> <li>Unless other elements, columns don't have an <code>_id</code>, but a <code>key</code></li> <li>Link-type columns also have a link id that should not be mistaken with the column <code>key</code>. This value is present in the <code>data</code> object (see below)</li> </ul>"},{"location":"scripts/python/objects/columns/#column-data","title":"Column data","text":"<p>The <code>data</code> object keys will depend on the column <code>type</code> and will allow you to define the specific column parameters. Here is a list of the different <code>data</code> keys depending on the column <code>type</code>:</p> <p><code>text</code>, <code>email</code>, <code>long-text</code>, <code>image</code>, <code>file</code>, <code>url</code>, <code>creator</code>, <code>ctime</code>, <code>last-modifier</code>, <code>mtime</code></p> <p>empty</p> <code>link</code> <pre><code>{\n    \"display_column_key\":\"qqXZ\",\n    \"table_id\":\"0000\",\n    \"other_table_id\":\"XE5U\",\n    \"is_internal_link\":true,\n    \"is_multiple\":true,\n    \"only_adding_new_record\":false,\n    \"is_row_from_view\":false,\n    \"other_view_id\":\"\",\n    \"link_id\":\"OSD1\",\n    \"array_type\":\"text\",\n    \"array_data\":null,\n    \"result_type\":\"array\"\n}\n</code></pre> <code>number</code> <pre><code>{\n    \"format\":\"custom_currency\",\n    \"precision\":2,\n    \"enable_precision\":true,\n    \"enable_fill_default_value\":false,\n    \"decimal\":\"comma\",\n    \"thousands\":\"no\",\n    \"currency_symbol_position\":\"after\",\n    \"currency_symbol\":\"p\"\n}\n</code></pre> <code>date</code> <pre><code>{\n    \"format\":\"M/D/YYYY HH:mm\"\n}\n</code></pre> <code>duration</code> <pre><code>{\n    \"format\":\"duration\",\n    \"duration_format\":\"h:mm\"\n}\n</code></pre> <code>single select, multiple select</code> <pre><code>{\n    \"options\":\n        [\n            {\n                \"name\":\"Male\",\n                \"id\":\"783482\",\n                \"color\":\"#46A1FD\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#3C8FE4\"\n            },\n            {\n                \"name\":\"Female\",\n                \"id\":\"330935\",\n                \"color\":\"#DC82D2\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#D166C5\"\n            },\n            {\n                \"name\":\"Non-binary\",\n                \"id\":\"147140\",\n                \"color\":\"#ADDF84\",\n                \"textColor\":\"#FFFFFF\",\n                \"borderColor\":\"#9CCF72\"\n            }\n        ],\n        \"cascade_column_key\":\"Qvkt\",\n        \"cascade_settings\":\n            {\n                \"147140\":[\"783482\"],\n                \"330935\":[\"330935\"],\n                \"783482\":[\"783482\"]\n            }\n}\n</code></pre> <code>checkbox</code> <pre><code>{\n    \"default_value\":false,\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>rate</code> <pre><code>{\n    \"rate_max_number\":5,\n    \"rate_style_color\":\"#FF8000\",\n    \"default_value\":\"\",\n    \"enable_fill_default_value\":false\n}\n</code></pre> <code>formula</code> <pre><code>{\n    \"formula\":\"left({Email},search(\\\"@\\\",{Email},1)-1)\",\n    \"operated_columns\":[\"JfP2\"],\n    \"result_type\":\"string\",\n    \"enable_precision\":true,\n    \"precision\":1,\n    \"thousands\":\"no\"\n}\n</code></pre> <code>link-formula</code> <pre><code>{\n    \"formula\":\"findmax\",\n    \"result_type\":\"array\",\n    \"operated_columns\":[\"TaXD\"],\n    \"conditions\":[],\n    \"link_column_key\":\"TaXD\",\n    \"include_condition\":false,\n    \"condition_conjunction\":\"And\",\n    \"column_key_in_linked_record\":\"0000\",\n    \"column_key_for_comparison\":\"RSjx\",\n    \"level2_linked_table_column_key\":null,\n    \"array_type\":\"auto-number\",\n    \"array_data\":null\n}\n</code></pre> <code>geolocation</code> <pre><code>{\n    \"geo_format\":\"lng_lat\"\n}\n</code></pre> <code>auto-number</code> <pre><code>{\n    \"format\":\"YYYYMMDD-00\",\n    \"max_used_auto_number\":33,\n    \"digits\":2,\n    \"prefix_type\":\"date\",\n    \"prefix\":\"20250909\"\n}\n</code></pre> <code>button</code> <pre><code>{\n    \"button_type\":\"copy_row_to_another_table\",\n    \"button_name\":\"Copy to Table2\",\n    \"button_color\":\"#FFFCB5\",\n    \"table_id\":\"0000\"\n}\n</code></pre> <p>Accessing a particular data object value</p> <p>This rather long list is not exhaustive, however. If you need to access a specific <code>data</code> value, consult the SeaTable API Reference or create the corresponding column to display the content of its <code>data</code> object.</p>"},{"location":"scripts/python/objects/columns/#columntypes-constants","title":"ColumnTypes constants","text":"<p>ColumnTypes</p> <p>When you want to insert/add a column or change a column type, you will need to use these <code>ColumnTypes</code>.</p> <pre><code>from seatable_api.constants import ColumnTypes # (1)!\n\nColumnTypes.NUMBER              # number\nColumnTypes.TEXT                # text\nColumnTypes.LONG_TEXT           # long text\nColumnTypes.CHECKBOX            # checkbox\nColumnTypes.DATE                # date &amp; time\nColumnTypes.SINGLE_SELECT       # single select\nColumnTypes.MULTIPLE_SELECT     # multiple select\nColumnTypes.IMAGE               # image\nColumnTypes.FILE                # file\nColumnTypes.COLLABORATOR        # collaborator\nColumnTypes.LINK                # link to other records\nColumnTypes.FORMULA             # formula\nColumnTypes.CREATOR             # creator\nColumnTypes.CTIME               # create time\nColumnTypes.LAST_MODIFIER       # last modifier\nColumnTypes.MTIME               # modify time\nColumnTypes.GEOLOCATION         # geolocation\nColumnTypes.AUTO_NUMBER         # auto munber\nColumnTypes.URL                 # URL\n</code></pre> <ol> <li>Don't forget this particular import to use <code>ColumnTypes</code>!</li> </ol>"},{"location":"scripts/python/objects/columns/#get-columns","title":"Get Column(s)","text":"<p>get_column_by_name</p> <p>Get the column of the table <code>table_name</code>, given the column name <code>column_name</code>.</p> <pre><code>base.get_column_by_name(table_name, column_name)\n</code></pre> <p>Output Single column dict (<code>None</code> if no column named <code>column_name</code> exists, throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ncolumn = base.get_column_by_name('Table1', 'Name')\nprint(column)\n</code></pre> <p>list_columns</p> <p>Get the columns of a table (specified by its name <code>table_name</code>), optionally from a specific view (specified by its name <code>view_name</code>).</p> <pre><code>base.list_columns(table_name, view_name=None)\n</code></pre> <p>Output List of column dicts (throws an error if no table named <code>table_name</code> exists or if no view named <code>view_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ncolumns = base.list_columns('Table1', 'Default View')\nprint(columns)\n</code></pre> <p>get_columns_by_type</p> <p>Get all the columns of a specific <code>column_type</code> in the table <code>table_name</code>. See the ColumnTypes constants above or the API Reference for more information about supported column types.</p> <pre><code>base.get_columns_by_type(table_name, column_type)\n</code></pre> <p>Output List of column dicts (eventually empty; throws an error if no table named <code>table_name</code> exists or if <code>column_type</code> is not a valid <code>ColumnTypes</code> member)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\nfrom seatable_api.constants import ColumnTypes\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ncolumns = base.get_columns_by_type('Table1', ColumnTypes.TEXT)\nprint(columns)\n</code></pre>"},{"location":"scripts/python/objects/columns/#insert-column","title":"Insert column","text":"<p>insert_column</p> <p>Insert (inside the table) or append (at the end of the table) a column named <code>column_name</code> to the table <code>table_name</code>.</p> <pre><code>base.insert_column(table_name, column_name, column_type, column_key=None, column_data=None) # (1)!\n</code></pre> <ol> <li> <p><code>column_type</code>: See the ColumnTypes constants above or the API Reference for more information about supported column types</p> <p><code>column_key</code> (optional): argument specifying the key of the anchor column for the insertion (the newly created column will appear just to the right of the anchor column)</p> <p><code>column_data</code> (optional): For some particular <code>ColumnTypes</code>, specific column data may be provided in the <code>column_data</code> dict. See the column data above for more information.</p> </li> </ol> <p>Output Single column dict (throws an error if no table named <code>table_name</code> exists, if a column named <code>column_name</code> already exists or if <code>column_type</code> is not a valid <code>ColumnTypes</code> member)</p> <p>Example</p> <pre><code>from seatable_api.constants import ColumnTypes\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.insert_column('Table1', 'New long text column', ColumnTypes.LONG_TEXT)\n</code></pre> <pre><code>from seatable_api.constants import ColumnTypes\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.insert_column('Table1', 'Link', ColumnTypes.LINK, column_data={\n    'table':'Table1',\n    'other_table':'Test_User'\n})\n</code></pre>"},{"location":"scripts/python/objects/columns/#rename-column","title":"Rename column","text":"<p>rename_column</p> <p>Rename the column in the table <code>table_name</code> whose key is <code>column_key</code>  with the new name <code>new_column_name</code>. Please ensure that you choose a <code>new_column_name</code> that doesn't already exists in your table <code>table_name</code>.</p> <pre><code>base.rename_column(table_name, column_key, new_column_name)\n</code></pre> <p>Output Single column dict (throws an error if no table named <code>table_name</code> exists or if no column with the key <code>column_key</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.rename_column('Table1', '0000', 'new column name') # (1)!\n</code></pre> <ol> <li><code>0000</code> is always the key of the first column in each table</li> </ol> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ncolumn_to_rename = base.get_column_by_name('Table1', 'My Column')\nbase.rename_column('Table1', column_to_rename['key'], 'new column name') # (1)!\n</code></pre> <ol> <li>Accessing the <code>key</code> value of a column you just retrieved (for example with <code>base.get_column_by_name</code>), you don't have to explicitly know its <code>column_key</code></li> </ol>"},{"location":"scripts/python/objects/columns/#unfreeze-column","title":"(Un)freeze column","text":"<p>(Un)freeze_column</p> <p>Freeze (fix) or unfreeze the column of table <code>table_name</code> whose key is <code>column_key</code>. </p> <p>(Un)freezing a group of columns</p> <p>Please note that this method acts on a single column: to freeze the n-first left columns, please run it for each column!</p> <pre><code>base.freeze_column(table_name, column_key, frozen) # (1)!\n</code></pre> <ol> <li> <p><code>column_key</code>: the key of the column you want to (un)freeze</p> <p><code>frozen</code>: <code>True</code> to freeze, <code>False</code> to unfreeze</p> </li> </ol> <p>Output Single column dict (throws an error if no table named <code>table_name</code> exists or if no column with the key <code>column_key</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.freeze_column('Table1', '0000', True)\n</code></pre>"},{"location":"scripts/python/objects/columns/#move-column","title":"Move column","text":"<p>move_column</p> <p>Move the column of table <code>table_name</code> whose key is <code>column_key</code>.</p> <pre><code>base.move_column(table_name, column_key, target_column_key) # (1)!\n</code></pre> <ol> <li> <p><code>column_key</code>: the key of the column you want to move</p> <p><code>target_column_key</code>: the key of the anchor column for the move (the column whose key is <code>column_key</code> will be moved just to the right of the anchor column)</p> </li> </ol> <p>Output Single column dict (throws an error if no table named <code>table_name</code> exists or if no column with the key <code>column_key</code> or <code>target_column_key</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.move_column('Table1', 'loPx', '0000') # (1)!\n</code></pre> <ol> <li>In this example, the column with the key <code>loPx</code> will be moved to the right of the column <code>0000</code></li> </ol>"},{"location":"scripts/python/objects/columns/#modify-column-type","title":"Modify column type","text":"<p>modify_column_type</p> <p>Change the column type of an existing column of table <code>table_name</code> whose key is <code>column_key</code>.</p> <p>Don't change column type to ColumnTypes.LINK</p> <p>This method doesn't allow to pass column data for the moment. Trying to change the column type to <code>ColumnTypes.LINK</code> will then lead to a \"broken\" column (you won't be able to edit the column's settings) as column data is mandatory for link-type columns.</p> <pre><code>base.modify_column_type(table_name, column_key, new_column_type) # (1)!\n</code></pre> <ol> <li> <p><code>column_key</code> (optional): the key of the column you want to modify the type</p> <p><code>new_column_type</code>: See the ColumnTypes constants above or the API Reference for more information about supported column types</p> </li> </ol> <p>Output Single column dict (throws an error if no table named <code>table_name</code> exists, if no column with the key <code>column_key</code> exists or if <code>new_column_type</code> is not a valid <code>ColumnTypes</code> member)</p> <p>Example</p> <pre><code>from seatable_api.constants import ColumnTypes\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.modify_column_type('Table1', 'nePI', ColumnTypes.CHECKBOX)\n</code></pre>"},{"location":"scripts/python/objects/columns/#delete-column","title":"Delete column","text":"<p>delete_column</p> <p>Delete the column whose key is <code>column_key</code> in the table <code>table_name</code>. You cannot delete the first column as explained here.</p> <pre><code>base.delete_column(table_name, column_key)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists, if no column with the key <code>column_key</code> exists or if you try to delete the first column)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.delete_column('Table1', 'bsKL')\n</code></pre>"},{"location":"scripts/python/objects/columns/#single-andor-multiple-select-columns-specific-methods","title":"Single- and/or multiple-select columns specific methods","text":""},{"location":"scripts/python/objects/columns/#add-column-options","title":"Add column options","text":"<p>add_column_options</p> <p>Used by both \"single select\" or \"multiple select\"-type columns to add new options to the column <code>column_name</code> of the table <code>table_name</code>.</p> <pre><code>base.add_column_options(table_name, column_name, options) # (1)!\n</code></pre> <ol> <li> <p><code>options</code>: list of option dict containing the following keys:</p> <ul> <li> <p><code>name</code>: displayed text of the option</p> </li> <li> <p><code>color</code>: background color of the option (hex code)</p> </li> <li> <p><code>textColor</code>: text color of the option (hex code)</p> </li> </ul> </li> </ol> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists, if no column named <code>column_name</code> exists or if <code>options</code> is invalid)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.add_column_options('Table1', 'My choices', [\n    {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n    {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n    {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre>"},{"location":"scripts/python/objects/columns/#add-column-cascade-settings","title":"Add column cascade settings","text":"<p>add_column_cascade_settings</p> <p>Used by \"single select\"-type column, to condition the available options (see cascading in the user manual or in the API Reference) of a child column <code>child_column</code> based on the options of a parent column <code>parent_column</code>.</p> <pre><code>base.add_column_cascade_settings(table_name, child_column, parent_column, cascade_settings) # (1)!\n</code></pre> <ol> <li> <p><code>child_column</code>: name of the column you want to condition the available options for</p> <p><code>parent_column</code>: name of the parent column whose options will be used to condition the available options of the child column</p> <p><code>cascade_settings</code>: cascade dict using the following structure:</p> <ul> <li> <p>each key is the <code>name</code> of an option from the parent column</p> </li> <li> <p>each corresponding value is a list of the names of every allowed options from the child column</p> </li> </ul> </li> </ol> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists, if no column named <code>child_column</code> or <code>parent_column</code> exists or if <code>cascade_settings</code> is invalid)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.add_column_cascade_settings(\"Table1\", \"Child\", \"Parent\", {\n    \"aaa\": [\"aaa-1\", \"aaa-2\"], # (1)!\n    \"bbb\": [\"bbb-1\", \"bbb-2\"],\n    \"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre> <ol> <li>If <code>aaa</code> is selected in the parent column, the available options for the child column will be <code>aaa-1</code> and <code>aaa-2</code></li> </ol>"},{"location":"scripts/python/objects/communication-utils/","title":"Communication utility functions","text":"<p>Several outgoing communications features are available within SeaTable. Wether you want to communicate with a user in the web interface or or be alerted of database changes from another process, here are the methods you can use while scripting.</p> <p>Going further</p> <p>Keep in mind that communication methods will probably require other coding skills as they mostly make sense outside of SeaTable. The API Reference also details other methods such as getting base or row activities logs, which might also help you stay informed about what's happening in the base (but without the automatic firing on the SeaTable side of the methods presented here).</p>"},{"location":"scripts/python/objects/communication-utils/#toast-notifications","title":"Toast notifications","text":"<p>send_toast_notification</p> <p>Show a toast notification in SeaTable's web interface to a user. The username you have to provide is a unique identifier ending by <code>@auth.local</code>. This is neither the email address of the user nor its name. The content of <code>msg</code> is plain text.</p> <pre><code>base.send_toast_notification(username, msg, toast_type='success') # (1)!\n</code></pre> <ol> <li><code>toast_type</code> can be one of <code>success</code>, <code>warning</code> or <code>danger</code></li> </ol> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.send_toast_notification(\n\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\",\n\"error request\",\n\"danger\"\n)\n</code></pre> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n# Time to cheer up yourself!\nmy_username = context.current_username\nbase.send_toast_notification(\n    my_username,\n    \"You're doing great!\",\n    \"success\"\n)\n</code></pre>"},{"location":"scripts/python/objects/communication-utils/#websockets","title":"Websockets","text":"<p>socketIO</p> <p>By using websocket, you can get realtime data update notifications of a base.</p> <p>websocket-client library recommended</p> <p>You might encounter the warning <code>websocket-client package not installed, only polling transport is available</code> when you run the script below. The library is not required as you'll get the update infos anyway (using polling transport), but installing the websocket-client library will allow you to benefit from a real websocket transport.</p> <pre><code>from seatable_api import Base\n\nserver_url = 'https://cloud.seatable.io'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True) # (1)!\n\nbase.socketIO.wait()\n</code></pre> <ol> <li>Note that using websocket needs to specify the argument <code>with_socket_io=True</code> as compared to usual authentication</li> </ol> <p>When the base data is updated, the following will be output in the terminal.</p> <pre><code>2022-07-19 11:48:37.803956 [ SeaTable SocketIO connection established ]\n2022-07-19 11:48:39.953150 [ SeaTable SocketIO on UPDATE_DTABLE ]\n{\"op_type\":\"insert_row\",\"table_id\":\"0000\",\"row_id\":\"YFK9bD1XReSuQ7WP1YYjMA\",\"row_insert_position\":\"insert_below\",\"row_data\":{\"_id\":\"RngJuRa0SMGXyiA-SHDiAw\",\"_participants\":[],\"_creator\":\"seatable@seatable.com\",\"_ctime\":\"\",\"_last_modifier\":\"seatable@seatable.com\",\"_mtime\":\"\"},\"links_data\":{}}\n</code></pre> <p>After getting data update notifications, perform self-defined actions by listen to a specific event. Available events are <code>UPDATE_DTABLE</code> (database update) or <code>NEW_NOTIFICATION</code> (new notification received). Please note that we are here talking about SeaTable system's notifications (see the User manual and not about the toast notifications fired by the <code>base.send_toast_notification</code> method).</p> <pre><code>import json\nfrom seatable_api import Base\nfrom seatable_api.constants import UPDATE_DTABLE # (1)!\n\nserver_url = 'https://cloud.seatable.io'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\ndef on_update(data, index, *args):\n    try:\n        operation = json.loads(data)\n        print(operation)\n        op_type = operation['op_type']\n        table_id = operation['table_id']\n        row_id = operation['row_id']\n        # ... do something\n    except Exception as e:\n        print(e)\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\nbase.socketIO.on(UPDATE_DTABLE, on_update) # (2)!\nbase.socketIO.wait()\n</code></pre> <ol> <li> <p>Note that you'll have to import the corresponding event (<code>UPDATE_DTABLE</code> or <code>NEW_NOTIFICATION</code>)</p> </li> <li> <p>First argument is the event triggering the system, second argument is the event handler (the name of the function that will be run when a new event happens)</p> </li> </ol>"},{"location":"scripts/python/objects/communication-utils/#webhooks","title":"Webhooks","text":"<p>Another communication feature offered by SeaTable is Webhooks. Webhooks are covered in the User manual for global understanding and in the API Reference for webhook handlings functions. </p> <p>As SeaTable usually sends a webhook for every change, this might not be fully adapted if you need to track only a few changes. If you want to track only few operations (to trigger a workflow automation process for example), you can create automation rules to send, via a Python script, a <code>POST</code> request to an incoming webhook, passing, for example, a string to identify the action and the id of the triggering row.</p> <p>Enterprise subscription needed</p> <p>Automations are available only with an Enterprise subscription.</p> <p>Example</p> <p>In this example, we can imagine setting up a simple automation rule triggered by a record update in a specific column that should trigger an automation process through a webhook. This automation will have a single \"Run Python script\" action launching the following script.</p> <pre><code>import requests\nfrom seatable_api import context\n\nurl = 'https://mywebhookurl.com'\ndata = {'action': 'transfer', '_id': context.current_row['_id']} # (1)!\ntry:\n    response = requests.post(url, json = data)\n    if response.status_code != 200:\n        print('Failed request, status code: ', response.status_code)\n        exit(1)\nexcept Exception as e:\n    print(e)\n    exit(1)\nprint(response.text) # (2)!\n</code></pre> <ol> <li> <p>You can actually pass whatever data you want in the <code>data</code> object. Here, there are two keys:</p> <ul> <li><code>action</code>: a string parameter allowing to switch processes depending on this parameter to allow one single entry point for several scenarios</li> <li><code>_id</code>: we pass the id of the triggering row to be able to use it on the webhook receiver side</li> </ul> </li> <li> <p>Allows you to check if your request was successful or not</p> </li> </ol>"},{"location":"scripts/python/objects/context/","title":"Context","text":"<p>When the script is running in the cloud, the context object provides a context environment. Here's how to use it.</p> <p>Function import required</p> <p>To use these functions, the context module must be imported.</p> <pre><code>from seatable_api import context\n</code></pre>"},{"location":"scripts/python/objects/context/#server_url","title":"server_url","text":"<p>server_url</p> <p>Server URL, used to initialize Base.</p> <pre><code>context.server_url\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.server_url)\n</code></pre>"},{"location":"scripts/python/objects/context/#api_token","title":"api_token","text":"<p>api_token</p> <p>API token for access a base.</p> <pre><code>context.api_token\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.api_token)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_table","title":"current_table","text":"<p>current_table</p> <p>The name of the table that the current user is viewing when the script is run.</p> <pre><code>context.current_table\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_table)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_row","title":"current_row","text":"<p>current_row</p> <p>The line which triggered the script run:</p> <ul> <li>the line where the cursor is currently located (if the script is run manually)</li> <li>the line from which the button to launch the script was clicked (if the script is run from a button-type column click)</li> <li>each line triggering the automation (if the script is run by an automation rule)</li> </ul> <pre><code>context.current_row\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_row)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_username","title":"current_username","text":"<p>current_username</p> <p>The system ID of the user who runs the script manually (it was previously called <code>current_user_id</code>). It is a unique identifier ending by <code>@auth.local</code>.</p> <pre><code>context.current_username\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_username)\n</code></pre>"},{"location":"scripts/python/objects/context/#current_id_in_org","title":"current_id_in_org","text":"<p>current_id_in_org</p> <p>The id of the user in the team, it can be set by the team admin via the web interface.</p> <pre><code>context.current_id_in_org\n</code></pre> <p>Example</p> <pre><code>from seatable_api import context\nprint(context.current_id_in_org)\n</code></pre>"},{"location":"scripts/python/objects/date-utils/","title":"Date utility functions","text":"<p>We provide a set of functions for the datetime (date and time) operations based on the datetime python library. These functions have the same behavior as the functions provided by the formula column of SeaTable.</p> <p>Function import required</p> <p>To use these functions, the dateutils module must be imported.</p> <pre><code>from seatable_api.date_utils import dateutils\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#introduction","title":"Introduction","text":""},{"location":"scripts/python/objects/date-utils/#date-and-time-formatting","title":"Date and time formatting","text":"<p>The ISO format is used in date methods, both for input and output, which means:</p> <ul> <li> <p><code>YYYY-MM-DD</code> (or <code>%Y-%m-%d</code> referring to the python datetime library format codes) for dates</p> </li> <li> <p><code>YYYY-MM-DD HH:mm:ss</code> (or <code>%Y-%m-%d %H:%M:%S</code>) for datetimes. Please note that the hour is (24-hour based)</p> </li> <li> <p>Datetimes format with timezone info requires a specific format: <code>YYYY-MM-DDTHH:mm:ss\u00b1hh:mm</code> with the letter <code>T</code> separating the date from the time and <code>\u00b1hh:mm</code> representing the offset to UTC (here <code>+08:00</code> for UTC+8)</p> </li> </ul> <p>Of course, methods outputs with this format can be reused as input for other <code>dateutils</code> methods requiring the same format. You'll find below an overview example. Every methods are detailed in the following of this section.</p> <p>Timezone</p> <p>If the input time string has a timezone info, it will be automatically converted to local time.</p>"},{"location":"scripts/python/objects/date-utils/#overview-example","title":"Overview example","text":"<p>In this example as in the following of this section, the comment at the end of each line shows the expected result (what you should update if you <code>print</code> the result of the current line)</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndt_now = dateutils.now()  # 2025-09-30 15:47:00\n# 1. date 10 days after dt_now\ndt_10_days = dateutils.dateadd(dt_now, 10) # 2025-10-10 15:47:00\n# 2. month 10 days after dt_now\ndt_month_10_days = dateutils.month(dt_10_days) # 10\n# 3. difference between 2 days\ndt_10_days_before = dateutils.dateadd(dt_now, -10)\ndate_df = dateutils.datediff(dt_10_days_before, dt_10_days, unit=\"D\") # 20\n# 4. handle the time string with time-zone info with local timezone of \"Asia/Shanghai\" (UTC+8)\ntime_str = \"2025-07-17T21:57:41+08:00\"\ntime_day = dateutils.day(time_str) # 17\ntime_month = dateutils.month(time_str) # 7\ntime_year = dateutils.year(time_str) # 2025\ntime_hour = dateutils.hour(time_str) # 15 (! if local timezone is UTC+2 !)\ntime_minute = dateutils.minute(time_str) # 57\ntime_date = dateutils.date(time_year, time_month, time_day) # 2025-07-17\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#dealing-with-date-and-time","title":"Dealing with date and time","text":""},{"location":"scripts/python/objects/date-utils/#date","title":"date","text":"<p>date</p> <p>Return the ISO formatted date string.</p> <pre><code>dateutils.date(year, month, day)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ncustom_date = dateutils.date(2025, 9, 16)\nprint(custom_date) # 2025-09-16\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#dateadd","title":"dateadd","text":"<p>dateadd</p> <p>Add a <code>number</code> of a specified <code>interval</code> to a datetime <code>datetime_str</code>. <code>interval</code> can represent the following units: <code>years</code>, <code>months</code>, <code>weeks</code>, <code>days</code>, <code>hours</code>, <code>minutes</code> and <code>seconds</code> (default is <code>days</code>). Negative values \u200b\u200bcan be used to subtract from <code>datetime_str</code>.</p> <pre><code>dateutils.dateadd(datetime_str, number, interval)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndate_str = \"2025-9-15\"\ndatetime_str = \"2025-9-15 15:23:21\"\n\ndateutils.dateadd(date_str, -2, 'years') # 2023-09-15\ndateutils.dateadd(date_str, 3, 'months') # 2025-12-15\ndateutils.dateadd(datetime_str, 44, 'minutes') # 2025-09-15 16:07:21\ndateutils.dateadd(datetime_str, 1000, 'days') # 2028-06-11 15:23:21\ndateutils.dateadd(datetime_str, 3, 'weeks') # 2025-10-06 15:23:21\ndateutils.dateadd(datetime_str, -3, 'hours') # 2025-09-15 12:23:21\ndateutils.dateadd(datetime_str, 3, 'seconds') # 2025-09-15 15:23:24\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#datediff","title":"datediff","text":"<p>datediff</p> <p>Compute the time between two datetimes in one of the following units:<code>S</code>, <code>Y</code>, <code>D</code>, <code>H</code>, <code>M</code>, <code>YM</code>, <code>MD</code>, <code>YD</code>. The result can be negative if <code>end_date</code> is before <code>start_date</code>.</p> <p>For date units (<code>Y</code>,<code>M</code> and <code>D</code>), unit might include two characters:</p> <ul> <li><code>YM</code>: The difference between the months in <code>start_date</code> and <code>end_date</code>. The days and years of the dates are ignored.</li> <li><code>MD</code>: The difference between the days in <code>start_date</code> and <code>end_date</code>. The months and years of the dates are ignored.</li> <li><code>YD</code>: The difference between the days of <code>start_date</code> and <code>end_date</code>. The years of the dates are ignored.</li> </ul> <pre><code>dateutils.datediff(start=start_date, end=end_date, unit=datetime_unit)\ndateutils.datediff(start_date, end_date, datetime_unit) # (1)!\n</code></pre> <ol> <li>Depending on your preferences, you can either specify the name of each parameter (longer but easier to reread) or not</li> </ol> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils as dt # (1)!\n\nstart_date = \"2025-5-16\"\nend_date = \"2026-5-15\"\n\ndt.datediff(start=start_date, end=end_date, unit='S') # 31449600 (seconds)\ndt.datediff(start=start_date, end=end_date, unit='Y') # 0 (years)\ndt.datediff(start=start_date, end=end_date, unit='D') # 364 (days)\ndt.datediff(start=start_date, end=end_date, unit='H') # 8736 (hours)\ndt.datediff(start=start_date, end=end_date, unit='M') # 12 (months) (from 2025-5 to 2026-5)\ndt.datediff(start=start_date, end=end_date, unit='YM') # 0 (months) (from May to May)\ndt.datediff(start=start_date, end=end_date, unit='MD') # -1 (days) (from 16 of 15)\ndt.datediff(\"2025-1-28\",\"2026-2-1\", unit='YD') # 4 (days) (from January 28 to February 1)\n</code></pre> <ol> <li>To make calls shorter or more explicit, feel free to use an alternative name using <code>as</code> keyword. Here, we use <code>dt</code> instead of the default <code>dateutils</code></li> </ol>"},{"location":"scripts/python/objects/date-utils/#day","title":"day","text":"<p>day</p> <p>Return the day of a given <code>date</code>.</p> <pre><code>dateutils.day(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.day('2025-6-15 14:23:21') # 15\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#days","title":"days","text":"<p>days</p> <p>Return the days difference between two given date. The result can be negative if <code>end</code> is before <code>start</code>.</p> <pre><code>dateutils.days(start, end)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.days('2024-6-1', '2025-5-15') # 348\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#eomonth","title":"eomonth","text":"<p>eomonth</p> <p>Return the ISO formatted last day of the <code>n</code>th month before or after given date (depending on the sign of <code>n</code>).</p> <pre><code>dateutils.eomonth(date, months=n)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndate = \"2025-7-4\"\ndateutils.eomonth(date, months=0) # 2025-07-31 (months=0 =&gt; current month) \ndateutils.eomonth(date, months=2) # 2025-09-30 (2 months after July =&gt; September)\ndateutils.eomonth(date, months=-5) # 2025-02-28 (5 months before July =&gt; February)\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#hour","title":"hour","text":"<p>hour</p> <p>Return the hour of a given <code>datetime</code>.</p> <pre><code>dateutils.hour(datetime)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.hour(\"2025-1-1 12:13:14\") # 12\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#hours","title":"hours","text":"<p>hours</p> <p>Return the hours difference between two given datetime. The result can be negative if <code>end</code> is before <code>start</code>.</p> <pre><code>dateutils.hours(start, end)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.hours(\"2019-6-3 20:01:12\", \"2020-5-3 13:13:13\") # 8009\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#minute","title":"minute","text":"<p>minute</p> <p>Return the minutes of a given <code>datetime</code>.</p> <pre><code>dateutils.minute(datetime)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.minute(\"2025-5-3 13:14:15\") # 13\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#month","title":"month","text":"<p>month</p> <p>Return the month of a given <code>date</code>. The month number starts at 1, like when writing a date.</p> <pre><code>dateutils.month(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.month(\"2025-5-4\") # 5\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isomonth","title":"isomonth","text":"<p>isomonth</p> <p>Return the ISO formatted (<code>YYYY-MM</code>) month of a given <code>date</code>.</p> <pre><code>dateutils.isomonth(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.isomonth(\"2025-1-2\") # 2025-01\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#months","title":"months","text":"<p>months</p> <p>Return the months difference between two given date. The result can be negative if <code>end</code> is before <code>start</code>. </p> <pre><code>dateutils.months(start, end)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.months(\"2024-5-1\",\"2025-5-4\") # 12\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#now","title":"now","text":"<p>now</p> <p>Return the ISO formatted current date and time,accurate to seconds.</p> <pre><code>dateutils.now()\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\nnow = dateutils.now()\nprint(now) # 2025-09-30 12:56:41\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#second","title":"second","text":"<p>second</p> <p>Return the seconds of given datetime.</p> <pre><code>dateutils.second(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.second(\"2025-5-3 13:13:33\") # 33\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#today","title":"today","text":"<p>today</p> <p>Return the ISO formatted current date time in string</p> <pre><code>dateutils.today()\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ntoday = dateutils.today()\nprint(today) # 2025-09-30\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#weekday","title":"weekday","text":"<p>weekday</p> <p>Return the weekday of a <code>date</code>. The result (from 0 to 6) consider a week starting on Monday (returns 0) and ending on Sunday (returns 6).</p> <pre><code>dateutils.weekday(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.weekday(\"2025-6-2\") # 0 (June 2,2025 was a Monday)\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isoweekday","title":"isoweekday","text":"<p>isoweekday</p> <p>Return the weekday of a <code>date</code> from 1 to 7 and considering a week starting on Monday (based on ISO standard).</p> <pre><code>dateutils.isoweekday(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.isoweekday(\"2025-6-2\") # 1\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#weeknum","title":"weeknum","text":"<p>weeknum</p> <p>Return the week number of a given <code>date</code>, considering the week including January 1st as the first week.</p> <pre><code>dateutils.weeknum(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.weeknum('2027-1-2') # 1\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#isoweeknum","title":"isoweeknum","text":"<p>isoweeknum</p> <p>Return the week number of a given <code>date</code> based on ISO standard.</p> <pre><code>dateutils.isoweeknum(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.isoweeknum('2027-1-2') # 53\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#year","title":"year","text":"<p>year</p> <p>Return the year of a given <code>date</code>.</p> <pre><code>dateutils.year(date)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.year(\"2030-1-1\") # 2030\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#dealing-with-quarters","title":"Dealing with quarters","text":"<p>A specific DateQuarter object exists to deal with quarters. The operations/properties/methods available this object are presented below.</p>"},{"location":"scripts/python/objects/date-utils/#quarter_from_yq","title":"quarter_from_yq","text":"<p>quarter_from_yq</p> <p>Return a DateQuarter object, from a given <code>year</code> and <code>quarter</code> (1 to 4 for current year). if <code>quarter</code> is n less than 1 (or n greater than 4), the returned DateQuarter object will correspond to the year and quarter shifted by n quarters before the first quarter (or n quarters after the fourth quarter) of the <code>year</code>.</p> <pre><code>dateutils.quarter_from_yq(year, quarter)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.quarter_from_yq(2025, 3) # DateQuarter obj:&lt;DateQuarter-2025,3Q&gt;\ndateutils.quarter_from_yq(2025, 0) # DateQuarter obj:&lt;DateQuarter-2024,4Q&gt;\ndateutils.quarter_from_yq(2025, 6) # DateQuarter obj:&lt;DateQuarter-2026,2Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarter_from_ym","title":"quarter_from_ym","text":"<p>quarter_from_ym</p> <p>Return a DateQuarter object, for specified <code>year</code> and <code>month</code>.</p> <pre><code>dateutils.quarter_from_ym(year, month)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.quarter_from_ym(2025, 3) # DateQuarter obj:&lt;DateQuarter-2025,1Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#to_quarter","title":"to_quarter","text":"<p>to_quarter</p> <p>Return a DateQuarter object from an ISO formatted date or datetime string <code>datetime_str</code>.</p> <pre><code>dateutils.to_quarter(datetime_str)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\ndateutils.to_quarter(\"2025-07-17\") # DateQuarter obj: &lt;DateQuarter-2025,3Q&gt;\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#quarters_within","title":"quarters_within","text":"<p>quarters_within</p> <p>Return a generator which will generate the DateQuater objects between a <code>start</code> date and an <code>end</code> date. The last (not necessarily full) quarter isn't included by default. You can get it in the generator if you set param <code>include_last</code> to <code>True</code> (<code>False</code> by default).</p> <pre><code>dateutils.quarters_within(start, end, include_last=False)\n</code></pre> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\nqs1 = dateutils.quarters_within(\"2024-03-28\", \"2025-07-17\")\nprint(list(qs1)) # [&lt;DateQuarter-2024,1Q&gt;, &lt;DateQuarter-2024,2Q&gt;,...., &lt;DateQuarter-2025,2Q&gt;]\n\nqs2 = dateutils.quarters_within(\"2024-03-28\", \"2025-07-17\", include_last=True)\nprint(list(qs2)) # [&lt;DateQuarter-2024,1Q&gt;, &lt;DateQuarter-2024,2Q&gt;,...., &lt;DateQuarter-2025,2Q&gt;, &lt;DateQuarter-2025,3Q&gt;]\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#datequarter-properties-and-methods","title":"DateQuarter properties and methods","text":"<p>Some operations/properties/methods are available for DateQuarter objects.</p> <p>DateQuarter properties and methods</p> <ul> <li><code>year</code>: The year of the considered DateQuarter</li> <li><code>quarter</code>: The quarter of the considered DateQuarter (1 to 4)</li> <li><code>start_date</code>: The ISO formatted first day of the considered DateQuarter</li> <li><code>end_date</code>: The ISO formatted last day of the considered DateQuarter</li> <li><code>days()</code>: A generator, which will generate every dates (<code>datetime.date</code> objects) in the considered DateQuarter</li> </ul> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\nq = dateutils.quarter_from_yq(2025, 3)\n\nq.year # 2025\nq.quarter # 3\n\nq.start_date # 2025-07-01\nq.end_date # 2025-09-30\n\nq.days() \nlist(q.days()) # [datetime.date(2025, 7, 1), datetime.date(2025, 7, 2),....., datetime.date(2025, 9, 30)]\n</code></pre>"},{"location":"scripts/python/objects/date-utils/#datequarter-operations","title":"DateQuarter operations","text":"<p>DateQuarter operations</p> <p>Classical operators are available for DateQuarter objects:</p> <ul> <li>Arithmetic operators: <code>+</code> (adds a number of quarters to a DateQuarter object), <code>-</code> (returns the number of quarters between two quarters, or the quarter shifted by the number of quarters if used with a number)</li> <li>Comparison operators: <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>!=</code></li> <li>Membership operators: <code>in</code>, <code>not in</code></li> </ul> <p>Example</p> <pre><code>from seatable_api.date_utils import dateutils\n\nq = dateutils.quarter_from_yq(2026, 3)\n\nq + 10 # &lt;DateQuarter-2029,1Q&gt;\nq1 = dateutils.quarter_from_yq(2025, 1) # &lt;DateQuarter-2025,1Q&gt;\nq - q1 # 6\nq - 7  # &lt;DateQuarter-2024,4Q&gt;\nq &lt; q1 # False\n\"2026-28\" in q # False\n\"2026-8-28\" in q # True\n</code></pre>"},{"location":"scripts/python/objects/files/","title":"Files","text":""},{"location":"scripts/python/objects/files/#download","title":"Download","text":"<p>For the following methods, you'll have to provide the URL of the file you want to download. The file URL structure is as follows: </p> <pre><code>{server_url}/workspace/{workspace_id}/asset-preview/{base_uuid}/{file location}\n</code></pre> <ul> <li> <p><code>{server_url}</code> is the URL of your server, for example <code>https://cloud.seatable.io</code></p> </li> <li> <p>You can find the <code>workspace_id</code> by looking at any of your database URL which will look like <code>{server_url}/workspace/{workspace_id}/dtable/{base_name}</code>, or by checking the user manual</p> </li> <li> <p>You can find the base uuid in your Team administration (see the User manual, it's displayed as <code>ID</code> in the base right panel) or by looking for <code>dtableUuid</code> in the source code of the web page while consulting any of your bases</p> </li> <li> <p>The file location is what you can find in the file manager of your base and will always have the same structure:</p> <ul> <li>if uploaded automatically, the file will be in the system folder <code>files</code> (if uploaded in a file-type column, even if it's an image) and in the subdirectory <code>YYYY-MM</code> (year and month of the upload), for example <code>https://cloud.seatable.io/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/invoice.pdf</code> is the URL of a file called invoice.pdf and downloaded in October 2020 (<code>2020-10</code>) in the base whose uuid is <code>41cd05da-b29a-4428-bc31-bd66f4600817</code> in the workspace whose id is <code>74</code> on <code>https://cloud.seatable.io</code>. It will be the same for an image, but in the <code>images</code> system folder instead of the <code>files</code> folder (if uploaded in an image-type column only)</li> <li>if uploaded by yourself in a custom folder, the file will be in directory <code>custom</code> and in the eventual directory you created, for example: <code>https://cloud.seatable.io/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/custom/My Personal Folder/quote.pdf</code> is the URL of a file called quote.pdf that you stored in the folder <code>My Personal Folder</code> of the custom folders in the same database.</li> </ul> </li> </ul> <p>Get easily the file URL</p> <p>For files that need to open an external window to preview (almost all files except images), the URL of this new window will actually be the URL your looking for!</p> <p>Download (simple one-step method)</p> <p>Download a file to a local path. The save path as naturally to ends with the same extension as the original file.</p> <p><pre><code>base.download_file(file_url, save_path)\n</code></pre> Output Nothing (throws an error if the URL is invalid or if the save path is wrong)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nfile_url = \"https://cloud.seatable.io/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/invoice.pdf\"\nsave_path = \"/tmp/invoice.pdf\"\nbase.download_file(file_url, save_path)\n</code></pre> <p>Download every file from the File column of Table1 table, providing the id of the row.</p> <pre><code>from seatable_api import Base\n\nserver_url = 'https://cloud.seatable.io'\napi_token = '5e165f8b7af...98950b20b022083'\n\nbase = Base(api_token, server_url)\nbase.auth()\n\ntarget_row = base.get_row('Table1','Pd_pHLM8SgiEcnFW5I7HLA')\n\nsave_directory = './tmp/' # (1)!\n\nfiles = target_row['File']\nprint(f\"{len(files)} files to download\")\nfor file in files :\n    print(f\"Downloading {file['url']}\")\n    base.download_file(file['url'], save_directory + file['name']) # (2)!\n</code></pre> <ol> <li> <p>Ensure that your target directory exists! Directory beginning with <code>.</code> are relative to the current working directory</p> </li> <li> <p>The download URL is found in the <code>url</code> key of each element of the file-type column. The <code>name</code> key is used so every files will keep their original names (and you don't have to bother with extensions)</p> </li> </ol> <p>Download (detailed two-steps method)</p> <p>This detailed method is for handling complex situations, for example when the file is extremely large or the internet connection is slow. In this example, we assume that a file with URL <code>https://cloud.seatable.io/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/invoice.pdf</code> exists (a file called invoice.pdf and downloaded in October 2020 (<code>2020-10</code>) in the base whose uuid is <code>41cd05da-b29a-4428-bc31-bd66f4600817</code>, located in the workspace whose id is <code>74</code>).</p> <p>This method actually relies on two different steps: first getting the file public download link and then downloading it using a <code>GET</code> request.</p> <p>Compared to the file URL from the <code>base.download_file</code> method, the file path needed here is just the \"file location\" part of the URL corresponding to the location of the file in the base file system (starting with <code>/files/</code>, <code>/images/</code> or <code>/custom/</code>).</p> <p>Download link expires</p> <p>The download link is only valid for some hours. After that the download link must be created again. That's why it's not possible to use permanent download links of files hosted on SeaTable in web pages. For such purpose, we recommend to store the files on public hosting services and to save only the links in SeaTable, which will allow direct use.</p> <pre><code>base.get_file_download_link(file_path)\n</code></pre> <p>Output The public download link (looking like <code>{server_url}/seafhttp/files/{access_token}/{file_name}</code>). Keep in mind that it's not permanent as the token expires! (throws an error if the file path is wrong)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\nimport requests\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\ndownload_link = base.get_file_download_link('files/2020-10/invoice.pdf')\nresponse = requests.get(download_link)\nif response.status_code in range(200,300) : # (1)!\n    with open(\"invoice.pdf\", \"wb\") as f: # (2)!\n        f.write(response.content)\n</code></pre> <ol> <li> <p><code>2xx</code> response status codes correspond to a successful request</p> </li> <li> <p>Open the file with write permission and write the response content into it</p> </li> </ol> <p>Download file from a custom folder</p> <p>This method is specific for files stored in a custom folder. Compared to the file URL from the <code>base.download_file</code> method, the custom path needed here is just the part of the URL corresponding to the location of the file in the custom folders file system (part of the URL starting after <code>/custom/</code>). In the following example, we consider the file quote.pdf described in the <code>base.download_file</code> section uploaded in the custom folder <code>My Personal Folder</code> whose URL is <code>https://cloud.seatable.io/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/custom/My Personal Folder/quote.pdf</code>.</p> <pre><code>base.download_custom_file(custom_path, save_path)\n</code></pre> <p>Output Nothing (throws an error if the URL is invalid or if the save path is wrong)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ncustom_file_path = \"My Personal Folder/quote.pdf\" # (1) !\nlocal_path = \"/Users/Desktop/quote.pdf\"\nbase.download_custom_file(custom_file_path, local_path)\n</code></pre> <ol> <li>Unlike the <code>get_file_download_link</code> method, <code>custom_file_part</code> doesn't include <code>/custom/</code></li> </ol>"},{"location":"scripts/python/objects/files/#upload","title":"Upload","text":"<p>Please note that uploading a file to a cell will require two or three steps, depending on the method you use: you'll first need to upload the file to the base, and then you'll be able to update the row with the newly uploaded file details in the cell. You can learn more about this process in the API Reference. As for download, there are one simple (one-step) and one detailed (two-steps) process to upload a file: </p> <p>Upload (simple ones-step method)</p> <p>Upload a file from your local drive, memory or a website.</p> <pre><code>base.upload_local_file(file_path, name=None, file_type='file', replace=False) # (1)!\n# or\nbase.upload_bytes_file(name, content, file_type='file', replace=False) # (2)!\n</code></pre> <ol> <li> <ul> <li> <p><code>name</code>: the name of the file once uploaded. If <code>name</code> is not provided, the uploaded file will keep the same name than the original</p> </li> <li> <p><code>file_type</code>:  can be either <code>file</code> or <code>image</code> (default is <code>file</code>)</p> </li> <li><code>replace</code>: if set to <code>True</code>, uploading a new file with the same name as an existing one will overwrite it (default is <code>False</code>)</li> </ul> </li> <li> <p>When using <code>base.upload_bytes_file</code>, <code>name</code> is mandatory as their is no named attached to the <code>content</code></p> </li> </ol> <p>Output File dict containing the same keys as every element in a file-type column: <code>type</code> (<code>file</code> or <code>image</code>), <code>size</code>, <code>name</code> and <code>url</code></p> <p>Example: Upload a file from local hard drive</p> <pre><code>local_file = '/Users/Markus/Downloads/seatable-logo.png'\ninfo_dict = base.upload_local_file(local_file, name='seatable-logo.png', file_type='image', replace=True)\n</code></pre> <p>Example: Upload a file from memory</p> <pre><code>local_file = '/Users/Markus/Downloads/seatable-logo.png'\nwith open (local_file, 'rb') as f:\n  content = f.read()\ninfo_dict = base.upload_bytes_file = ('seatable-logo.png', content, file_type='image')\n</code></pre> <p>Example: Upload a file from a website</p> <pre><code>import requests\nfile_url = 'https://seatable.io/wp-content/uploads/2021/09/seatable-logo.png'\nresponse = requests.get(file_url)\nif response.status_code in range(200,300) :\n    info_dict = base.upload_bytes_file = ('seatable-logo.png', response.content)\n</code></pre> <p>Upload (detailed two-steps method)</p> <p>As for the download detailed method, this method actually relies on two different steps: first getting a file upload link and then uploading it using a <code>POST</code> request. </p> <pre><code>base.get_file_upload_link()\n</code></pre> <p>Output - <code>base.get_file_upload_link</code> outputs a dict containing <code>upload_link</code>, <code>parent_path</code>, <code>img_relative_path</code> and <code>file_relative_path</code> keys</p> <ul> <li>the <code>POST</code> request will return a <code>400</code> error <code>Parent dir doesn't exist.</code> if <code>parent_dir</code> is wrong or a <code>403</code> error <code>Access token not found.</code> if <code>upload_link</code> is wrong</li> </ul> <p>Example</p> <pre><code>import requests\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n# Get the upload link and file path allocated by server\nupload_link_dict = base.get_file_upload_link()\nupload_link = upload_link_dict['upload_link'] # (1)!\nparent_dir = upload_link_dict['parent_path'] # (2)!\nfile_relative_path = upload_link_dict['file_relative_path']\nimg_relative_path = upload_link_dict['img_relative_path']\n\n# Upload the file\nupload_file_name = \"file_uploaded.txt\"\nreplace = True\nresponse = requests.post(upload_link, data={\n    'parent_dir': parent_dir,\n    'replace': 1 if replace else 0  # (3)!\n}, files={\n    'file': (upload_file_name, open('/User/Desktop/file.txt', 'rb')),\n    'relative_path': file_relative_path # (4)!\n})\n</code></pre> <ol> <li> <p><code>upload_link</code> will look like <code>{server_url}/seafhttp/upload-api/{temporary_upload_token}</code></p> </li> <li> <p><code>parent_path</code> will look like <code>/asset/{base_uuid}</code>. Please note that the name of the corresponding parameter for the upload <code>POST</code> request is <code>parent_dir</code>!</p> </li> <li> <p><code>replace</code> requires <code>0</code> or <code>1</code>. You can use this syntax if you prefer to specify <code>True</code> or <code>False</code></p> </li> <li> <p>Choose either the file relative path or the image relative path depending on the type of column you want to upload your file to</p> </li> </ol> <p>Upload local file to a custom folder</p> <p>This method is specific for files to store in a custom folder. It is the counterpart of the <code>base.download_custom_file</code> method. Please note that using this method, existing files will not be replaced (a new <code>My file(2)</code> will be created if <code>My file</code> already exists).</p> <pre><code>base.upload_local_file_to_custom_folder(local_path, custom_folder_path=None, name=None) # (1)!\n</code></pre> <ol> <li> <ul> <li><code>custom_folder_path</code>: the path in the custom folders of the base where you want to upload the file</li> </ul> </li> <li><code>name</code>: the name of the file once uploaded. If <code>name</code> is not provided, the uploaded file will keep the same name than the original</li> </ol> <p>Output Single file dict containing <code>type</code>, <code>size</code>, <code>name</code> and <code>url</code> keys. This dict can be used to \"assign\" a file to a row.</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\n#Step 1: Uploading a file to the base\nlocal_path = \"/Users/Desktop/sky.png\"\ncustom_path = \"/Main/\"\ninfo_dict = base.upload_local_file_to_custom_folder(local_path, custom_path)\n\n#Step 2: Update a row with the uploaded file\nrow_id = \"xxxx\"\nFILE_COL_NAME = \"File\" # (1)!\nbase.update_row('Table1', row_id, {FILE_COL_NAME: [info_dict]})\n</code></pre> <ol> <li>Get in the habit of storing column and/or table names in variables, this will make your scripts much easier to update if names change</li> </ol>"},{"location":"scripts/python/objects/files/#list-files","title":"List files","text":"<p>List files</p> <p>List files in any folder of the custom folders file system (use <code>/</code> as path if you want to see the content of Custom folders). If you need to list the files present in a system (non-custom) folder, please refer to the API Reference.</p> <pre><code>base.list_custom_assets(path) # (1)!\n</code></pre> <ol> <li><code>path</code>: Absolute path of the directory you want to list the assets for (for example <code>/My Personal Folder/Photos</code> for a subdirectory <code>Photos</code> located in the directory <code>My Personal Folder</code>)</li> </ol> <p>Output A dict containing a <code>dir</code> and a <code>file</code> key, each containing a list of respectively directories and files present in the <code>path</code> you specified (throws an error if the path is not valid)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nfolder_dir = \"/Main/photos\"\nmain_photos_content = base.list_custom_assets(folder_dir)\nprint(main_photos_content)\n</code></pre> <p>Example: display the whole Custom folders file structure</p> <pre><code>from seatable_api import Base, context\n\ndef list_assets(path):\n    global indent\n    if path == \"/\" :\n        print(f\"\ud83d\udcc1 {path}\")\n    else :\n        print(f\"{indent}\u221f \ud83d\udcc1 {path.split('/')[-1]}\")\n    assets = base.list_custom_assets(path)\n    if assets:\n        indent += '\u2003'\n        for f in assets['file']:\n            print(f\"{indent}\u221f \ud83d\udcc4 {f['name']}\")\n        for d in assets['dir']: # (1)!\n            if path == '/' :\n                list_assets(path+d['name'])\n            else :\n                list_assets(path+'/'+d['name'])\n        indent = indent[:-1]\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nindent = ''\nlist_assets('/') # (2)!\n</code></pre> <ol> <li> <p>Recursive function: for each directory of the current directory, the functions calls itself</p> </li> <li> <p>The <code>list_assets</code> function we created starts at the root level (<code>/</code>)</p> </li> </ol>"},{"location":"scripts/python/objects/files/#get-file-info","title":"Get file info","text":"<p>Get file info</p> <p>This methods allows you to get the file dict of any <code>name</code> file in any folder (<code>path</code>) of the custom folders file system.</p> <pre><code>base.get_custom_file_info(path, name) # (1)!\n</code></pre> <ol> <li><code>path</code>: Absolute path of the directory you want to list the assets for (for example <code>/My Personal Folder/Photos</code> for a subdirectory <code>Photos</code> located in the directory <code>My Personal Folder</code>)</li> </ol> <p>Output Single file dict containing <code>type</code>, <code>size</code>, <code>name</code> and <code>url</code> keys (throws an error if <code>path</code> or <code>name</code> is not valid). This dict can be used to \"assign\" a file to a row.</p> <p>Example</p> Replace existing contentAppend to content (detailed version)Append to content (short version) <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n#Step 1: Get file info\nfolder_dir = \"/Main/\"\nfile_name = \"sky.png\"\nfile_dict = base.get_custom_file_info(folder_dir, file_name)\nprint(file_dict)\n#Step 2: Update row content with file info (overwriting current content)\nrow_id = \"fDMHEdraSRuUMNPGEj-4kQ\"\nFILE_COL_NAME = \"File\"\nbase.update_row(\"Table1\", row_id, {FILE_COL_NAME: [file_dict]})\n</code></pre> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n#Step 1: Get file info\nfolder_dir = \"/Main/\"\nfile_name = \"sky.png\"\nfile_dict = base.get_custom_file_info(folder_dir, file_name)\nprint(file_dict)\n#Step 2: Update row content with file info (appending to current content)\nrow_id = \"fDMHEdraSRuUMNPGEj-4kQ\"\nFILE_COL_NAME = \"File\"\nrow = base.get_row(\"Table1\", row_id)\ncurrent_files = row[file_col_name]\ncurrent_files.append(file_dict)\nprint(base.update_row(\"Table1\", row_id, {FILE_COL_NAME: current_files}))\n</code></pre> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n#Step 1: Get file info\nfolder_dir = \"/Main/\"\nfile_name = \"sky.png\"\nfile_dict = base.get_custom_file_info(folder_dir, file_name)\nprint(file_dict)\n#Step 2: Update row content with file info (appending to current content)\nrow_id = \"fDMHEdraSRuUMNPGEj-4kQ\"\nFILE_COL_NAME = \"File\"\nprint(base.update_row(\"Table1\", row_id, {FILE_COL_NAME: base.get_row(\"Table1\",row_id)[FILE_COL_NAME] + [file_dict]}))\n</code></pre>"},{"location":"scripts/python/objects/links/","title":"Links","text":"<p>link id and column key</p> <p><code>link_id</code> should not be mistaken with the column <code>key</code>! The <code>key</code> value is unique (like an id) whereas the link id will be shared between the two linked columns. Please note that <code>link_id</code> is used as argument to add/update/remove links, whereas you'll have to provide <code>link_column_key</code> (the link column <code>key</code>) to get linked records. Both information are available in the column object:</p> <pre><code>{\n\u2003\"key\": \"Cp51\", /* (1)! */\n\u2003\"type\": \"link\",\n\u2003\"name\": \"Link column\",\n\u2003\"editable\": true,\n\u2003\"width\": 200,\n\u2003\"resizable\": true,\n\u2003\"draggable\": true,\n\u2003\"data\": {\n\u2003\u2003\"display_column_key\": \"0000\",\n\u2003\u2003\"is_internal\": true,\n\u2003\u2003\"link_id\": \"UAmR\", /* (2)! */\n\u2003\u2003\"table_id\": \"FJkA\",  /* (3)! */\n\u2003\u2003\"other_table_id\": \"nw8k\",  /* (4)! */\n\u2003\u2003\"is_multiple\": true,\n\u2003\u2003\"is_row_form_view\": false,\n\u2003\u2003\"view_id\": \"\",\n\u2003\u2003\"array_type\": \"text\",\n\u2003\u2003\"array_data\": null,\n\u2003\u2003\"result_type\": \"array\"\n\u2003},\n\u2003\"permission_type\": \"\",\n\u2003\"permitted_users\": [],\n\u2003\"permitted_group\": [],\n\u2003\"edit_metadata_permission_type\": \"\",\n\u2003\"edit_metadata_permitted_users\": [],\n\u2003\"edit_metadata_permitted_group\": [],\n\u2003\"description\": null,\n\u2003\"colorbys\": {}\n}\n</code></pre> <ol> <li> <p>The column <code>key</code> (referred as <code>link_column_key</code> in <code>base.get_linked_records</code> arguments)</p> </li> <li> <p>The link id of the column (referred as <code>link_id</code> in the add/update/remove links operations)</p> </li> <li> <p>The table whose id is <code>table_id</code> is referred later in this section as the source table (the table containing this column)</p> </li> <li> <p>The table whose id is <code>other_table_id</code> is referred later in this section as the target table</p> </li> </ol>"},{"location":"scripts/python/objects/links/#get-link-id","title":"Get link id","text":"<p>get_column_link_id</p> <p>Get the link id of the column <code>column_name</code> from the table <code>table_name</code>.</p> <pre><code>base.get_column_link_id(table_name, column_name)\n</code></pre> <p>Output String (throws an error if no table named <code>table_name</code> exists or if no column named <code>column_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nlink_id = base.get_column_link_id('Table1', 'Link column')\nprint(link_id)\n</code></pre>"},{"location":"scripts/python/objects/links/#get-linked-records","title":"Get linked records","text":"<p>Rows and records, source and target</p> <p>Rows and records are basically the same things. However, to make the following description easier to understand, we will differentiate them:</p> <ul> <li> <p>Rows are from the source table (the table whose id is <code>table_id</code>)</p> </li> <li> <p>Records are the rows from the target table (the table linked to the source table in the column whose <code>key</code> is <code>link_column_key</code> or whose link id is <code>link_id</code>)</p> </li> </ul> <p>get_linked_records</p> <p>List the records linked (in the column whose <code>key</code> is <code>link_column_key</code>) to one or more rows of the source table. The row(s) you want to get the linked records from are defined in the <code>rows</code> objects (see below).</p> <pre><code>base.get_linked_records(table_id, link_column_key, rows) # (1)!\n</code></pre> <ol> <li> <p><code>table_id</code>: the id of source table</p> <p><code>link_column_key</code>: the column key of the link-type column of source table (not the link id from <code>base.get_column_link_id</code>)</p> <p><code>rows</code>: a list of dicts, each of them containing:</p> <ul> <li> <p><code>row_id</code>: the id of the row we want to get the linked records from</p> </li> <li> <p><code>limit</code>: the maximum number of linked records to get (default is 10)</p> </li> <li> <p><code>offset</code>: the number of first linked records not to retrieve (default is 0)</p> </li> </ul> </li> </ol> <p>Output Single dict where each <code>key</code> is the id of a row of the source table and the corresponding value is a list of link dicts (see Output structure example below)</p> <p>Example</p> Function runOutput structure example <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nlinked_records = base.get_linked_records('0000', '89o4', rows=[\n    {'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n    {'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\nprint(json.dumps(linked_records, indent='\u2003')) \n</code></pre> <pre><code>{\n    \"FzNqJxVUT8KrRjewBkPp8Q\" /* (1)! */: [\n        {\"row_id\": \"LocPgVvsRm6bmnzjFDP9bA\", \"display_value\": \"1\"} /* (2)! */,\n        {\"row_id\": \"OA6x7CYoRuyc2pT52Znfmw\", \"display_value\": \"3\"},\n        ...\n    ],\n    \"Jmnrkn6TQdyRg1KmOM4zZg\": [\n        {\"row_id\": \"LocPgVvsRm6bmnzjFDP9bA\", \"display_value\": \"1\"},\n        {\"row_id\": \"OA6x7CYoRuyc2pT52Znfmw\", \"display_value\": \"3\"},\n        ...\n    ]\n}\n</code></pre> <ol> <li> <p>id of a row of the source table</p> </li> <li> <p>link object: </p> <ul> <li><code>row_id</code> is the id of the linked record (row from the target table)</li> <li><code>display_value</code> is the displayed in the column whose <code>key</code> is <code>link_column_key</code> (from a column of the target table)</li> </ul> </li> </ol>"},{"location":"scripts/python/objects/links/#add-link","title":"Add link","text":"<p>add_link</p> <p>Add link in a link-type column. You'll need the source target's name <code>table_name</code>, the target table's name <code>other_table_name</code>, the link id from the link-type column and both the ids of the rows you want to link: <code>row_id</code> for the row from the source table and <code>other_row_id</code> for the record from the target table.</p> <pre><code>base.add_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation (throws an error if no column with ink id <code>link_id</code> exists in the source table, if no table named <code>table_name</code> or <code>other_table_name</code> exists or if no row with id <code>row_id</code> or <code>other_row_id</code> exists in their respective tables)</p> <p>Example</p> <pre><code>base.add_link('5WeC', 'Team Members', 'Contacts', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ');\n</code></pre> <p>Example: Add link to current row</p> <pre><code>from seatable_api import Base, context\n# Do not hesitate to store the tables' and columns' names at the beginning of your script,\n# it will make it really easier to update if names change\nTABLE1_NAME = \"Table1\";\nTABLE1_LINK_COLUMN_NAME = \"Table2 link\";\nTABLE2_NAME = \"Table2\";\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nlin_id = base.get_column_link_id(TABLE1_NAME,TABLE1_LINK_COLUMN_NAME); # (1)!\ncurrent_row_id = context.current_row['_id'];\nbase.add_link(lin_id, TABLE1_NAME, TABLE2_NAME, current_row_id, 'J5St2clyTMu_OFf9WD8PbA')\n</code></pre> <ol> <li>Remember you can use <code>base.get_column_link_id</code> to get the link id of a specific link-type column.</li> </ol>"},{"location":"scripts/python/objects/links/#update-links","title":"Update link(s)","text":"<p>update_link</p> <p>Update the content of the link-type column whose link id is <code>link_id</code> for the row with id <code>row_id</code> in the table <code>table_name</code>. It will remove all existing row links and add new links to records of table <code>other_table_name</code> with ids in the <code>other_rows_ids</code> list.</p> <pre><code>base.update_link(link_id, table_name, other_table_name, row_id, other_rows_ids)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation (throws an error if no column with ink id <code>link_id</code> exists in the source table, if no table named <code>table_name</code> or <code>other_table_name</code> exists or if no row with id <code>row_id</code> exists in the source table)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.update_link(\n    link_id='r4IJ',\n    table_name='Table1',\n    other_table_name='Table2',\n    row_id='BXhEm9ucTNu3FjupIk7Xug',\n    other_rows_ids=[\n      'exkb56fAT66j8R0w6wD9Qg',\n      'DjHjwmlRRB6WgU9uPnrWeA'\n    ]\n)\n</code></pre> <p>batch_update_links</p> <p>Same than above,except that it allows you to batch update infos of link-type columns for several rows at once. Learn more about <code>other_rows_ids_map</code> in the SeaTable API Reference. This function can't operate more than 1000 rows at once. If you need to deal with more than 1000 rows at once, please refer to the common questions.</p> <pre><code>base.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map) # (1)!\n</code></pre> <ol> <li> <p><code>row_id_list</code> is a list containing the ids of all the rows of the source table (whose id is <code>table_id</code>) you want to update</p> <p><code>other_rows_ids_map</code> is an object with the following syntax, the keys <code>id_1</code>,<code>id_2</code>,...,<code>id_n</code> being all the ids of <code>row_id_list</code>:</p> <pre><code>{\n    'id_1': [record1['_id'], record2['_id']],\n    'id_2': [record5['_id']],\n    ...\n    'id_n': [record1['_id'], recordn['_id']]\n}\n</code></pre> </li> </ol> <p>Output Dict containing a single <code>success</code> key with the result of the operation (throws an error if no column with ink id <code>link_id</code> exists in the source table, if no table named <code>table_name</code> or <code>other_table_name</code> exists or if no row with one of the id <code>row_id_list</code> exists in the source table)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nlink_id = \"WaW5\"\ntable_name = \"Table1\"\nother_table_name =\"Table2\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n    \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n    \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\nbase.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"scripts/python/objects/links/#remove-link","title":"Remove link","text":"<p>remove_link</p> <p>Delete the link to the record from table <code>other_table_name</code> whose id is <code>other_row_id</code> in the row from table <code>table_name</code> whose id is <code>row_id</code>.</p> <pre><code>base.remove_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <p>Output Dict containing a <code>success</code> key with the result of the operation and a <code>deleted_links_count</code> with the number of actually deleted links (throws an error if no column with ink id <code>link_id</code> exists in the source table, if no table named <code>table_name</code> or <code>other_table_name</code> exists or if no row with id <code>row_id</code> or <code>other_row_id</code> exists in their respective tables)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.remove_link('5WeC', 'Table1', 'Table2', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"scripts/python/objects/metadata/","title":"Metadata","text":"<p>Metadata delivers the complete structure of a base with tables, views and columns.</p> <p>get_metadata</p> <p>Get the complete metadata of a table. The metadata will not contain the concrete rows of the table.</p> Function callOutput structure <pre><code>base.get_metadata()\n</code></pre> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\nprint(base.get_metadata())\n</code></pre> <p>Displaying long and complex objects</p> <p>If you have hard time reading the output of a function returning a long or complex object, please see how to make a pretty print.</p>"},{"location":"scripts/python/objects/rows/","title":"Rows","text":"<p>You'll find below all the available methods to interact with the rows of a SeaTable table. In this section, you'll have to deal with the id of the rows. You can find few tips on how to get it in the user manual.</p>"},{"location":"scripts/python/objects/rows/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a row object: <pre><code>{\n  \"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n  \"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n  \"Name\": \"NewName\",\n  \"Date\": \"2020-08-01\",\n  \"Content\": \"111\",\n  \"link\": [\n            {\n              \"display_value\": \"1\",\n              \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n          ]\n}\n</code></pre></p> <p>Please note the specific format for link-type columns (structure of the array objects for key <code>link</code>):</p> <ul> <li> <p><code>display_value</code>: Value displayed in the cell</p> </li> <li> <p><code>row_id</code>: id of the linked row in the other table</p> </li> </ul>"},{"location":"scripts/python/objects/rows/#get-rows","title":"Get row(s)","text":"<p>get_row</p> <p>Get a row from table <code>table_name</code> via its <code>row_id</code>.</p> <pre><code>base.get_row(table_name, row_id)\n</code></pre> <p>Output Single row dict (throws an error if no table named <code>table_name</code> exists or if no row with the id <code>row_id</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrow = base.get_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre> <p>list_rows</p> <p>Lists multiple rows of the table <code>table_name</code>. If <code>view_name</code> is provided, only the rows displayed in this specific view will be returned. The default <code>limit</code> is 1000 which is also the maximum number of rows this method returns. The query method (see below) offers more filter options and can return more rows.</p> <pre><code>base.list_rows(table_name, view_name=None, start=None, limit=None) # (1)!\n</code></pre> <ol> <li> <p><code>view_name</code> (optional): the name of the view you want to get the rows from. If there is no view named <code>view_name</code>, all the rows from table <code>table_name</code> will be eventually returned (depending on <code>start</code> and <code>limit</code>)</p> <p><code>start</code> (optional): the index of the first rows you want to get (default is <code>0</code>)</p> <p><code>limit</code> (optional): the maximum number of rows that should be returned (default is 1000, couldn't be higher)</p> </li> </ol> <p>Mind the indexes!</p> <p>In the SeaTable web interface, the row numbers, on the left, start at 1, whereas the <code>start</code> argument for the <code>base.list_rows</code> method starts at 0! This means that to get as first row the row numbered 10 in the web interface, you'll have to enter <code>start=9</code>.</p> <p>Output List of row dicts (eventually empty if <code>start</code> is higher than the number of rows or if the view <code>view_name</code> is empty, throws an error if no table named <code>table_name</code> exists or if no view named <code>view_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrows = base.list_rows('Table1')\nrows = base.list_rows('Table1', view_name='Default View', start=5, limit=20)\n</code></pre> <p>query</p> <p>Use SQL to query a base. SQL queries are the most powerful way access data stored in a base. If your not familiar with SQL syntax, we recommend using first the SQL query plugin. Most SQL syntax is supported, you can check the SQL Reference section of this manual for more information.</p> <pre><code>base.query(sql_statement)\n</code></pre> <p>Unless the SQL statement specifies a higher limit, the method returns a maximum of 100 rows. The maximum number of rows returned is 10000 no matter the limit specified in the SQL statement.</p> <p>Backticks for table or column names containing or special characters or using reserved words</p> <p>For SQL queries, you can use numbers, special characters or spaces in the names of your tables and columns. However, you'll have to escape these names with backticks in order for your query to be correctly interpreted, for example <code>SELECT * FROM `My Table`</code>. </p> <p>Similarly, if some of your of table or column names are the same as SQL function names (for example a date-type column named <code>date</code>), you'll also have to escape them in order for the query interpreter to understand that it's not a function call missing parameters, but rather a table or column name.</p> <p>Similarly, if some of your of table or column names are the same as SQL function names (for example a date-type column named <code>date</code>), you'll also have to escape them in order for the query interpreter to understand that it's not a function call missing parameters, but rather a table or column name.</p> <p>Output List of row dicts (eventually empty if no row match the request's conditions)</p> <p>All the examples below are related to a table Bill with the following structure/data:</p> name price year Bob 300 2021 Bob 300 2019 Tom 100 2019 Tom 100 2020 Tom 200 2021 Jane 200 2020 Jane 200 2021 <p>Example with a wildcard</p> Function callOutput <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\njson_data = base.query('select * from Bill') # (1)!\nprint(json.dumps(json_data, indent='\u2003'))\n</code></pre> <ol> <li><code>*</code> means that you want to get the whole rows data (columns's values and specific row data such as id, etc.)</li> </ol> <pre><code>[\n    {\n        \"name\": \"Bob\",\n        \"price\": 300,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:19.106+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"W77uzH1cSXu2v2UtqA3xSw\"\n    },\n    {\n        \"name\": \"Bob\",\n        \"price\": 300,\n        \"year\": 2019,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:22.112+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"IxONgyDFQxmcDKpZWlQ9XA\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 100,\n        \"year\": 2019,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-15T10:57:23.4+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"K4LBuQ7aSjK9JwN14ITqvA\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 100,\n        \"year\": 2020,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"EHcQEaxiRzm3Zvq8B33bwQ\"\n    },\n    {\n        \"name\": \"Tom\",\n        \"price\": 200,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"CjaCdBlNRXKkYkm231shqg\"\n    },\n    {\n        \"name\": \"Jane\",\n        \"price\": 200,\n        \"year\": 2020,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"YzmUexIAR7iDWmhKGHgpMw\"\n    },\n    {\n        \"name\": \"Jane\",\n        \"price\": 200,\n        \"year\": 2021,\n        \"_locked\": null,\n        \"_locked_by\": null,\n        \"_archived\": false,\n        \"_creator\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_ctime\": \"2025-09-18T09:52:00+02:00\",\n        \"_last_modifier\": \"bd26d2b...82ca3fe1178073@auth.local\",\n        \"_mtime\": \"2025-09-18T09:52:00+02:00\",\n        \"_id\": \"HJi7wbUMQIOuIlPaoO9Fbg\"\n    }\n]\n</code></pre> <p>Example with WHERE</p> Function call 1 (filter by year)Output #1Function call 2 (filter by name)Output #2 <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\njson_data = base.query('select name, price from Bill where year = 2021')\nprint(json.dumps(json_data, indent='\u2003'))\n</code></pre> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\"},\n    {\"name\":\"Tom\",\"price\":\"200\"},\n    {\"name\":\"Jane\",\"price\":\"200\"}\n]\n</code></pre> <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\njson_data = base.query('select name, price, year from Bill where name = \"Bob\"')\nprint(json.dumps(json_data, indent='\u2003'))\n</code></pre> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2021\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2019\"}\n]\n</code></pre> <p>Example with GROUP BY</p> Function callOutput <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\njson_data = base.query('select name, sum(price) from Bill group by name')\nprint(json.dumps(json_data, indent='\u2003'))\n</code></pre> <pre><code>[\n    {'name': 'Bob', 'SUM(price)': 600},\n    {'name': 'Tom', 'SUM(price)': 400},\n    {'name': 'Jane', 'SUM(price)': 400}\n]\n</code></pre> <p>Example with DISTINCT</p> Function callOutput <pre><code>import json\nfrom seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\njson_data = base.query('select distinct name from Bill')\nprint(json.dumps(json_data, indent='\u2003'))\n</code></pre> <pre><code>[\n    {'name': 'Bob'},\n    {'name': 'Tom'},\n    {'name': 'Jane'}\n]\n</code></pre>"},{"location":"scripts/python/objects/rows/#add-rows","title":"Add row(s)","text":"<p>Dealing with default values</p> <p>By default, the default values specified for the table columns in the web interface do not apply when adding/appending rows via Python scripts. In order to apply the default values, add <code>apply_default=True</code>as a function parameter. If set to <code>True</code>, the default values can be overwritten by specifying alternative values in <code>row_data</code>.</p> <p>append_row</p> <p>Add a row to the table <code>table_name</code>. This row contains the data specified in the dict <code>row_data</code>. No row will be added if <code>row_data</code> is an empty dict (<code>{}</code>).empty or if it contains only keys that don't exist in the table.</p> <pre><code>base.append_row(table_name, row_data, apply_default=False) # (1)!\n</code></pre> <ol> <li> <p><code>row_data</code>: dict (pairs of <code>key</code>:<code>value</code>, each <code>key</code> being the name of a column), for example:</p> <pre><code>{\n    'First Name': 'John',\n    'Last Name': 'Doe',\n    'Invoice amount': 100,\n    'Products': ['Office Supplies', 'Computer']\n}\n</code></pre> <p><code>apply_default</code> (optional): wether to use default values or not (default is <code>False</code>)</p> </li> </ol> <p>Creating an empty row</p> <p>To create an empty row, specify a <code>row_data</code> dict containing at least one existing column of the table with an empty string as value, for example: <code>{'Name': ''}</code></p> <p>Output Single row dict (<code>None</code> if no row were added, throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrow_data = {\n    \"Name\": \"Ron\"\n}\n\nrow = base.append_row('Table1', row_data, apply_default=True)\nprint(row)\n</code></pre> <p>batch_append_rows</p> <p>Append multiple rows to the table <code>table_name</code> at once. This function can't operate more than 1000 rows at once. If you need to deal with more than 1000 rows at once, please refer to the common questions.</p> <pre><code>base.batch_append_rows(table_name, rows_data, apply_default=False) # (1)!\n</code></pre> <ol> <li> <p><code>rows_data</code>: list of <code>row_data</code> dict (see <code>base.append_row</code> above)</p> <p><code>apply_default</code> (optional): wether to use default values or not (default is <code>False</code>)</p> </li> </ol> <p>Output Single dict object containing the number of new rows, the list of the ids of the created rows and the first row (see example output below); throws an error if no table named <code>table_name</code> exists</p> <p>Example</p> Function callOutput <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrows_data = [{\n    'Name': 'Ron',\n    'Birthday': '1975-01-01'\n}, {\n    'Name': 'Richard',\n    'Birthday': '1978-10-08'\n}]\n\nrows = base.batch_append_rows('Table1', rows_data)\nprint(rows)\n</code></pre> <pre><code>{\n\u2003  \"inserted_row_count\": 2, /* (1)! */\n\u2003  \"row_ids\": [  /* (2)! */\n    \u2003\u2003{\n    \u2003\u2003\u2003 \"_id\": \"bglW5pKfQxG9D70hc693Wg\"\n    \u2003\u2003},\n    \u2003\u2003{\n    \u2003\u2003\u2003 \"_id\": \"Q3E3IJWrTQCjOOxjipM8jA\"\n    \u2003\u2003}\n   ],\n\u2003  \"first_row\": {  /* (3)! */\n    \u2003\u2003\"0000\": \"Ron\",\n    \u2003\u2003\"1JGG\": \"1975-01-01\",\n    \u2003\u2003\"_creator\": \"cc7a1d0fcec84bf9b36df5dcf5b65b99@auth.local\",\n    \u2003\u2003\"_last_modifier\": \"cc7a1d0fcec84bf9b36df5dcf5b65b99@auth.local\",\n    \u2003\u2003\"_id\": \"bglW5pKfQxG9D70hc693Wg\",\n    \u2003\u2003\"_ctime\": \"2025-09-24T14:52:55.651+00:00\",\n    \u2003\u2003\"_mtime\": \"2025-09-24T14:52:55.651+00:00\"\n   }\n}\n</code></pre> <ol> <li> <p><code>inserted_row_count</code>: number of new rows</p> </li> <li> <p><code>row_ids</code>: list of dicts, each containing a single <code>_id</code> key and the id of the corresponding created row as value</p> </li> <li> <p><code>first_row</code>: the row dict of the first created row</p> </li> </ol> <p>insert_row</p> <p>Insert one row to the table <code>table_name</code> under an anchor row whose id is <code>anchor_row_id</code>. If no row with id <code>anchor_row_id</code> exists, the row is added to the end of the table (similar to <code>base.append_row</code> in ths case).</p> <pre><code>base.insert_row(table_name, row_data, anchor_row_id, apply_default=False)\n</code></pre> <p>Output Single row dict (<code>None</code> if no row were added, throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrow_data = {\n    \"Name\": \"Ron\"\n}\nrow = base.insert_row('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\nprint(row)\n</code></pre>"},{"location":"scripts/python/objects/rows/#update-rows","title":"Update row(s)","text":"<p>update_row</p> <p>Update the row whose id is <code>row_id</code> in the table <code>table_name</code>. The <code>row_data</code> dict (pairs of <code>key</code>:<code>value</code>, each <code>key</code> being the name of a column) need to contain only the data you want to update. To reset a value, specify the <code>key</code>:<code>value</code> pair with an empty string <code>''</code>.</p> <pre><code>base.update_row(table_name, row_id, row_data)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists or if no row with the id <code>row_id</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrow_data = {\n    \"Name\": \"Ron\"\n}\nrow_update = base.update_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\nprint(row_update)\n</code></pre> <p>batch_update_rows</p> <p>Updates multiple rows in the table <code>table_name</code> at once. This function can't operate more than 1000 rows at once. If you need to deal with more than 1000 rows at once, please refer to the common questions.</p> <pre><code>base.batch_update_rows(table_name, rows_data) # (1)!\n</code></pre> <ol> <li> <p><code>rows_data</code>: list of dicts containing two <code>key</code>:<code>value</code> pairs:</p> <ul> <li><code>row_id</code>: the id of the row to update</li> <li><code>row</code>: the dict containing the row data to update (see <code>base.append_row</code> above)</li> </ul> </li> </ol> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists, if no row with the id <code>row_id</code> exists or if <code>rows_data</code> is wrong, for example with non-existing <code>row_id</code> value)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nrows_data = [{\n    \"row_id\" : \"fMmCFyoxT4GN5Y2Powbl0Q\",\n    \"row\" : {\n        \"Name\" : \"Ron\",\n        \"Height\" : \"183\"\n        }\n}, {\n    \"row_id\" : \"cF5JTE99Tae-VVx0BGT-3A\",\n    \"row\" : {\n        \"Name\" : \"Richard\",\n        \"Height\" : \"184\"\n        }\n}, {\n    \"row_id\" : \"WP-8rb5PSUaM-tZRmTOCPA\",\n    \"row\" : {\n        \"Name\" : \"Regina\",\n        \"Height\" : \"173\"\n        }\n}]\nrow_update = base.batch_update_rows('Table1', rows_data)\nprint(row_update)\n</code></pre>"},{"location":"scripts/python/objects/rows/#delete-rows","title":"Delete row(s)","text":"<p>delete_row</p> <p>Delete a single row (whose id is <code>row_id</code>) from the table <code>table_name</code>.</p> <pre><code>base.delete_row(table_name, row_id)\n</code></pre> <p>Output Dict containing a single <code>deleted_rows</code> key with the number of deleted rows (<code>0</code> if no row with id <code>row_id</code> exists, throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nbase.delete_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre> <p>batch_delete_rows</p> <p>Delete multiple rows from the table <code>table_name</code> at once. This function can't operate more than 1000 rows at once. If you need to deal with more than 1000 rows at once, please refer to the common questions.</p> <pre><code>base.batch_delete_rows(table_name, row_ids) # (1)!\n</code></pre> <ol> <li><code>row_ids</code>: list of the ids of the rows to delete</li> </ol> <p>Output Dict containing a single <code>deleted_rows</code> key with the number of deleted rows (<code>0</code> if <code>row_ids</code> is an empty list, throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n# Retrieving the rows of table 'Table1'\nrows = base.list_rows('Table1')\n#Getting only the three first rows\ndel_rows = rows[:3]\n# Creating a list of the ids from these three rows\nrow_ids = [row['_id'] for row in del_rows]\ndeletion_result = base.batch_delete_rows('Table1', row_ids)\nprint(deletion_result)\n</code></pre>"},{"location":"scripts/python/objects/tables/","title":"Tables","text":"<p>You'll find below all the available methods to interact with the tables of a SeaTable base.</p>"},{"location":"scripts/python/objects/tables/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a table object: <pre><code>{\n    \"_id\": \"IfcB\",\n    \"name\": \"New table\",\n    \"is_header_locked\": false,\n    \"summary_configs\": {},\n    \"columns\": [ // (1)!\n        {\n        \"key\": \"0000\",\n        \"type\": \"number\",\n        \"name\": \"First column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"2w6F\",\n        \"type\": \"text\",\n        \"name\": \"second column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        },\n        {\n        \"key\": \"3aAf\",\n        \"type\": \"date\",\n        \"name\": \"third column\",\n        \"editable\": true,\n        \"width\": 200,\n        \"resizable\": true,\n        \"draggable\": true,\n        \"data\": null,\n        \"permission_type\": \"\",\n        \"permitted_users\": []\n        }\n    ],\n    \"rows\": [], // (2)!\n    \"views\": [ // (3)!\n        {\n        \"_id\": \"0000\",\n        \"name\": \"Default View\",\n        \"type\": \"table\",\n        \"is_locked\": false,\n        \"filter_conjunction\": \"And\",\n        \"filters\": [],\n        \"sorts\": [],\n        \"groupbys\": [],\n        \"group_rows\": [],\n        \"groups\": [],\n        \"colorbys\": {},\n        \"hidden_columns\": [],\n        \"rows\": [],\n        \"formula_rows\": {},\n        \"link_rows\": {},\n        \"summaries\": {},\n        \"colors\": {}\n        }\n    ],\n    \"id_row_map\": {}\n}\n</code></pre></p> <ol> <li> <p>Array of existing columns     <pre><code>{\n  \"key\": \"g4s1\",\n  \"type\": \"number\",\n  \"name\": \"api3\",\n  \"editable\": true,\n  \"width\": 200,\n  \"resizable\": true,\n  \"draggable\": true,\n  \"data\": null,\n  \"permission_type\": \"\",\n  \"permitted_users\": []\n}\n</code></pre></p> </li> <li> <p>Array of existing rows     <pre><code>{\n\"_id\": \"Qtf7xPmoRaiFyQPO1aENTjb\",\n\"_mtime\": \"2021-03-10T16:19:31.761+00:00\",\n\"Name\": \"NewName\",\n\"Date\": \"2020-08-01\",\n\"Content\": \"111\",\n\"link\": [\n            {\n            \"display_value\": \"1\",\n            \"row_id\": \"XzdZfL2oS-aILnhfagTWEg\"\n            }\n        ]\n}\n</code></pre></p> </li> <li> <p>Array of existing views     <pre><code>{\n  \"_id\": \"0000\",\n  \"name\": \"Default View\",\n  \"type\": \"table\",\n  \"is_locked\": false,\n  \"rows\": [],\n  \"formula_rows\": {},\n  \"summaries\": [],\n  \"filter_conjunction\": \"And\",\n  \"sorts\": [],\n  \"filters\": [],\n  \"hidden_columns\": [],\n  \"groupbys\": [],\n  \"group_rows\": [],\n  \"groups\": []\n}\n</code></pre> Please refer to the SeaTable API Reference for a more detailed presentation.</p> </li> </ol> <p>You can have a look at the specific view, column or row structure on the corresponding pages.</p>"},{"location":"scripts/python/objects/tables/#retrieve-tables","title":"Retrieve table(s)","text":"<p>Get current table</p> <p>There is no specific method to get the current (selected) table as it is a property from the context object, so simply use <code>context.current_table</code>.</p> <p>list_tables</p> <p>Get all tables of the current base.</p> <p><pre><code>base.list_tables()\n</code></pre> __ Output__ List of table dicts</p> <p>Example <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ntables = base.list_tables()\nprint(tables)\n</code></pre></p> <p>get_table_by_name</p> <p>Get a table object by its name.</p> <p><pre><code>base.get_table_by_name(table_name)\n</code></pre> Output Single table dict (<code>None</code> if there is no table named <code>table_name</code>)</p> <p>Example <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ntable = base.get_table_by_name('Table1')\nprint(table)\n</code></pre></p>"},{"location":"scripts/python/objects/tables/#add-table","title":"Add table","text":"<p>add_table</p> <p>Add a table named <code>table_name</code> into a base. The <code>columns</code> argument is an optional list of column objects.</p> <pre><code>base.add_table(table_name, lang='en', columns=[]) # (1)!\n</code></pre> <ol> <li><code>lang</code> (optional): can be <code>en</code> (default) for English or <code>zh-cn</code> for Chinese and will determine the name of the first <code>Name</code> column (if no <code>columns</code> where specified)     <code>columns</code> (optional): list of column objects describing the columns of the new table.</li> </ol> <p>Output Single table dict (throws an error if a table named <code>table_name</code> already exists)</p> <p>Example <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nnew_table = base.add_table('Investigation', lang='zh-cn')\nprint(new_table)\n</code></pre></p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\n\ncolumns=[\n  {\n    \"column_type\" : \"text\", \n    \"column_name\": \"name\"\n  }, \n  {\n  \"column_type\": \"number\",\n  \"column_name\": \"age\"\n  }\n]\n\nbase.add_table(\"ScriptTest\", lang='en', columns=columns)\n</code></pre>"},{"location":"scripts/python/objects/tables/#rename-table","title":"Rename table","text":"<p>rename_table</p> <p>Rename an existing table named <code>table_name</code> to <code>new_table_name</code>.</p> <p><pre><code>base.rename_table(table_name, new_table_name)\n</code></pre> Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> Function callOutput <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nprint(base.rename_table('Table1', 'Table11'))\n</code></pre> <pre><code>{'success': True}\n</code></pre>"},{"location":"scripts/python/objects/tables/#delete-table","title":"Delete table","text":"<p>delete_table</p> <p>Delete a table named <code>tableName</code> from the base. By the way, the table can be restored from the logs. Deleting the last table is not possible.</p> <pre><code>base.delete_table(table_name)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists or if you try to delete the last table)</p> <p>Example <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\ndelete_table_success = print(base.delete_table('Table1'))\nprint(delete_table_success)\n</code></pre></p>"},{"location":"scripts/python/objects/users/","title":"Users","text":""},{"location":"scripts/python/objects/users/#get-user-info","title":"Get user info","text":"<p>get_user_info</p> <p>Returns the name of the user and his ID (the one you can see in your profile). The username you have to provide is a unique identifier ending by <code>@auth.local</code>. This is neither the email address of the user nor its name.</p> <pre><code>base.get_user_info(username)\n</code></pre> <p>Output Dict containing <code>id_in_org</code> and <code>name</code> keys</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nuser_info = base.get_user_info(\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\")\nprint(user_info)\n</code></pre>"},{"location":"scripts/python/objects/views/","title":"Views","text":"<p>You'll find below all the available methods to interact with the views of a SeaTable table.</p>"},{"location":"scripts/python/objects/views/#global-structure","title":"Global structure","text":"<p>Here is the global structure of a view object:</p> <pre><code>{\n    \"_id\": \"0000\",\n    \"name\": \"Default View\",\n    \"type\": \"table\",\n    \"is_locked\": false,\n    \"rows\": [],\n    \"formula_rows\": {},\n    \"summaries\": [],\n    \"filter_conjunction\": \"And\",\n    \"sorts\": [],\n    \"filters\": [],\n    \"hidden_columns\": [],\n    \"groupbys\": [],\n    \"group_rows\": [],\n    \"groups\": []\n}\n</code></pre> <p>Please refer to the SeaTable API Reference for a more detailed presentation.</p>"},{"location":"scripts/python/objects/views/#get-views","title":"Get view(s)","text":"<p>get_view_by_name</p> <p>Get a view of the table <code>table_name</code>, specified by its name <code>view_name</code>.</p> <p><pre><code>base.get_view_by_name(table_name, view_name)\n</code></pre> Output Single view dict (throws an error if no view called <code>view_name</code> exists or if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nview = base.get_view_by_name('Table1', 'Default View')\nprint(view)\n</code></pre> <p>list_views</p> <p>Get all the views of the table named <code>table_name</code>.</p> <pre><code>base.list_views(table_name)\n</code></pre> <p>Output Dict with a single <code>views</code> key containing a list of the table's views (throws an error if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nviews = base.list_views('Table1')\nprint(views)\n</code></pre>"},{"location":"scripts/python/objects/views/#add-view","title":"Add view","text":"<p>add_view</p> <p>Add a view named <code>view_name</code> to the table <code>table_name</code>.</p> <pre><code>base.add_view(table_name, view_name)\n</code></pre> <p>Output Single view dict (throws an error if a view called <code>view_name</code> already exists or if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nview = base.add_view('Table1', 'New view')\nprint(view)\n</code></pre>"},{"location":"scripts/python/objects/views/#rename-view","title":"Rename view","text":"<p>rename_view</p> <p>Rename a view in the table <code>table_name</code> specified by its current name <code>view_name</code> and its new name <code>new_view_name</code>. Please ensure that no view named <code>new_view_name</code> already exists in the table <code>table_name</code>.</p> <pre><code>base.rename_view(table_name, view_name, new_view_name)\n</code></pre> <p>Output Single view dict (throws an error if no view called <code>view_name</code> exists or if no table named <code>table_name</code> exists)</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nview = base.rename_view('Table1', 'MyView', 'NewView')\nprint(view)\n</code></pre>"},{"location":"scripts/python/objects/views/#delete-view","title":"Delete view","text":"<p>delete_view</p> <p>Delete a view in the table <code>table_name</code>, specified by its name <code>view_name</code>. DO NOT try to delete the last view or you might no longer be able to access your table!</p> <pre><code>base.delete_view(table_name, view_name)\n</code></pre> <p>Output Dict containing a single <code>success</code> key with the result of the operation  (throws an error if no table named <code>table_name</code> exists). Be careful, <code>{'success':True}</code> will be returned even if no view named <code>view_name</code> exists!</p> <p>Example</p> <pre><code>from seatable_api import Base, context\n\nbase = Base(context.api_token, context.server_url)\nbase.auth()\nprint(base.delete_view('Table1', 'MyView'))\n</code></pre>"},{"location":"scripts/sql/functions/","title":"SQL function reference","text":"<p>With functions you can transform, calculate, combine or merge the values of other columns from the current table. On top of that, functions can refer to each other. In this article, we will show you a complete overview of all functions with examples. If you are looking for a specific function, you can use Ctrl+F or \u2318+F to quickly find an entry on this page.</p> <p>The functions supported in SQL are roughly the same as the set of functions supported by formulas in SeaTable. The function parameters can be numbers, strings, constants, column names or other functions. Column name cannot be an alias. The function can be classified into the following categories: </p> <ul> <li>Operators</li> <li>Mathematical functions</li> <li>Text functions</li> <li>Date functions</li> <li>Geo functions</li> <li>Logical functions</li> <li>Statistical functions</li> </ul> <p>Backticks for table or column names containing or special characters or using reserved words</p> <p>For SQL queries, you can use numbers, special characters or spaces in the names of your tables and columns. However, you'll have to escape these names with backticks in order for your query to be correctly interpreted, for example <code>select * from `My Table`</code>. </p> <p>Similarly, if some of your of table or column names are the same as SQL function names (for example a date-type column named <code>date</code>), you'll also have to escape them in order for the query interpreter to understand that it's not a function call missing parameters, but rather a table or column name.</p>"},{"location":"scripts/sql/functions/#constants","title":"Constants","text":"<p>You can use the following constants in the functions:</p> VARIABLE DESCRIPTION <code>e</code> Returns the Euler number e=2.71828... <code>pi</code> Returns the circle number \u03c0=3.14159... <code>true</code> Returns the logical value <code>true</code>. <code>false</code> Returns the logical value <code>false</code>."},{"location":"scripts/sql/functions/#operators","title":"Operators","text":"<p>Parameters must be strings or numbers. If a number is passed to a parameter that expects a string, it'll be converted to string, and vice versa.</p>"},{"location":"scripts/sql/functions/#arithmetic-operators","title":"Arithmetic operators","text":"<p>add</p> <p>Adds two numeric values (<code>num1</code> and <code>num2</code>) and returns the result.</p> <pre><code>add(num1,num2)\n</code></pre> <p>Example <code>add(1,2)</code> returns <code>3</code></p> <p>substract</p> <p>Subtracts one numeric value (<code>num2</code>) from another (<code>num1</code>).</p> <pre><code>substract(num1,num2)\n</code></pre> <p>Example <code>substract(5,4)</code> returns <code>1</code></p> <p>multiply</p> <p>Multiplies two numeric values.</p> <pre><code>multiply(num1,num2)\n</code></pre> <p>Example <code>multiply(3,4)</code> returns <code>12</code></p> <p>divide</p> <p>Divides one numeric value (<code>num1</code>) by another (<code>num2</code>).</p> <pre><code>divide(num1,num2)\n</code></pre> <p>Example <code>divide(3,2)</code> returns <code>1.5</code></p> <p>mod</p> <p>Calculates the remainder of a division.</p> <pre><code>mod(num1,num2)\n</code></pre> <p>Example <code>divide(15,7)</code> returns <code>1</code></p> <p>power</p> <p>Calculates the power (<code>num2</code>) of a number (<code>num1</code>).</p> <pre><code>power(num1,num2)\n</code></pre> <p>Example <code>power(3,2)</code> returns <code>9</code></p>"},{"location":"scripts/sql/functions/#greater-less-comparisons","title":"Greater-Less comparisons","text":"<p>greater</p> <p>Checks if a numeric value (<code>num1</code>) is greater than another (<code>num2</code>) and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>greater(num1,num2)\n</code></pre> <p>Example <code>greater(2,3)</code> returns <code>false</code></p> <p>lessthan</p> <p>Checks if a numeric value (<code>num1</code>) is less than another (<code>num2</code>) and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>lessthan(num1,num2)\n</code></pre> <p>Example <code>lessthan(2,3)</code> returns <code>true</code></p> <p>greatereq</p> <p>Checks if a numeric value (<code>num1</code>) is greater than or equal to another (<code>num2</code>) and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>greatereq(num1,num2)\n</code></pre> <p>Example <code>greatereq(2,2)</code> returns <code>true</code></p> <p>lessthaneq</p> <p>Checks if a numeric value (<code>num1</code>) is less than or equal to another (<code>num2</code>) and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>lessthaneq(num1,num2)\n</code></pre> <p>Example <code>lessthaneq(2,2)</code> returns <code>true</code></p>"},{"location":"scripts/sql/functions/#equal-not-equal-comparisons","title":"Equal-Not equal comparisons","text":"<p>The functions work for both numbers and strings.</p> <p>equal</p> <p>Checks if two values (<code>num1</code>, <code>num2</code>) are equal and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>equal(num1,num2)\n</code></pre> <p>Example <code>equal(`Old price`,`New price`)</code> compares the content of the <code>Old price</code> and the <code>New price</code> columns and returns <code>true</code> or <code>false</code> accordingly</p> <p>unequal</p> <p>Checks if two values (<code>num1</code>, <code>num2</code>) are not equal and returns the logical value <code>true</code> or <code>false</code>.</p> <pre><code>unequal(num1,num2)\n</code></pre> <p>Example <code>unequal(`Single select`,\"Option 1\")</code> compares the content of the <code>Single select</code> column to the string \"Option 1\" and returns <code>true</code> or <code>false</code> accordingly</p>"},{"location":"scripts/sql/functions/#mathematical-functions","title":"Mathematical functions","text":"<p>Parameters must be numbers. If a string is passed as parameter, it will be converted to number.</p> <p>abs</p> <p>Returns the absolute value of a <code>number</code>.</p> <pre><code>abs(number)\n</code></pre> <p>Example <code>abs(-2)</code> returns <code>2</code></p> <p>ceiling</p> <p>Rounds a <code>number</code> to the nearest greater integer or to the nearest greater multiple of the specified <code>significance</code>. If either argument is non-numeric, the formula returns an empty value.</p> <pre><code>ceiling(number, significance)\n</code></pre> <p>Example <code>ceiling(2.14)</code> returns <code>3</code></p> <p>If the <code>number</code> is an exact multiple of the <code>significance</code>, then no rounding occurs. If the <code>number</code> and the <code>significance</code> are negative, then the rounding is away from 0. If the <code>number</code> is negative and the <code>significance</code> is positive, then the rounding is towards 0.</p> <p>Example <code>ceiling(-2.14, 4)</code> returns <code>0</code></p> <p>even</p> <p>Returns the nearest greater even <code>number</code>.</p> <pre><code>even(number)\n</code></pre> <p>Example <code>even(2.14)</code> returns <code>4</code></p> <p>exp</p> <p>Exponential function for Euler's <code>number</code> e. Returns the value of e to the power of <code>number</code>.</p> <pre><code>exp(number)\n</code></pre> <p>Example <code>exp(1)</code> returns <code>2.71828...</code></p> <p>floor</p> <p>Rounds a <code>number</code> to the nearest smaller integer or to the nearest smaller multiple of the specified <code>significance</code>. If either argument is non-numeric, the formula returns an empty value.</p> <pre><code>floor(number, significance)\n</code></pre> <p>Example <code>floor(2.86)</code> returns <code>2</code></p> <p>If the <code>number</code> is an exact multiple of the <code>significance</code>, then no rounding takes place. If the sign of the <code>number</code> is positive, then the rounding is towards 0. If the sign of the <code>number</code> is negative, then the rounding is away from 0.</p> <p>Example <code>floor(-3.14, 5)</code> returns <code>-5</code></p> <p>int</p> <p>Assigns the nearest smaller integer to a real <code>number</code>.</p> <pre><code>int(number)\n</code></pre> <p>Example <code>int(-3.14)</code> returns <code>-4</code></p> <p>lg</p> <p>Logarithm function with 10 as base.</p> <pre><code>lg(number)\n</code></pre> <p>Example <code>lg(100)</code> returns <code>2</code></p> <p>log</p> <p>Logarithm function with a definable <code>base</code>.</p> <pre><code>log(number, base)\n</code></pre> <p>Example <code>log(81, 3)</code> returns <code>4</code></p> <p>But if no <code>base</code> is given, this function works exactly like lg(), with 10 as <code>base</code>.</p> <p>Example <code>log(1000)</code> returns <code>3</code></p> <p>odd</p> <p>Returns the nearest greater odd <code>number</code>.</p> <pre><code>odd(number)\n</code></pre> <p>Example <code>odd(-2.14)</code> returns <code>-1</code></p> <p>round</p> <p>Rounds a <code>number</code> to the nearest integer. If no decimal place (<code>digits</code>) is specified, the <code>number</code> is rounded to an integer.</p> <pre><code>round(number, digits)\n</code></pre> <p>Example <code>round(3.14)</code> returns <code>3</code></p> <p>If a positive decimal place (<code>digits</code>) is given, the result will have <code>digits</code> decimals.</p> <p>Example <code>round(3.14, 1)</code> returns <code>3.1</code></p> <p>If a negative decimal place (<code>digits</code>) is given, the result is rounded to the left of the decimal point.</p> <p>Example <code>round(3.14, -3)</code> returns <code>0</code></p> <p>rounddown</p> <p>Rounds a <code>number</code> towards zero. If no decimal place (<code>digits</code>) is given, the <code>number</code> is rounded to an integer.</p> <pre><code>rounddown(number, digits)\n</code></pre> <p>Example <code>rounddown(3.12, 1)</code> returns <code>3.1</code></p> <p>roundup</p> <p>Rounds a <code>number</code> away from zero. If no decimal place (<code>digits</code>) is given, the <code>number</code> is rounded to an integer.</p> <pre><code>roundup(number, digits)\n</code></pre> <p>Example <code>roundup(-3.15)</code> returns <code>-4</code></p> <p>sign</p> <p>Checks whether a <code>number</code> is greater, equal or less than 0. Returns the values 1, 0 and -1 respectively. In other words: it returns the sign of a <code>number</code>, for '+', 'zero' and '-' with 1, 0, and -1 respectively.</p> <pre><code>sign(number)\n</code></pre> <p>Example <code>sign(-2)</code> returns <code>-1</code></p> <p>sqrt</p> <p>Returns the square root of a <code>number</code>.</p> <pre><code>sqrt(number)\n</code></pre> <p>Example <code>sqrt(81)</code> returns <code>9</code></p>"},{"location":"scripts/sql/functions/#text-functions","title":"Text functions","text":"<p>concatenate</p> <p>Combines several strings (<code>string1</code>, <code>string 2</code>, ...) into one single string.</p> <pre><code>concatenate(string1, string2, ...)\n</code></pre> <p>Example <code>concatenate(</code>Supplier<code>, \" has the product \",</code>Product<code>)</code> returns for example <code>Microsoft has the product GitHub</code> if <code>Supplier</code> column contains \"Microsoft\" and <code>Product</code> column contains \"GitHub\"</p> <p>exact (A\u2260a case sensitive)</p> <p>Checks whether two strings (<code>string1</code>, <code>string2</code>) are exactly identical. Returns the values <code>true</code> or <code>false</code> respectively.</p> <pre><code>exact(string1, string2)\n</code></pre> <p>Example <code>exact('SeaTable', 'Seatable')</code> returns <code>false</code></p> <p>find (A\u2260a case sensitive)</p> <p>Returns the start position of a string (<code>findString</code>) within another string (<code>sourceString</code>). The numbering starts at 1. If not found, 0 is returned. If the start position (<code>startPosition</code>) is given as decimal, it is rounded down. If the cell in the column for the keyword (<code>findString</code>) is empty, 1 is returned. If the cell in the column for the target string (<code>sourceString</code>) is empty, an empty value ('') is returned.</p> <pre><code>find(findString, sourceString, startPosition)\n</code></pre> <p>Example <code>find('Sea', 'seaTable', 1)</code> returns <code>0</code></p> <p>The search will start from the given <code>startPosition</code>. This startPosition<code>has no influence on the result: it always returns the absolute start position. If the '</code>startPosition<code>' of the string to be searched for (</code>findString<code>) is given after the actual start position of the string (</code>sourceString`), 0 is returned, since nothing was found from this position.</p> <p>Example <code>find('table', 'big table', 4)</code> returns <code>5</code></p> <p>left</p> <p>Returns the specified number (<code>count</code>) of characters at the beginning of a <code>string</code>.</p> <pre><code>left(string, count)\n</code></pre> <p>Example <code>left('SeaTable', 3)</code> returns <code>Sea</code></p> <p>len</p> <p>Returns the number of characters in a <code>string</code>.</p> <pre><code>len(string)\n</code></pre> <p>Example <code>len('SeaTable')</code> returns <code>8</code></p> <p>lower</p> <p>Converts a character <code>string</code> to lower case letters.</p> <pre><code>lower(string)\n</code></pre> <p>Example <code>lower('German)</code> returns <code>german</code></p> <p>mid</p> <p>Returns the specified number (<code>count</code>) of characters from the specified start position (<code>startPosition</code>) of a <code>string</code>.</p> <pre><code>mid(string, startPosition, count)\n</code></pre> <p>Example <code>mid('SeaTable is the best', 1, 8)</code> returns <code>SeaTable</code></p> <p>Start position (<code>startPosition</code>) and <code>count</code> must not be empty, negative or zero. However, if start position (<code>startPosition</code>) and number (<code>count</code>) are given as decimal, they are rounded down. Too much <code>count</code> is ignored.</p> <p>Example <code>mid('SeaTable is the best.', 10.9, 27.3)</code> returns <code>is the best.</code></p> <p>replace</p> <p>Replaces a part (<code>count</code>) of a character string (<code>sourceString</code>) from a certain start position (<code>startPosition</code>) with another character string (<code>newString</code>). The number (<code>count</code>) of characters is only taken into account for the old string (<code>sourceString</code>), but not for the new string (<code>newString</code>).</p> <pre><code>replace(sourceString, startPosition, count, newString)\n</code></pre> <p>Example <code>replace('SeaTable is the best.', 1, 8, 'Seafile')</code> returns <code>Seafile is the best.</code></p> <p>If number (<code>count</code>) is given as zero, the new string (<code>newString</code>) is simply added to the old string (<code>sourceString</code>) from the start position (<code>startPosition</code>).</p> <p>Example <code>replace('SeaTable is the best.', 1, 0, 'Seafile')</code> returns <code>SeafileSeaTable is the best.</code></p> <p>rept</p> <p>Repeats a <code>string</code> as often (<code>number</code>) as specified.</p> <pre><code>rept(string, number)\n</code></pre> <p>Example <code>rept('Sea ', 3)</code> returns <code>SeaSeaSea</code></p> <p>right</p> <p>Returns the specified number (<code>count</code>) of characters at the end of a <code>string</code>.</p> <pre><code>right(string, count)\n</code></pre> <p>Example <code>right('SeaTable', 5)</code> returns <code>Table</code></p> <p>search ((A=a NOT case sensitive))</p> <p>Returns the start position of a string (<code>findString</code>) within another string (<code>sourceString</code>). The numbering starts at 1. If not found, 0 is returned. If the start position (<code>startPosition</code>) is given as decimal, it is rounded down. If the cell in the column for the keyword (<code>findString</code>) is empty, 1 is returned. If the cell in the column for the target string (<code>sourceString</code>) is empty, an empty value ('') is returned.</p> <pre><code>search(findString, sourceString, startPosition)\n</code></pre> <p>Example <code>search('Sea', 'seaTable', 1)</code> returns <code>1</code></p> <p>The search will start from the given <code>startPosition</code>. This <code>startPosition</code> has no influence on the result: it always returns the absolute start position. If the <code>startPosition</code> of the character string to be searched for (<code>findString</code>) is given after the actual start position of the character string (<code>sourceString</code>), 0 is returned, since nothing was found from this position.</p> <p>Example <code>search('table', 'big table', 6)</code> returns <code>0</code></p> <p>substitute (A\u2260a case sensitive)</p> <p>Replaces existing text (<code>oldString</code>) with new text (<code>newString</code>) in a string (<code>sourceString</code>). If there is more than one text (<code>oldString</code>) in the string (<code>sourceString</code>), only the <code>index</code>-th text is replaced.</p> <pre><code>substitute(sourceString, oldString, newString, index)\n</code></pre> <p>Example <code>substitute('SeaTableTable', 'Table', 'file', 1)</code> returns <code>SeafileTable</code></p> <p>If the <code>index</code> is given as 0 or not, all found text (<code>oldString</code>) will be replaced by the new text (<code>newString</code>).</p> <p>Example <code>substitute('SeaTableTable', 'Table', 'file')</code> returns <code>Seafilefile</code></p> <p>T</p> <p>Checks whether a <code>value</code> is text. If so, the text is returned. If no, the return <code>value</code> is empty.</p> <pre><code>T(value)\n</code></pre> <p>Example <code>T('123')</code> returns <code>123</code></p> <p>text</p> <p>Converts a <code>number</code> into text and <code>format</code>s it in the specified <code>format</code>. The <code>format</code> can be percent, number, dollar, euro or yuan.</p> <pre><code>text(number, format)\n</code></pre> <p>Example <code>text(150, 'euro')</code> returns <code>\u20ac150</code></p> <p>When a <code>number</code> is converted directly to percent, its absolute value is retained. In other words, 50 is converted into 5000%. But if you want 50%, you have to divide the <code>number</code> by 100 before the conversion.</p> <p>Example <code>text(50, 'percent')</code> returns <code>5000%</code></p> <p>trim</p> <p>Removes spaces at both the beginning and the end of a <code>string</code>.</p> <pre><code>trim(string)\n</code></pre> <p>Example <code>trim(' SeaTable ')</code> returns <code>SeaTable</code></p> <p>upper</p> <p>Converts a <code>string</code> to uppercase letters.</p> <pre><code>upper(string)\n</code></pre> <p>Example <code>upper('German)</code> returns <code>GERMAN</code></p> <p>value</p> <p>Converts a text (<code>string</code>) representing a number into a number.</p> <pre><code>value(string)\n</code></pre> <p>Example <code>value('123')</code> returns <code>123</code></p>"},{"location":"scripts/sql/functions/#date-functions","title":"Date functions","text":"<p>When passing a parameter with time or date type, you can specify a constant in \"2025-09-01 12:00:01\" or \"2025-09-01\" format. When you query the result of a date function in SQL, the result will be converted to a string in RFC3339 format, e.g. \"2025-09-03T00:00:00+02:00\". Please note that if a date function returns a date, it cannot be used as parameter for text or maths functions.</p> <p>date</p> <p>Returns a date in international format (ISO) from entered <code>year</code>, <code>month</code> and <code>day</code>. If the <code>year</code> is entered with two digits, it is automatically understood as a year in the 1900s. If the number of the <code>month</code> or <code>day</code> is too large (greater than 12 or 31 respectively), these months or days are automatically converted to the next year or month.</p> <pre><code>date(year, month, day)\n</code></pre> <p>Example <code>date(2025, 1, 3)</code> returns <code>2025-01-03T00:00:00+02:00</code></p> <p>dateAdd</p> <p>Adds the specified number (<code>count</code>) of years ('years'), months ('months'), weeks ('weeks'), days ('days'), hours ('hours'), minutes ('minutes') or seconds ('seconds') to a datetime (<code>date</code>).</p> <pre><code>dateAdd(date, count, unit)\n</code></pre> <p>Example <code>dateAdd('2024-02-03', 2, 'days')</code> returns <code>2024-02-05T00:00:00+02:00</code></p> <p>Tip: if you want to add a complex duration (<code>count</code>) such as 1 day 12 hours, you can convert it to e.g. 24+12=36 hours ('hours') and enter it into the formula as a uniform duration (<code>count</code>). The duration is converted to the smallest <code>unit</code>: in this case, hours.</p> <p>Example <code>dateAdd('2024-09-04 13:05:18', 36, 'hours') OR dateAdd(</code>form submission<code>, 36, 'hours')</code> returns <code>2024-09-06T01:05:18+02:00</code></p> <p>dateDif</p> <p>Calculates the seconds, days, months, or years between two date values. The optional <code>unit</code> argument can be one of the following: S (seconds), D (full days), M (full months), Y (full years), YD (full days, ignoring years), YM (full months, ignoring days and years), MD (full days, ignoring months and years). If the <code>startDate</code> is empty, a default value of \"1900-01-01\" will be set. If both date values are empty, it will return 0.</p> <pre><code>dateDif(startDate, endDate, unit)\n</code></pre> <p>Example <code>dateDif('2023-01-01', '2025-01-01','Y')</code> returns <code>2</code></p> <p>Example <code>dateDif('2024-10-11', '2025-12-12', 'M')</code> returns <code>14</code></p> <p>day</p> <p>Returns the day of a <code>date</code> as a number. The returned number is between 1 and 31.</p> <pre><code>day(date)\n</code></pre> <p>Example <code>day('2025-01-03')</code> returns <code>3</code></p> <p>eomonth</p> <p>Determines the date of the last day of <code>n</code>th month before or after (depending on the sign of <code>n</code>) the specified date (<code>startDate</code>). If <code>n</code> is 0, the last day of the month is simply determined.</p> <pre><code>eomonth(startDate, n)\n</code></pre> <p>Example <code>eomonth('2025-01-01', 1)</code> returns <code>2025-02-28T00:00:00+02:00</code></p> <p>Example <code>eomonth('2025-01-01', -1)</code> returns <code>2024-12-31T00:00:00+02:00</code></p> <p>hour</p> <p>Returns the hour of a <code>date</code> as a number. The number returned is between 0 and 23.</p> <pre><code>hour(date)\n</code></pre> <p>Example <code>hour('2025-02-14 13:14:52')</code> returns <code>13</code></p> <p>If no hour is contained in the time specification (<code>date</code>), 0 is returned.</p> <p>Example <code>hour('2025-02-14')</code> returns <code>0</code></p> <p>hours</p> <p>Returns the number of hours between two date values (<code>startDate</code> and <code>endDate</code>). The minutes in the date values are not taken into account.</p> <pre><code>hours(startDate, endDate)\n</code></pre> <p>Example <code>hours('2025-02-14 13:14', '2025-02-14 15:14')</code> returns <code>2</code></p> <p>If no hours are included in the time specification (<code>startDate</code> or <code>endDate</code>), 0 o'clock on this day is automatically assumed.</p> <p>Example <code>hours('2020-02-14', '2020-02-14 15:14')</code> returns <code>15</code></p> <p>minute</p> <p>Returns the minutes of a time specification (<code>date</code>) as a number. The number returned is between 0 and 59.</p> <pre><code>minute(date)\n</code></pre> <p>Example <code>minute('2025-02-14 13:14:52')</code> returns <code>14</code></p> <p>If no minutes are included in the time (<code>date</code>), 0 is returned.</p> <p>Example <code>minute('2025-02-14)</code> returns <code>0</code></p> <p>month</p> <p>Returns the month of a <code>date</code> as a number. The returned number is between 1 (January) and 12 (December).</p> <pre><code>month(date)\n</code></pre> <p>Example <code>month('2025-02-14 13:14:52')</code> returns <code>2</code></p> <p>months</p> <p>Returns the number of months between two date values (<code>startDate</code> and <code>endDate</code>). The days and time in the date values are not taken into account.</p> <pre><code>months(startDate, endDate)\n</code></pre> <p>Example <code>months('2025-02-01 13:14', '2025-03-31 15:54')</code> returns <code>1</code></p> <p>networkdays</p> <p>Returns the number of full working days between two dates (<code>startDate</code> and <code>endDate</code>). You can also define holidays other than Saturday and Sunday (<code>holiday1</code>, <code>holiday2</code>, etc.), which are also deducted. If you do not want to include public holidays, you can simply omit these parameters.</p> <pre><code>networkdays(startDate, endDate, holiday1, holiday2, ...)\n</code></pre> <p>Example <code>networkdays('2025-01-01', '2025-01-07','2025-01-01')</code> returns <code>4</code></p> <p>Please note that the specified last day (<code>endDate</code>) is also included in the formula. Thus, for the following example, three working days are counted: the 7th, 8th and 9th of September, 2025.</p> <p>Example <code>networkdays('2025-09-08', '2025-09-10')</code> returns <code>3</code></p> <p>now</p> <p>Returns the current date and time.</p> <pre><code>now()\n</code></pre> <p>Example <code>now()</code> returns <code>2025-09-07T12:59+02:00</code></p> <p>second</p> <p>Returns the seconds of a time (<code>date</code>) as a number. The number returned is between 0 and 59.</p> <pre><code>second(date)\n</code></pre> <p>Example <code>second('2025-02-14 13:14:52')</code> returns <code>52</code></p> <p>today</p> <p>Returns the current date.</p> <pre><code>today()\n</code></pre> <p>Example <code>today()</code> returns <code>2020-09-07T00:00:00+02:00</code></p> <p>This function is handy for calculating time between a certain datetime and now. On each reload of the Base or recalculation, the calculation is updated.</p> <p>Example <code>networkdays('2025-10-01', today())</code> returns <code>4</code></p> <p>weekday</p> <p>Returns the weekday of a <code>date</code> as a number. The returned number between 1 and 7, where you can define the first day of the week (<code>weekStart</code>). <code>weekStart</code> is Sunday by default, it can also be set to Monday ('Monday' or 'monday', not case sensitive).</p> <pre><code>weekday(date, weekStart)\n</code></pre> <p>Example <code>weekday('2025-01-01', 'Monday')</code> returns <code>3</code></p> <p>If no <code>weekStart</code> is given or if a <code>weekStart</code> other than 'Monday' or 'Sunday' is given, the default value ('Sunday') is used. So if it should be 'Monday', enter 'Monday'; if it should be 'Sunday', you can omit this parameter.</p> <p>Example <code>weekday('2025-01-01', 'Thursday') OR weekday('2025-01-01')</code> returns <code>4</code></p> <p>weeknum</p> <p>Returns the absolute week number of a <code>date</code> as a number. The returned number is between 1 and 53, where you can define the first day of the week (<code>return_type</code>). Enter the number 1 or 2, or 11 to 17, and 21 as <code>return_type</code> to define the start of a week: 1/Sunday, 2/Monday, 11/Monday, 12/Tuesday, 13/Wednesday, 14/Thursday, 15/Friday, 16/Saturday, 17/Sunday. If you want the week number to be returned according to ISO standard, specify the number of 21 as <code>return_type</code>, or use the function <code>isoweeknum</code>.</p> <pre><code>weeknum(date, return_type)\n</code></pre> <p>Example <code>weeknum('2025-01-12', 11)</code> returns <code>2</code></p> <p>If no '<code>return_type</code>' is given, it is always assumed to be 'Sunday'.</p> <p>Example <code>weeknum('2025-01-12')</code> returns <code>3</code></p> <p>year</p> <p>Returns the year of a <code>date</code> as a number.</p> <pre><code>year(date)\n</code></pre> <p>Example <code>year('2025-01-01')</code> returns <code>2025</code></p> <p>startofweek</p> <p>Returns the first day of the week in which the <code>date</code> is located. <code>weekStart</code> is Sunday by default, it can also be set to Monday ('Monday' or 'monday', not case sensitive).</p> <pre><code>startofweek(date, weekStart)\n</code></pre> <p>Example <code>startofweek('2025-04-28')</code> returns <code>2021-4-27T00:00:00+02:00</code></p> <p>quarter</p> <p>Returns the quarter of the <code>date</code>, the return value is 1, 2, 3, 4.</p> <pre><code>quarter(date)\n</code></pre> <p>Example <code>quarter('2025-01-01')</code> returns <code>1</code></p> <p>isodate</p> <p>Returns the ISO string representation of the <code>date</code>.</p> <pre><code>isodate(date)\n</code></pre> <p>Example <code>isodate('2025-01-01 11:00:00')</code> returns <code>2025-01-01</code></p> <p>isomonth</p> <p>Returns the ISO string representation (of the )year and month) of the month of a specified <code>date</code>.</p> <pre><code>isomonth(date)\n</code></pre> <p>Example <code>isomonth('2025-01-01 11:00:00')</code> returns <code>2025-01</code></p>"},{"location":"scripts/sql/functions/#geo-functions","title":"Geo functions","text":"<p>country</p> <p>Returns the country or region of a geolocation-type column. (Since version 5.1.0)</p> <pre><code>country(geolocation)\n</code></pre> <p>Example <code>country(`Country of residence`)</code> returns <code>Germany</code></p>"},{"location":"scripts/sql/functions/#logical-functions","title":"Logical functions","text":"<p>and</p> <p>Checks if all arguments (<code>logical1</code>, <code>logical2</code>, ...) are true (valid, not empty and not equal to zero). If yes, <code>true</code> is returned, otherwise <code>false</code>.</p> <pre><code>and(logical1, logical2, ...)\n</code></pre> <p>Example <code>and(1, '', 2)</code> returns <code>false</code></p> <p>if</p> <p>Checks if an argument (<code>logical</code>) is true and returns <code>trueValue</code> or <code>falseValue</code> accordingly.</p> <pre><code>if(logical, trueValue, falseValue)\n</code></pre> <p>Example <code>if(1&gt;2, 3, 4)</code> returns <code>4</code></p> <p>For the condition (<code>logical</code>) only a comparison is allowed. If <code>falseValue</code> is omitted<code>: it will return the first value (</code>trueValue<code>) if the condition (</code>logical<code>) is true; and it will return an empty value ('') if the condition (</code>logical`) is false.</p> <p>Example <code>if(</code>Budget<code>&gt;</code>Price<code>, 'Yes')</code> returns <code>Yes</code> or ''</p> <p>ifs</p> <p>Checks if one or more conditions (<code>logical1</code>, <code>logical2</code>, ...) are true and returns a value (<code>value1</code>, <code>value2</code>, ...) that matches the first true condition.</p> <pre><code>ifs(logical1, value1, logical2, value2, ...)\n</code></pre> <p>Example <code>ifs( 1&gt;2, 3, 5&gt;4, 9)</code> returns <code>9</code></p> <p>not</p> <p>Inverts the logical value (<code>boolean</code>). In other words: converts true to false and false to true.</p> <pre><code>not(boolean)\n</code></pre> <p>Example <code>not(and(1, '', 2))</code> returns <code>true</code></p> <p>or</p> <p>Checks if at least 1 of the arguments (<code>logical1</code>, <code>logical2</code>, ...) is true (valid, not empty and not equal to zero), and returns <code>true</code> in this case. If all arguments are false, then returns <code>false</code>.</p> <pre><code>or(logical1, logical2, ...)\n</code></pre> <p>Example <code>or(1,'',2)</code> returns <code>true</code></p> <p>switch</p> <p>Evaluates an expression (<code>logical</code>) against a list of values (matcher) and returns the result (value) corresponding to the first matching value. If there is no match, an optional <code>default</code> value is returned. At least 3 parameters (<code>logical</code>, matcher, value) must be specified.</p> <pre><code>switch(logical, matcher1, value1, matcher2, value2, ..., default)\n</code></pre> <p>Example <code>switch(</code>grades<code>, 1, 'very good', 2, 'good', 3, 'satisfactory', 4, 'passed', 'failed')</code> returns <code>very good</code></p> <p>If there are several identical values in the value list (matcher), only the first hit is taken into account.</p> <p>Example <code>switch(int(68/10), 6, 'OK', 6, 'KO')</code> returns <code>OK</code></p> <p>xor</p> <p>Returns the logical inequality of all arguments. In other words, returns <code>true</code> fi the number of true arguments is odd.</p> <pre><code>xor(logical1, logical2, ...)\n</code></pre> <p>Example <code>xor(1, 0, 2&lt;1)</code> returns <code>true</code></p>"},{"location":"scripts/sql/functions/#statistical-functions","title":"Statistical functions","text":"<p>average</p> <p>Returns the average of the numbers (<code>number1</code>, <code>number2</code>, ...).</p> <pre><code>average(number1, number2, ...)\n</code></pre> <p>Example <code>average(1, 2, 3, 4, 5)</code> returns <code>3</code></p> <p>counta</p> <p>Counts the number of non-empty cells (<code>textORnumber1</code>, <code>textORnumber2</code>, ...). These cells can be text or numbers. In this example, 1 and 2 are numbers, '3' is text, and '' is an empty value.</p> <pre><code>counta(textORnumber1, textORnumber2, ...)\n</code></pre> <p>Example <code>counta(1, '', 2, '3')</code> returns <code>3</code></p> <p>countall</p> <p>Counts the number of elements (<code>textORnumber1</code>, <code>textORnumber2</code>, ...) including numbers (1, 2), text ('3') and empty cells ('').</p> <pre><code>countall(textORnumber1, textORnumber2, ...)\n</code></pre> <p>Example <code>countall(1, '', 2, '3')</code> returns <code>4</code></p> <p>countblank</p> <p>Counts the number of empty cells.</p> <pre><code>countblank(textORnumber1, textORnumber2, ...)\n</code></pre> <p>Example <code>countblank(1, '', 2, '3')</code> returns <code>1</code></p> <p>countItems</p> <p>Counts the number of items in a <code>column</code>. The supported <code>column</code> types are multiple select, collaborator, file, image (available since version 2.7.0).</p> <pre><code>countItems(column)\n</code></pre> <p>Example <code>countItems(column_name)</code> returns <code>2</code></p>"},{"location":"scripts/sql/introduction/","title":"SQL in SeaTable","text":"<p>SQL queries are the most powerful way access data stored in a base. If your not familiar with SQL syntax, we recommend using first the SQL query plugin. If some tables in a base are archived, archived rows are also queried, as well as rows that are not archived yet.</p> <p>Backticks for table or column names containing or special characters or using reserved words</p> <p>For SQL queries, you can use numbers, special characters or spaces in the names of your tables and columns. However, you'll have to escape these names with backticks in order for your query to be correctly interpreted, for example <code>SELECT * FROM `My Table`</code>. </p> <p>Similarly, if some of your of table or column names are the same as SQL function names (for example a date-type column named <code>date</code>), you'll also have to escape them in order for the query interpreter to understand that it's not a function call missing parameters, but rather a table or column name.</p>"},{"location":"scripts/sql/introduction/#supported-sql-syntax","title":"Supported SQL Syntax","text":"<p>Currently only <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements are supported (the last three require version 2.7 or later). You'll find below the syntax for these statements. </p> <p>Please note that the SQL syntax is case insensitive: we use only upper-cased instructions here for ease of reading (differentiating SQL instructions from table or column names).</p>"},{"location":"scripts/sql/introduction/#retrieving-rows","title":"Retrieving row(s)","text":"<p>SELECT</p> <p>The <code>SELECT</code> statement allows you to retrieve an eventually filtered, sorted and/or grouped list of the rows from a specific table. Each returned row is a JSON object. The keys of the object are the column keys, NOT the column names. To use column names as keys, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be <code>true</code> (which is the default value when using <code>base.query</code> for both JavaScript and Python scripts). The syntax of <code>SELECT</code> statement is:</p> <pre><code>SELECT [Column List] FROM tableName [Where Clause] [Group By Clause] [Having Clause] [Order By Clause] [Limit Option]\n</code></pre> <p><code>[Column List]</code> is the list of columns you want to retrieve, separated by commas. If you want to retrieve all the columns, you can use a wildcard (<code>*</code>). You can consult specific sections for Where, Group By, Having or Order By clauses <code>Limit Option</code> uses MySQL format. The general syntax is <code>LIMIT ... OFFSET ...</code>. This parameters are optional. Unless you specify a higher limit, the method returns a maximum of 100 rows. The maximum number of rows returned is 10000 no matter the limit specified in the SQL statement. The <code>OFFSET</code> will help you retrieving the following rows in other queries</p> <p>Example <code>SELECT * FROM Table1 LIMIT 10000</code> returns the first 10000 rows, <code>SELECT * FROM Table1 LIMIT 10000 OFFSET 10000</code> returns the next 10000 rows</p> <p>Since version 4.3, basic implicit join query is supported, for example:</p> <pre><code>SELECT ... FROM Table1, Table2 WHERE Table1.column1 = Table2.column2 AND ...\n</code></pre> <p>The join queries have the following restrictions:</p> <ul> <li>You must not explicitly write JOIN keyword</li> <li>Only inner join is supported; left join, right join, and full join are not supported.</li> <li>Tables in the <code>FROM</code> clause should be unique (no duplicate tables).</li> <li>Each table in the <code>FROM</code> clause should be associated with at least one join condition.</li> <li>Join conditions should be placed in the <code>WHERE</code> clause, and eventually connected with one or more <code>AND</code> operators.</li> <li>Join conditions can only use equality operator on columns, e.g. <code>Table1.column1 = Table2.column2</code>.</li> <li>Columns in join conditions must be indexed, unless the table is not archived.</li> </ul> <p>Field aliases</p> <p>Field alias with <code>AS</code> syntax is supported. For example, <code>SELECT table.a as a FROM table</code> returns rows whose first column is keyed by \"a\". There are two important points to note however:</p> <ul> <li>Field alias can be referred in <code>GROUP BY</code>, <code>HAVING</code> and <code>ORDER BY</code> clauses. For example, <code>SELECT i.amount AS a, COUNT(*) FROM Invoices AS i GROUP BY a HAVING a &gt; 100</code> is valid.</li> <li>Field alias cannot be referred in <code>where</code> clause. E.g., <code>select t.registration as r, count(*) from t group by r where r &gt; \"2020-01-01\"</code> will report syntax error.</li> </ul> <p>Aggregation functions</p> <p>While retrieving rows, you can add aggregation functions to the list of columns if you specify a GroupByClause. The available functions are:</p> <ul> <li><code>COUNT</code> returns the number of non-empty values in a specific column or for all columns with <code>COUNT(*)</code></li> <li><code>SUM</code> computes the sum of values in a specific column, for example <code>SUM(Invoices.Amount)</code></li> <li><code>MAX</code> retrieves the greatest value in a specific column, for example <code>MAX(Invoices.Amount)</code></li> <li><code>MIN</code> retrieves the smallest value in a specific column, for example <code>MIN(Invoices.Amount)</code></li> <li><code>AVG</code> computes the average of non-empty values in a specific column, for example <code>AVG(Invoices.Amount)</code></li> </ul> <p>Example</p> <pre><code>SELECT Customer, SUM(Amount) from Invoices GROUP BY Customer\n</code></pre>"},{"location":"scripts/sql/introduction/#modifying-database-content","title":"Modifying database content","text":"<p>INSERT</p> <p>Enterprise subscription needed</p> <p><code>INSERT</code> requires Big Data storage support, which is available only with an Enterprise subscription.</p> <p><code>INSERT</code> allows you to append a new row to a table. <code>INSERT</code> statement only supports bases that have been archived. The rows will be inserted into big-data storage. It'll return error if the base is not archived yet. </p> <p>If you want to insert rows in a non-archived base, please use the API dedicated functions (e.g. the Python API).</p> <pre><code>INSERT INTO table_name [column_list] VALUES value_list [, ...]\n</code></pre> <ul> <li><code>column_list</code> is a list of column names surrounded by parentheses. If omitted, it defaults to all updatable columns.</li> <li><code>value_list</code> is a list of values surrounded by parentheses. Values must be in the same order as the column list, for example: <code>(1, \"2\", 3.0)</code>.</li> <li>Columns with multiple values, such as \"multiple select\"-type column , requires values to be surrounded by parentheses, for example: <code>(1, \"2\", 3.0, (\"foo\", \"bar\"))</code>.</li> <li>Values of \"single select\" and \"multiple select\"-type columns must be option names, not option keys.</li> <li> <p>Few column types are not allowed to insert:</p> <ul> <li>built-in columns, such as <code>_id</code>, <code>_ctime</code>.</li> <li>image, file, formula, link, link-formula, geolocation, auto-number, button</li> </ul> </li> </ul> <p>Example</p> <pre><code>INSERT INTO Table1 (Name, Age) values ('Erika', 38)\n</code></pre> <p>UPDATE</p> <p><code>UPDATE</code> allows you to update one or multiple existing rows of a table. Unlike the <code>INSERT</code> statement, <code>UPDATE</code> allows you to update rows in both normal and big-data storage. <code>WhereClause</code> is optional. However, keep in mind that if omitted, all rows will be updated!</p> <pre><code>UPDATE table_name SET column_name = value [, ...] [WhereClause]\n</code></pre> <ul> <li>Columns with multiple values, such as \"multiple select\"-type column , requires values to be surrounded by parentheses, for example: <code>(\"foo\", \"bar\")</code>.</li> <li>Values of \"single select\" and \"multiple select\"-type columns must be option names, not option keys.</li> <li> <p>Few column types are not allowed to update:</p> <ul> <li>built-in columns, such as <code>_id</code>, <code>_ctime</code>.</li> <li>image, file, formula, link, link-formula, geolocation, auto-number, button</li> </ul> </li> </ul> <p>Example</p> <pre><code>UPDATE INTO Contacts SET Adult=true WHERE Age&gt;=18\n</code></pre> <p>Example</p> <pre><code>UPDATE INTO Contacts SET Adult=true, `Age group`=\"18+\" WHERE Age&gt;=18\n</code></pre> <p>If <code>Age group</code> is a \"single select\"-type column, the option you want to select (here \"18+\") has to exist already.</p> <p>DELETE</p> <p><code>DELETE</code> allows you to delete one or multiple existing rows of a table. Unlike the <code>INSERT</code> statement, <code>DELETE</code> allows you to delete rows in both normal and big-data storage. <code>WhereClause</code> is optional. However, keep in mind that if omitted, all rows will be deleted!</p> <pre><code>DELETE FROM table_name [WhereClause]\n</code></pre> <p>Example</p> <pre><code>DELETE FROM Contacts WHERE Age&lt;18\n</code></pre>"},{"location":"scripts/sql/introduction/#where-group-by-having-and-order-by-clauses","title":"WHERE, GROUP BY, HAVING and ORDER BY clauses","text":"<p>WHERE clause</p> <p>Most SQL syntax can be used in the <code>WHERE</code> clause, including arithmetic expressions, comparison operators, <code>[NOT] LIKE</code>, <code>IN</code>, <code>BETWEEN ... AND ...</code>, <code>AND</code>, <code>OR</code>, <code>NOT</code>, <code>IS [NOT] TRUE</code>, <code>IS [NOT] NULL</code>.</p> <ul> <li>Arithmetic expressions only support numbers.</li> <li>Time constants should be strings in ISO format (e.g. \"2020-09-08 00:11:23\"). Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\").</li> </ul> <p>GROUP BY clause</p> <p><code>GROUP BY</code> uses strict syntax. The selected fields must appear in the clause list, except for aggregation functions (<code>COUNT</code>, <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>AVG</code>) and formulas (see extended syntax section below).</p> <p>HAVING clause</p> <p><code>HAVING</code> filters rows resulting from the <code>GROUP BY</code> clause. Only fields referred in the <code>GROUP BY</code> clause or aggregation functions (such as \"SUM\") can be used in <code>HAVING</code> clause. Other syntax is the same as specified for the <code>WHERE</code> clause.</p> <p>ORDER BY clause</p> <p>Fields in <code>ORDER BY</code> list must be a column or an expression in the selected fields. For example, <code>select a from table order by b</code> is invalid; while <code>select a, b from table order by b</code> and <code>select abs(a), b from table order by abs(a)</code> are valid.</p>"},{"location":"scripts/sql/introduction/#like-and-between-operators","title":"LIKE and BETWEEN operators","text":"<p>LIKE operator</p> <p><code>LIKE</code> only supports strings. The key word <code>ILIKE</code> can be used instead of <code>LIKE</code> to make the match case insensitive. The percent sign <code>%</code> you will use in the <code>LIKE</code> expression represents zero, one, or multiple characters.</p> <p>Example <pre><code>SELECT `Full Name` from Contacts WHERE `Full Name` LIKE \"% M%\"\n</code></pre> returns every records with a last name starting with M (considering that the <code>Full Name</code> fields is actually composed like \"<code>First Name</code> <code>Last Name</code>\")</p> <p>BETWEEN operator</p> <p><code>BETWEEN lowerLimit AND upperLimit</code> only supports numbers and time. <code>lowerLimit</code> and <code>upperLimit</code> are included in the search. They have to be in the right order (if <code>upperLimit</code>&lt;<code>lowerLimit</code>, no records will be found).</p> <p>Example <pre><code>SELECT * from Contacts WHERE Age BETWEEN 18 AND 25\n</code></pre> returns every records with a last name starting with M (considering that the <code>Full Name</code> fields is actually composed like <code>First Name</code> <code>Last Name</code>)</p>"},{"location":"scripts/sql/introduction/#data-types","title":"Data types","text":""},{"location":"scripts/sql/introduction/#seatable-sql-mapping","title":"SeaTable &lt;&gt; SQL mapping","text":"<p>Below is the mapping of SeaTable column types to SQL data types.</p> SeaTable column type SQL data type Query result format Use in WHERE clause Use in GROUP BY / ORDER BY clause text String Supported Supported long-text String Raw text in Markdown format Supported Supported number Float Supported Supported single-select String Returned rows contain the option name. Supported. Refer an option by its name. E.g. <code>WHERE single_select = \"New York\"</code>. Order by the definition order of the options multiple-select List of strings Returned rows contain the option names. Supported. Refer an option by its name. E.g. <code>WHERE multi_select = \"New York\"</code>. More details in the \"List types\" section below. More details in the \"List types\" section below. checkbox Boolean Supported Supported date Datetime Time strings in RFC 3339 format Supported. Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported image List of URL for images A JSON array with image URLs as elements Supported. More details in the \"List types\" section below. Supported. More details in the \"List types\" section below. file Will be returned as JSON format string when queried. Not supported Not Supported Not Supported collaborator List of user IDs Format is like 5758ec...6d3388@auth.local. If you need user names, you have to convert with SeaTable APIs. Supported. More details in the \"List types\" section below. Supported. More details in the \"List types\" section below. link to other records List of linked rows Supported. More details in the \"List types\" section below. Supported. More details in the \"List types\" section below. Supported. More details in the \"List types\" section below. formula The type depends on the return value of the formula. Depends on the type of the return value Depends on the type of the return value Depends on the type of the return value _creator User ID as string Format is like 5758ec...6d3388@auth.local. If you need user names, you have to convert with SeaTable APIs. Supported Supported _ctime Datetime Time strings in RFC 3339 format Supported. Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported _last_modifier User ID as string Format is like 5758ec...6d3388@auth.local. If you need user names, you have to convert with SeaTable APIs. Supported Supported _mtime Datetime Time strings in RFC 3339 format Supported. Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported auto number String Supported Supported url String Supported Supported email String Supported Supported duration Float Returned in seconds Supported Supported"},{"location":"scripts/sql/introduction/#list-types","title":"List types","text":"<p>In SeaTable, two categories of column types are list types (columns with multiple values):</p> <ul> <li>Built-in list types: including multiple selection, image, file, collaborator and link to other records.</li> <li>Formula columns dealing with linked records (using either <code>{link.column}</code> or <code>lookup</code>) and link formula columns whose formula is <code>lookup</code>, <code>findmin</code> or <code>findmax</code>.</li> </ul> <p>When referring to a list-type column in a <code>WHERE</code> clause, the following rules apply, depending on the type for the list elements. If an operator is not listed below, it's unsupported.</p> Element Type Operator Rule string <code>IN</code>, extended list operators (e.g. <code>HAS ANY OF</code>) Follow the rules of the operator. string <code>LIKE</code>, <code>ILIKE</code> Always take the first element for comparison; if there is no element, use an empty string (\"\"). string <code>IS NULL</code> Return <code>true</code> when the list is empty or when there is no data in the cell. string =, != Always take the first element for comparison; if there is no element, use an empty string (\"\"). float <code>IN</code>, extended list operators (e.g. <code>HAS ANY OF</code>) Follow the rules of the operator. float =, !=, &lt;, &lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. float <code>IS NULL</code> Return <code>true</code> when the list is empty or when there is no data in the cell. float Arithmetics operations such as +, -, * or / Use the first element for calculation. Datetime <code>IN</code>, extended list operators (e.g. <code>HAS ANY OF</code>) Follow the rules of the operator. Datetime =, !=, &lt;, &lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. Datetime <code>IS NULL</code> Return <code>true</code> when the list is empty or when there is no data in the cell. bool <code>IS TRUE</code> Always take the first element for comparison; return false if there are no elements. linked record Follow the rules for the type of the display column. <p>When a list column is returned in a selected field, only the ten first elements are returned.</p> <p>When used in <code>GROUP BY</code> or <code>ORDER BY</code> clauses, the elements for each list will first be sorted in ascending order, then the lists will be sorted by the rules below:</p> <ul> <li>Compare the elements one by one, list with smaller element is sorted before list with larger element.</li> <li>If all elements compared in step 1 are equal, shorter list is sorted before longer list.</li> <li>Otherwise the tow lists are equal.</li> </ul> <p>If a list column is passed as parameter to a formula, and the parameter expects a scalar value, the first element will be used. And if the element is a linked record, the value of its display column will be used.</p> <p>When applying aggregate functions (min, max, sum, avg) to a list column, if there is only 1 element in the list, use that element; otherwise this row will not be aggregated.</p>"},{"location":"scripts/sql/introduction/#null-values","title":"NULL values","text":"<p>NULL value is distinct from 0. It represents a missing value. The following values are treated as NULL:</p> <ul> <li>Empty cells in a table.</li> <li>Values which cannot be converted to the column type.</li> <li>Empty strings (\"\"). This is different from standard SQL.</li> <li>Lists are treated as NULL based on the rules described in the \"List Types\" section.</li> <li>Functions or formula columns that return error.</li> </ul> <p>In the <code>WHERE</code> clause:</p> <ul> <li>Arithmetics operations such as +, -, * or / on NULL values will return NULL.</li> <li><code>!=</code>, <code>NOT LIKE</code>, <code>NOT IN</code>, <code>NOT BETWEEN</code>, <code>HAS NONE OF</code>, <code>IS NOT TRUE</code>, and <code>IS NULL</code> operations will return <code>true</code> when the value is NULL.</li> <li><code>AND</code>, <code>OR</code>, <code>NOT</code> treat NULL values as <code>false</code>.</li> <li>Aggregate functions (min, max, sum, avg) will ignore NULL values.</li> </ul> <p>In formulas, NULL values will be converted to 0 or an empty string.</p>"},{"location":"scripts/sql/introduction/#extended-syntax","title":"Extended syntax","text":""},{"location":"scripts/sql/introduction/#using-formulas-in-sql-query","title":"Using formulas in SQL query","text":"<p>You may use a formula syntax that's almost the same as SeaTable's formulas in SQL queries. There are a few special notes:</p> <ul> <li>Link formulas are not supported. e.g. {link.age} is invalid.</li> <li>Reference to columns should not be enclosed by curly brackets (\"{}\"). Don't write <code>SELECT abs({column}) FROM table</code>. Write <code>SELECT abs(column) FROM table</code>. This is consistent with standard SQL syntax.</li> <li>You have to use backticks (\"``\") to enclose column references, when column name contains space or \"-\". E.g. <code>SELECT abs(`column-a`) FROM table</code>.</li> <li>You cannot use column alias in formulas. E.g. <code>SELECT abs(t.column) FROM table AS t;</code> is invalid.</li> <li>Formulas can be used in <code>GROUP BY</code> and <code>ORDER BY</code> clauses.</li> </ul> <p>For an exhaustive list of available functions, please refer to the complete function reference.</p>"},{"location":"scripts/sql/introduction/#extended-list-operators","title":"Extended list operators","text":"<p>Some column types in SeaTable have list values. The SeaTable UI supports a few special filters for such types, which are <code>HAS ANY OF</code>, <code>HAS ALL OF</code>, <code>HAS NONE OF</code> and <code>IS EXACTLY</code>. You can use the same syntax to filter such columns with SQL. For all these operators, the list of string constant are enclosed with brackets, just like the syntax for <code>IN</code>. Please note that the order of values in the list is not taken into account.</p> <p>Example <code>SELECT * FROM table WHERE city HAS ANY OF (\"New York\", \"Paris\")</code> will retrieve all rows that contain either \"New York\" or \"Paris\" in the \"multiple select\"-type column <code>city</code></p>"},{"location":"scripts/sql/introduction/#big-data-storage-indexes","title":"Big Data storage indexes","text":"<p>To improve query performance, SeaTable will automatically create indexes for the rows stored in big data storage engine. Currently, text, number, date, single select, multiple select, collaborators, creator, create date, modifier and modification date columns are indexed.</p> <p>When you add or delete a column in a table, the index for this column is not added/removed immediately. Indexes creation and deletion are triggered in two cases:</p> <ol> <li>When you archive the table for the next time, indexes are created for new columns and indexes for removed columns are removed.</li> <li>Users may manage indexes from \"index management\" UI. You can open it from the \"Big data management\" menu in the base.</li> </ol>"}]}